{
  "0": {
    "filepath": "/admin/authController.js",
    "controllerName": "authController",
    "methodArr": [
      {
        "register": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const data = new User({ ...req.body\n    });\n    let unique = await uniqueValidation(User, req.body);\n\n    if (!unique) {\n      return utils.inValidParam('User Registration Failed, Duplicate Data found', res);\n    }\n\n    const result = await dbService.createDocument(User, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "forgotPassword": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params.email) {\n      return utils.insufficientParameters(res);\n    }\n\n    let where = {\n      email: params.email\n    };\n    params.email = params.email.toString().toLowerCase();\n    let isUser = await dbService.getDocumentByQuery(User, where);\n\n    if (isUser) {\n      let {\n        resultOfEmail,\n        resultOfSMS\n      } = await authService.sendResetPasswordNotification(isUser);\n\n      if (resultOfEmail && resultOfSMS) {\n        return utils.successResponse('otp successfully send.', res);\n      } else if (resultOfEmail && !resultOfSMS) {\n        return utils.successResponse('otp successfully send to your email.', res);\n      } else if (!resultOfEmail && resultOfSMS) {\n        return utils.successResponse('otp successfully send to your mobile number.', res);\n      } else {\n        return utils.failureResponse('otp can not be sent due to some issue try again later', res);\n      }\n    } else {\n      return utils.recordNotFound('user not found', res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error, res);\n  }\n}"
      },
      {
        "validateResetPasswordOtp": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params || !params.otp) {\n      return utils.insufficientParameters(res);\n    }\n\n    let isUser = await dbService.getDocumentByQuery(User, {\n      'resetPasswordLink.code': params.otp\n    });\n\n    if (!isUser || !isUser.resetPasswordLink.expireTime) {\n      return utils.invalidRequest('Invalid OTP', res);\n    } // link expire\n\n\n    if (moment(new Date()).isAfter(moment(isUser.resetPasswordLink.expireTime))) {\n      return utils.invalidRequest('Your reset password link is expired or invalid', res);\n    } // await dbService.updateDocument(User, isUser.id, { resetPasswordLink: {} })\n\n\n    return utils.requestValidated('Otp verified', res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "resetPassword": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params.code || !params.newPassword) {\n      return utils.insufficientParameters(res);\n    }\n\n    let isUser = await dbService.getDocumentByQuery(User, {\n      'resetPasswordLink.code': params.code\n    });\n\n    if (isUser && isUser.resetPasswordLink.expireTime) {\n      if (moment(new Date()).isAfter(moment(isUser.resetPasswordLink.expireTime))) {\n        // link expire\n        return utils.invalidRequest('Your reset password link is expired on invalid', res);\n      }\n    } else {\n      // invalid token\n      return utils.invalidRequest('Invalid Code', res);\n    }\n\n    let response = await authService.resetPassword(isUser, params.newPassword);\n\n    if (response && !response.flag) {\n      return utils.requestValidated(response.data, res);\n    }\n\n    return utils.invalidRequest(response.data, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "login": "async (req, res) => {\n  try {\n    let {\n      username,\n      password\n    } = req.body;\n    let url = req.originalUrl;\n\n    if (username && password) {\n      let result = await authService.loginUser(username, password, url);\n\n      if (!result.flag) {\n        return utils.loginSuccess(result.data, res);\n      }\n\n      return utils.loginFailed(result.data, res);\n    } else {\n      return utils.insufficientParameters(res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "authService": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 52,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 51,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 51
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "authService"
              },
              "name": "authService"
            },
            "init": {
              "type": "CallExpression",
              "start": 21,
              "end": 51,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 21
                },
                "end": {
                  "line": 1,
                  "column": 51
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 21,
                "end": 28,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 21
                  },
                  "end": {
                    "line": 1,
                    "column": 28
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 29,
                  "end": 50,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 29
                    },
                    "end": {
                      "line": 1,
                      "column": 50
                    }
                  },
                  "extra": {
                    "rawValue": "../../services/auth",
                    "raw": "'../../services/auth'"
                  },
                  "value": "../../services/auth"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 53,
        "end": 99,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 59,
            "end": 98,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 59,
              "end": 64,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 67,
              "end": 98,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 67,
                "end": 74,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 75,
                  "end": 97,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "User": {
        "type": "VariableDeclaration",
        "start": 100,
        "end": 141,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 106,
            "end": 140,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 106,
              "end": 110,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 10
                },
                "identifierName": "User"
              },
              "name": "User"
            },
            "init": {
              "type": "CallExpression",
              "start": 113,
              "end": 140,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 13
                },
                "end": {
                  "line": 3,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 113,
                "end": 120,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 13
                  },
                  "end": {
                    "line": 3,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 121,
                  "end": 139,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 21
                    },
                    "end": {
                      "line": 3,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/user",
                    "raw": "'../../model/user'"
                  },
                  "value": "../../model/user"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 142,
        "end": 193,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 148,
            "end": 192,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 148,
              "end": 157,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 160,
              "end": 192,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 18
                },
                "end": {
                  "line": 4,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 160,
                "end": 167,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 18
                  },
                  "end": {
                    "line": 4,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 168,
                  "end": 191,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 26
                    },
                    "end": {
                      "line": 4,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "moment": {
        "type": "VariableDeclaration",
        "start": 194,
        "end": 227,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 33
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 200,
            "end": 226,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 32
              }
            },
            "id": {
              "type": "Identifier",
              "start": 200,
              "end": 206,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 12
                },
                "identifierName": "moment"
              },
              "name": "moment"
            },
            "init": {
              "type": "CallExpression",
              "start": 209,
              "end": 226,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 15
                },
                "end": {
                  "line": 5,
                  "column": 32
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 209,
                "end": 216,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 15
                  },
                  "end": {
                    "line": 5,
                    "column": 22
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 217,
                  "end": 225,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 23
                    },
                    "end": {
                      "line": 5,
                      "column": 31
                    }
                  },
                  "extra": {
                    "rawValue": "moment",
                    "raw": "'moment'"
                  },
                  "value": "moment"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userSchemaKey": {
        "type": "VariableDeclaration",
        "start": 228,
        "end": 299,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 234,
            "end": 298,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 234,
              "end": 247,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 19
                },
                "identifierName": "userSchemaKey"
              },
              "name": "userSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 250,
              "end": 298,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 22
                },
                "end": {
                  "line": 6,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 250,
                "end": 257,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 22
                  },
                  "end": {
                    "line": 6,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 258,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 30
                    },
                    "end": {
                      "line": 6,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userValidation",
                    "raw": "'../../utils/validation/userValidation'"
                  },
                  "value": "../../utils/validation/userValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 300,
        "end": 358,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 306,
            "end": 357,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 306,
              "end": 316,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 319,
              "end": 357,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 19
                },
                "end": {
                  "line": 7,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 319,
                "end": 326,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 19
                  },
                  "end": {
                    "line": 7,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 327,
                  "end": 356,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 27
                    },
                    "end": {
                      "line": 7,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "uniqueValidation": {
        "type": "VariableDeclaration",
        "start": 359,
        "end": 418,
        "loc": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 59
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 365,
            "end": 417,
            "loc": {
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 58
              }
            },
            "id": {
              "type": "ObjectPattern",
              "start": 365,
              "end": 385,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 8,
                  "column": 26
                }
              },
              "properties": [
                {
                  "type": "ObjectProperty",
                  "start": 367,
                  "end": 383,
                  "loc": {
                    "start": {
                      "line": 8,
                      "column": 8
                    },
                    "end": {
                      "line": 8,
                      "column": 24
                    }
                  },
                  "extra": {
                    "shorthand": true
                  },
                  "method": false,
                  "key": {
                    "type": "Identifier",
                    "start": 367,
                    "end": 383,
                    "loc": {
                      "start": {
                        "line": 8,
                        "column": 8
                      },
                      "end": {
                        "line": 8,
                        "column": 24
                      },
                      "identifierName": "uniqueValidation"
                    },
                    "name": "uniqueValidation"
                  },
                  "computed": false,
                  "shorthand": true,
                  "value": {
                    "type": "Identifier",
                    "start": 367,
                    "end": 383,
                    "loc": {
                      "start": {
                        "line": 8,
                        "column": 8
                      },
                      "end": {
                        "line": 8,
                        "column": 24
                      },
                      "identifierName": "uniqueValidation"
                    },
                    "name": "uniqueValidation"
                  }
                }
              ]
            },
            "init": {
              "type": "CallExpression",
              "start": 388,
              "end": 417,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 29
                },
                "end": {
                  "line": 8,
                  "column": 58
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 388,
                "end": 395,
                "loc": {
                  "start": {
                    "line": 8,
                    "column": 29
                  },
                  "end": {
                    "line": 8,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 396,
                  "end": 416,
                  "loc": {
                    "start": {
                      "line": 8,
                      "column": 37
                    },
                    "end": {
                      "line": 8,
                      "column": 57
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/common",
                    "raw": "'../../utils/common'"
                  },
                  "value": "../../utils/common"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "1": {
    "filepath": "/admin/depreciationModelController.js",
    "controllerName": "depreciationModelController",
    "methodArr": [
      {
        "addDepreciationModel": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, depreciationModelSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new DepreciationModel({ ...req.body\n    });\n    let result = await dbService.createDocument(DepreciationModel, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllDepreciationModel": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(DepreciationModel, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(DepreciationModel, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModel": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(DepreciationModel, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModelCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(DepreciationModel, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModelByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(DepreciationModel, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateDepreciationModel": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, depreciationModelSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(DepreciationModel, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateDepreciationModel": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, depreciationModelSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(DepreciationModel, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteDepreciationModel": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(DepreciationModel, query, {\n      isDeleted: true\n    }, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.recordNotFound([], res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteManyDepreciationModel": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      const query = {\n        _id: {\n          $in: ids\n        }\n      };\n      let data = await dbService.bulkUpdate(DepreciationModel, query, {\n        isDeleted: true\n      });\n\n      if (!data) {\n        return utils.recordNotFound([], res);\n      }\n\n      return utils.successResponse(data, res);\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, depreciationModelSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(DepreciationModel, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new DepreciationModel({ ...params\n      });\n      let result = await dbService.createDocument(DepreciationModel, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "myFunction": "async (req, res) => {\n  console.log('hello');\n}"
      }
    ],
    "allVariablesInFile": {
      "DepreciationModel": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 67,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 67
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 66,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 66
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 23,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 23
                },
                "identifierName": "DepreciationModel"
              },
              "name": "DepreciationModel"
            },
            "init": {
              "type": "CallExpression",
              "start": 26,
              "end": 66,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 66
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 26,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 34,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 34
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/depreciationModel",
                    "raw": "'../../model/depreciationModel'"
                  },
                  "value": "../../model/depreciationModel"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 68,
        "end": 114,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 74,
            "end": 113,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 74,
              "end": 79,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 82,
              "end": 113,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 82,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 90,
                  "end": 112,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "depreciationModelSchemaKey": {
        "type": "VariableDeclaration",
        "start": 115,
        "end": 212,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 97
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 121,
            "end": 211,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 96
              }
            },
            "id": {
              "type": "Identifier",
              "start": 121,
              "end": 147,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 32
                },
                "identifierName": "depreciationModelSchemaKey"
              },
              "name": "depreciationModelSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 150,
              "end": 211,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 35
                },
                "end": {
                  "line": 3,
                  "column": 96
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 150,
                "end": 157,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 35
                  },
                  "end": {
                    "line": 3,
                    "column": 42
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 158,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 43
                    },
                    "end": {
                      "line": 3,
                      "column": 95
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/depreciationModelValidation",
                    "raw": "'../../utils/validation/depreciationModelValidation'"
                  },
                  "value": "../../utils/validation/depreciationModelValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 213,
        "end": 271,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 219,
            "end": 270,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 219,
              "end": 229,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 232,
              "end": 270,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 232,
                "end": 239,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 240,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 323,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 322,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 287,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 290,
              "end": 322,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 290,
                "end": 297,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 298,
                  "end": 321,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "2": {
    "filepath": "/admin/enhancementController.js",
    "controllerName": "enhancementController",
    "methodArr": [
      {
        "addEnhancement": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Enhancement({ ...req.body\n    });\n    let result = await dbService.createDocument(Enhancement, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllEnhancement": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Enhancement, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Enhancement, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancement": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Enhancement, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancementCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Enhancement, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancementByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Enhancement, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateEnhancement": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Enhancement, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateEnhancement": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, enhancementSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Enhancement, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteEnhancement": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Enhancement, query, {\n      isDeleted: true\n    }, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.recordNotFound([], res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteManyEnhancement": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      const query = {\n        _id: {\n          $in: ids\n        }\n      };\n      let data = await dbService.bulkUpdate(Enhancement, query, {\n        isDeleted: true\n      });\n\n      if (!data) {\n        return utils.recordNotFound([], res);\n      }\n\n      return utils.successResponse(data, res);\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Enhancement, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Enhancement({ ...params\n      });\n      let result = await dbService.createDocument(Enhancement, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Enhancement": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 55,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 55
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 54,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 54
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "Enhancement"
              },
              "name": "Enhancement"
            },
            "init": {
              "type": "CallExpression",
              "start": 20,
              "end": 54,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 20
                },
                "end": {
                  "line": 1,
                  "column": 54
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 20,
                "end": 27,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 20
                  },
                  "end": {
                    "line": 1,
                    "column": 27
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 28,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 28
                    },
                    "end": {
                      "line": 1,
                      "column": 53
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/enhancement",
                    "raw": "'../../model/enhancement'"
                  },
                  "value": "../../model/enhancement"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 102,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 101,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 67,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 70,
              "end": 101,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 70,
                "end": 77,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 78,
                  "end": 100,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "enhancementSchemaKey": {
        "type": "VariableDeclaration",
        "start": 103,
        "end": 188,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 85
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 109,
            "end": 187,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 84
              }
            },
            "id": {
              "type": "Identifier",
              "start": 109,
              "end": 129,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 26
                },
                "identifierName": "enhancementSchemaKey"
              },
              "name": "enhancementSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 132,
              "end": 187,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 29
                },
                "end": {
                  "line": 3,
                  "column": 84
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 132,
                "end": 139,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 29
                  },
                  "end": {
                    "line": 3,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 140,
                  "end": 186,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 37
                    },
                    "end": {
                      "line": 3,
                      "column": 83
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/enhancementValidation",
                    "raw": "'../../utils/validation/enhancementValidation'"
                  },
                  "value": "../../utils/validation/enhancementValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 189,
        "end": 247,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 195,
            "end": 246,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 195,
              "end": 205,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 208,
              "end": 246,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 208,
                "end": 215,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 216,
                  "end": 245,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 248,
        "end": 299,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 254,
            "end": 298,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 254,
              "end": 263,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 266,
              "end": 298,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 266,
                "end": 273,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 274,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "3": {
    "filepath": "/admin/fileUploadController.js",
    "controllerName": "fileUploadController",
    "methodArr": [
      {
        "upload": "async (req, res) => {\n  try {\n    // Create Directory if not exist.\n    await makeDirectory(defaultDirectory); // Setting up formidable options.\n\n    const form = new formidable.IncomingForm();\n    form.multiples = true;\n    form.maxFileSize = 300 * 1024 * 1024; //300 MB\n\n    form.maxFieldsSize = 100 * 1024 * 1024; //50 MB\n    //Upload File one by one\n\n    const uploadFileRes = await new Promise(async (resolve, reject) => {\n      form.parse(req, async function (err, fields, files) {\n        let filePaths = [];\n        let fileCount = 1;\n        let fileArr = [];\n\n        if (files['file[]'].size == 0) {\n          resolve({\n            'err': 'Please Select any one File',\n            'status': false\n          });\n        }\n\n        if (!Array.isArray(files['file[]'])) {\n          fileArr.push(files['file[]']);\n          files['file[]'] = fileArr;\n        }\n\n        for (let file of files['file[]']) {\n          let response = await uploadFile(file, fields, fileCount++);\n\n          if (response.status == false) {\n            filePaths.push({\n              'name': file.name,\n              'err': response.message,\n              'status': false\n            });\n          } else {\n            let url = response.data;\n\n            if (!validUrl.isUri(response.data)) {\n              response.data = response.data.replace('/public', '');\n              url = req.protocol + '://' + req.headers.host + response.data;\n            }\n\n            filePaths.push({\n              'path': url,\n              'status': true\n            });\n          }\n        }\n\n        resolve(filePaths);\n      });\n    });\n    return utils.successResponse(uploadFileRes, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "makeDirectory": "async directoryPath => {\n  if (!fs.existsSync(directoryPath)) {\n    fs.promises.mkdir(directoryPath, {\n      recursive: true\n    }, err => {\n      if (err) {\n        return false;\n      }\n\n      ;\n      return true;\n    });\n  }\n\n  return true;\n}"
      }
    ],
    "allVariablesInFile": {
      "fs": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 25,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 24,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 24
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 8,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 8
                },
                "identifierName": "fs"
              },
              "name": "fs"
            },
            "init": {
              "type": "CallExpression",
              "start": 11,
              "end": 24,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 11
                },
                "end": {
                  "line": 1,
                  "column": 24
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 11,
                "end": 18,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 11
                  },
                  "end": {
                    "line": 1,
                    "column": 18
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 19,
                  "end": 23,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 19
                    },
                    "end": {
                      "line": 1,
                      "column": 23
                    }
                  },
                  "extra": {
                    "rawValue": "fs",
                    "raw": "'fs'"
                  },
                  "value": "fs"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "path": {
        "type": "VariableDeclaration",
        "start": 26,
        "end": 55,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 32,
            "end": 54,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 28
              }
            },
            "id": {
              "type": "Identifier",
              "start": 32,
              "end": 36,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 10
                },
                "identifierName": "path"
              },
              "name": "path"
            },
            "init": {
              "type": "CallExpression",
              "start": 39,
              "end": 54,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 13
                },
                "end": {
                  "line": 2,
                  "column": 28
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 39,
                "end": 46,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 13
                  },
                  "end": {
                    "line": 2,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 47,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 21
                    },
                    "end": {
                      "line": 2,
                      "column": 27
                    }
                  },
                  "extra": {
                    "rawValue": "path",
                    "raw": "'path'"
                  },
                  "value": "path"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "formidable": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 97,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 96,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 72,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 16
                },
                "identifierName": "formidable"
              },
              "name": "formidable"
            },
            "init": {
              "type": "CallExpression",
              "start": 75,
              "end": 96,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 19
                },
                "end": {
                  "line": 3,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 75,
                "end": 82,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 19
                  },
                  "end": {
                    "line": 3,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 83,
                  "end": 95,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 27
                    },
                    "end": {
                      "line": 3,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "formidable",
                    "raw": "'formidable'"
                  },
                  "value": "formidable"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validUrl": {
        "type": "VariableDeclaration",
        "start": 98,
        "end": 136,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 38
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 104,
            "end": 135,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 37
              }
            },
            "id": {
              "type": "Identifier",
              "start": 104,
              "end": 112,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 14
                },
                "identifierName": "validUrl"
              },
              "name": "validUrl"
            },
            "init": {
              "type": "CallExpression",
              "start": 115,
              "end": 135,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 17
                },
                "end": {
                  "line": 4,
                  "column": 37
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 115,
                "end": 122,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 17
                  },
                  "end": {
                    "line": 4,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 123,
                  "end": 134,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 25
                    },
                    "end": {
                      "line": 4,
                      "column": 36
                    }
                  },
                  "extra": {
                    "rawValue": "valid-url",
                    "raw": "'valid-url'"
                  },
                  "value": "valid-url"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "AWS": {
        "type": "VariableDeclaration",
        "start": 137,
        "end": 168,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 31
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 143,
            "end": 167,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 30
              }
            },
            "id": {
              "type": "Identifier",
              "start": 143,
              "end": 146,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 9
                },
                "identifierName": "AWS"
              },
              "name": "AWS"
            },
            "init": {
              "type": "CallExpression",
              "start": 149,
              "end": 167,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 12
                },
                "end": {
                  "line": 5,
                  "column": 30
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 149,
                "end": 156,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 12
                  },
                  "end": {
                    "line": 5,
                    "column": 19
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 157,
                  "end": 166,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 20
                    },
                    "end": {
                      "line": 5,
                      "column": 29
                    }
                  },
                  "extra": {
                    "rawValue": "aws-sdk",
                    "raw": "'aws-sdk'"
                  },
                  "value": "aws-sdk"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 170,
        "end": 216,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 176,
            "end": 215,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 176,
              "end": 181,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 184,
              "end": 215,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 14
                },
                "end": {
                  "line": 7,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 184,
                "end": 191,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 14
                  },
                  "end": {
                    "line": 7,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 192,
                  "end": 214,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 22
                    },
                    "end": {
                      "line": 7,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "defaultDirectory": {
        "type": "VariableDeclaration",
        "start": 218,
        "end": 257,
        "loc": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 39
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 222,
            "end": 256,
            "loc": {
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 38
              }
            },
            "id": {
              "type": "Identifier",
              "start": 222,
              "end": 238,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 20
                },
                "identifierName": "defaultDirectory"
              },
              "name": "defaultDirectory"
            },
            "init": {
              "type": "StringLiteral",
              "start": 241,
              "end": 256,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 23
                },
                "end": {
                  "line": 9,
                  "column": 38
                }
              },
              "extra": {
                "rawValue": "public/assets",
                "raw": "'public/assets'"
              },
              "value": "public/assets"
            }
          }
        ],
        "kind": "let"
      },
      "allowedFileTypes": {
        "type": "VariableDeclaration",
        "start": 258,
        "end": 284,
        "loc": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 26
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 262,
            "end": 283,
            "loc": {
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 25
              }
            },
            "id": {
              "type": "Identifier",
              "start": 262,
              "end": 278,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 20
                },
                "identifierName": "allowedFileTypes"
              },
              "name": "allowedFileTypes"
            },
            "init": {
              "type": "ArrayExpression",
              "start": 281,
              "end": 283,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 23
                },
                "end": {
                  "line": 10,
                  "column": 25
                }
              },
              "elements": []
            }
          }
        ],
        "kind": "let"
      },
      "maxFileSize": {
        "type": "VariableDeclaration",
        "start": 285,
        "end": 305,
        "loc": {
          "start": {
            "line": 11,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 20
          }
        },
        "trailingComments": [
          {
            "type": "CommentLine",
            "value": "In Megabyte",
            "start": 306,
            "end": 319,
            "loc": {
              "start": {
                "line": 11,
                "column": 21
              },
              "end": {
                "line": 11,
                "column": 34
              }
            }
          }
        ],
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 289,
            "end": 304,
            "loc": {
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 19
              }
            },
            "id": {
              "type": "Identifier",
              "start": 289,
              "end": 300,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 15
                },
                "identifierName": "maxFileSize"
              },
              "name": "maxFileSize"
            },
            "init": {
              "type": "NumericLiteral",
              "start": 303,
              "end": 304,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 18
                },
                "end": {
                  "line": 11,
                  "column": 19
                }
              },
              "extra": {
                "rawValue": 5,
                "raw": "5"
              },
              "value": 5
            }
          }
        ],
        "kind": "let"
      }
    }
  },
  "4": {
    "filepath": "/admin/masterController.js",
    "controllerName": "masterController",
    "methodArr": [
      {
        "addMaster": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, masterSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Master({ ...req.body\n    });\n    let result = await dbService.createDocument(Master, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllMaster": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Master, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Master, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMaster": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Master, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMasterCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Master, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMasterByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Master, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateMaster": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, masterSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Master, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateMaster": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, masterSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Master, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteMaster": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await deleteDependentService.softDeleteMaster(query);\n\n    if (!result) {\n      return utils.failureResponse('something went wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteManyMaster": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      const query = {\n        _id: {\n          $in: ids\n        }\n      };\n      let result = await deleteDependentService.softDeleteMaster(query);\n\n      if (!result) {\n        return utils.recordNotFound([], res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, masterSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Master, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Master({ ...params\n      });\n      let result = await dbService.createDocument(Master, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "deleteMaster": "async (req, res) => {\n  try {\n    if (req.params.id) {\n      let query = {\n        _id: req.params.id\n      };\n\n      if (req.body.isWarning) {\n        let result = await deleteDependentService.countMaster(query);\n\n        if (result) {\n          return utils.successResponse(result, res);\n        }\n\n        return utils.failureResponse('something went wrong.', res);\n      } else {\n        let result = await deleteDependentService.deleteMaster(query);\n\n        if (!result) {\n          return utils.failureResponse('something went wrong.', res);\n        }\n\n        return utils.successResponse(result, res);\n      }\n    } else {\n      return utils.badRequest({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "deleteManyMaster": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      let query = {\n        _id: {\n          '$in': ids\n        }\n      };\n\n      if (req.body.isWarning) {\n        let result = await deleteDependentService.countMaster(query);\n        return utils.successResponse(result, res);\n      } else {\n        let result = await deleteDependentService.deleteMaster(query);\n        return utils.successResponse(result, res);\n      }\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Master": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 45,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 45
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 44,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 44
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 12,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 12
                },
                "identifierName": "Master"
              },
              "name": "Master"
            },
            "init": {
              "type": "CallExpression",
              "start": 15,
              "end": 44,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 15
                },
                "end": {
                  "line": 1,
                  "column": 44
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 15,
                "end": 22,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 15
                  },
                  "end": {
                    "line": 1,
                    "column": 22
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 23,
                  "end": 43,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 43
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/master",
                    "raw": "'../../model/master'"
                  },
                  "value": "../../model/master"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 46,
        "end": 92,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 52,
            "end": 91,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 52,
              "end": 57,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 60,
              "end": 91,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 60,
                "end": 67,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 68,
                  "end": 90,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "masterSchemaKey": {
        "type": "VariableDeclaration",
        "start": 93,
        "end": 168,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 75
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 99,
            "end": 167,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 74
              }
            },
            "id": {
              "type": "Identifier",
              "start": 99,
              "end": 114,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 21
                },
                "identifierName": "masterSchemaKey"
              },
              "name": "masterSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 117,
              "end": 167,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 24
                },
                "end": {
                  "line": 3,
                  "column": 74
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 117,
                "end": 124,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 24
                  },
                  "end": {
                    "line": 3,
                    "column": 31
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 125,
                  "end": 166,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 32
                    },
                    "end": {
                      "line": 3,
                      "column": 73
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/masterValidation",
                    "raw": "'../../utils/validation/masterValidation'"
                  },
                  "value": "../../utils/validation/masterValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 169,
        "end": 227,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 175,
            "end": 226,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 175,
              "end": 185,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 188,
              "end": 226,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 188,
                "end": 195,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 196,
                  "end": 225,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 228,
        "end": 279,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 234,
            "end": 278,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 234,
              "end": 243,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 246,
              "end": 278,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 246,
                "end": 253,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 254,
                  "end": 277,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 280,
        "end": 350,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 286,
            "end": 349,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 286,
              "end": 308,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 311,
              "end": 349,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 311,
                "end": 318,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 319,
                  "end": 348,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "5": {
    "filepath": "/admin/projectRouteController.js",
    "controllerName": "projectRouteController",
    "methodArr": [
      {
        "addProjectRoute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, projectRouteSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new ProjectRoute({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(ProjectRoute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "bulkInsertProjectRoute": "async (req, res) => {\n  try {\n    let data;\n\n    if (req.body.data !== undefined && req.body.data.length) {\n      data = req.body.data;\n\n      for (let i = 0; i < data.length; i++) {\n        Object.assign(data[i], {\n          addedBy: req.user.id\n        });\n      }\n\n      let result = await dbService.bulkInsert(ProjectRoute, data);\n      return utils.successResponse(result, res);\n    } else {\n      return utils.failureResponse('Invalid Data', res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllProjectRoute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(ProjectRoute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(ProjectRoute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getProjectRoute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(ProjectRoute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateProjectRoute": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, projectRouteSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(ProjectRoute, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteProjectRoute": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await deleteDependentService.softDeleteProjectRoute(query);\n\n    if (!result) {\n      return utils.failureResponse('something went wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateProjectRoute": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, projectRouteSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(ProjectRoute, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getProjectRouteByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(ProjectRoute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getProjectRouteCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(ProjectRoute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, projectRouteSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(ProjectRoute, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new ProjectRoute({ ...params\n      });\n      let result = await dbService.createDocument(ProjectRoute, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "ProjectRoute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 57,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 57
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 56,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 56
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 18,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 18
                },
                "identifierName": "ProjectRoute"
              },
              "name": "ProjectRoute"
            },
            "init": {
              "type": "CallExpression",
              "start": 21,
              "end": 56,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 21
                },
                "end": {
                  "line": 1,
                  "column": 56
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 21,
                "end": 28,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 21
                  },
                  "end": {
                    "line": 1,
                    "column": 28
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 29,
                  "end": 55,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 29
                    },
                    "end": {
                      "line": 1,
                      "column": 55
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/projectRoute",
                    "raw": "'../../model/projectRoute'"
                  },
                  "value": "../../model/projectRoute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 58,
        "end": 104,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 64,
            "end": 103,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 64,
              "end": 69,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 72,
              "end": 103,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 72,
                "end": 79,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 80,
                  "end": 102,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "projectRouteSchemaKey": {
        "type": "VariableDeclaration",
        "start": 105,
        "end": 192,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 87
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 111,
            "end": 191,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 86
              }
            },
            "id": {
              "type": "Identifier",
              "start": 111,
              "end": 132,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 27
                },
                "identifierName": "projectRouteSchemaKey"
              },
              "name": "projectRouteSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 135,
              "end": 191,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 30
                },
                "end": {
                  "line": 3,
                  "column": 86
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 135,
                "end": 142,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 30
                  },
                  "end": {
                    "line": 3,
                    "column": 37
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 143,
                  "end": 190,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 38
                    },
                    "end": {
                      "line": 3,
                      "column": 85
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/projectRouteValidation",
                    "raw": "'../../utils/validation/projectRouteValidation'"
                  },
                  "value": "../../utils/validation/projectRouteValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 193,
        "end": 251,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 199,
            "end": 250,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 199,
              "end": 209,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 212,
              "end": 250,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 212,
                "end": 219,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 220,
                  "end": 249,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 252,
        "end": 303,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 258,
            "end": 302,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 258,
              "end": 267,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 270,
              "end": 302,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 270,
                "end": 277,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 278,
                  "end": 301,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 304,
        "end": 374,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 310,
            "end": 373,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 310,
              "end": 332,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 335,
              "end": 373,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 335,
                "end": 342,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 343,
                  "end": 372,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "6": {
    "filepath": "/admin/propertyAttributeController.js",
    "controllerName": "propertyAttributeController",
    "methodArr": [
      {
        "addPropertyAttribute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, propertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new PropertyAttribute({ ...req.body\n    });\n    let result = await dbService.createDocument(PropertyAttribute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllPropertyAttribute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(PropertyAttribute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(PropertyAttribute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(PropertyAttribute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttributeCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(PropertyAttribute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttributeByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(PropertyAttribute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updatePropertyAttribute": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, propertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(PropertyAttribute, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdatePropertyAttribute": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, propertyAttributeSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(PropertyAttribute, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeletePropertyAttribute": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await deleteDependentService.softDeletePropertyAttribute(query);\n\n    if (!result) {\n      return utils.failureResponse('something went wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteManyPropertyAttribute": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      const query = {\n        _id: {\n          $in: ids\n        }\n      };\n      let result = await deleteDependentService.softDeletePropertyAttribute(query);\n\n      if (!result) {\n        return utils.recordNotFound([], res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, propertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(PropertyAttribute, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new PropertyAttribute({ ...params\n      });\n      let result = await dbService.createDocument(PropertyAttribute, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "PropertyAttribute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 67,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 67
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 66,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 66
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 23,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 23
                },
                "identifierName": "PropertyAttribute"
              },
              "name": "PropertyAttribute"
            },
            "init": {
              "type": "CallExpression",
              "start": 26,
              "end": 66,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 66
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 26,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 34,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 34
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/propertyAttribute",
                    "raw": "'../../model/propertyAttribute'"
                  },
                  "value": "../../model/propertyAttribute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 68,
        "end": 114,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 74,
            "end": 113,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 74,
              "end": 79,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 82,
              "end": 113,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 82,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 90,
                  "end": 112,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "propertyAttributeSchemaKey": {
        "type": "VariableDeclaration",
        "start": 115,
        "end": 212,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 97
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 121,
            "end": 211,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 96
              }
            },
            "id": {
              "type": "Identifier",
              "start": 121,
              "end": 147,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 32
                },
                "identifierName": "propertyAttributeSchemaKey"
              },
              "name": "propertyAttributeSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 150,
              "end": 211,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 35
                },
                "end": {
                  "line": 3,
                  "column": 96
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 150,
                "end": 157,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 35
                  },
                  "end": {
                    "line": 3,
                    "column": 42
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 158,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 43
                    },
                    "end": {
                      "line": 3,
                      "column": 95
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/propertyAttributeValidation",
                    "raw": "'../../utils/validation/propertyAttributeValidation'"
                  },
                  "value": "../../utils/validation/propertyAttributeValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 213,
        "end": 271,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 219,
            "end": 270,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 219,
              "end": 229,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 232,
              "end": 270,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 232,
                "end": 239,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 240,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 323,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 322,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 287,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 290,
              "end": 322,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 290,
                "end": 297,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 298,
                  "end": 321,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 324,
        "end": 394,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 330,
            "end": 393,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 330,
              "end": 352,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 355,
              "end": 393,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 355,
                "end": 362,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 363,
                  "end": 392,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "7": {
    "filepath": "/admin/propertyController.js",
    "controllerName": "propertyController",
    "methodArr": [
      {
        "addProperty": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, propertySchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Property({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(Property, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllProperty": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Property, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Property, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getProperty": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Property, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Property, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Property, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateProperty": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, propertySchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Property, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateProperty": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, propertySchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Property, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteProperty": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await deleteDependentService.softDeleteProperty(query);\n\n    if (!result) {\n      return utils.failureResponse('something went wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteManyProperty": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      const query = {\n        _id: {\n          $in: ids\n        }\n      };\n      let result = await deleteDependentService.softDeleteProperty(query);\n\n      if (!result) {\n        return utils.recordNotFound([], res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "deleteProperty": "async (req, res) => {\n  try {\n    if (req.params.id) {\n      let query = {\n        _id: req.params.id\n      };\n\n      if (req.body.isWarning) {\n        let result = await deleteDependentService.countProperty(query);\n\n        if (result) {\n          return utils.successResponse(result, res);\n        }\n\n        return utils.failureResponse('something went wrong.', res);\n      } else {\n        let result = await deleteDependentService.deleteProperty(query);\n\n        if (!result) {\n          return utils.failureResponse('something went wrong.', res);\n        }\n\n        return utils.successResponse(result, res);\n      }\n    } else {\n      return utils.badRequest({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "deleteManyProperty": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      let query = {\n        _id: {\n          '$in': ids\n        }\n      };\n\n      if (req.body.isWarning) {\n        let result = await deleteDependentService.countProperty(query);\n        return utils.successResponse(result, res);\n      } else {\n        let result = await deleteDependentService.deleteProperty(query);\n        return utils.successResponse(result, res);\n      }\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, propertySchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Property, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Property({ ...params\n      });\n      let result = await dbService.createDocument(Property, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "bulkInsertProperty": "async (req, res) => {\n  try {\n    let data;\n\n    if (req.body.data !== undefined && req.body.data.length) {\n      data = req.body.data;\n\n      for (let i = 0; i < data.length; i++) {\n        Object.assign(data[i], {\n          addedBy: req.user.id\n        });\n      }\n\n      let result = await dbService.bulkInsert(Property, data);\n      return utils.successResponse(result, res);\n    } else {\n      return utils.failureResponse('Invalid Data', res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Property": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 49,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 48,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 48
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 14,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 14
                },
                "identifierName": "Property"
              },
              "name": "Property"
            },
            "init": {
              "type": "CallExpression",
              "start": 17,
              "end": 48,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 17
                },
                "end": {
                  "line": 1,
                  "column": 48
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 17,
                "end": 24,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 17
                  },
                  "end": {
                    "line": 1,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 25,
                  "end": 47,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 25
                    },
                    "end": {
                      "line": 1,
                      "column": 47
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/property",
                    "raw": "'../../model/property'"
                  },
                  "value": "../../model/property"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 50,
        "end": 96,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 56,
            "end": 95,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 56,
              "end": 61,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 64,
              "end": 95,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 64,
                "end": 71,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 72,
                  "end": 94,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "propertySchemaKey": {
        "type": "VariableDeclaration",
        "start": 97,
        "end": 176,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 79
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 103,
            "end": 175,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 78
              }
            },
            "id": {
              "type": "Identifier",
              "start": 103,
              "end": 120,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 23
                },
                "identifierName": "propertySchemaKey"
              },
              "name": "propertySchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 123,
              "end": 175,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 26
                },
                "end": {
                  "line": 3,
                  "column": 78
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 123,
                "end": 130,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 26
                  },
                  "end": {
                    "line": 3,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 131,
                  "end": 174,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 34
                    },
                    "end": {
                      "line": 3,
                      "column": 77
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/propertyValidation",
                    "raw": "'../../utils/validation/propertyValidation'"
                  },
                  "value": "../../utils/validation/propertyValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 177,
        "end": 235,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 183,
            "end": 234,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 183,
              "end": 193,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 196,
              "end": 234,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 196,
                "end": 203,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 204,
                  "end": 233,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 236,
        "end": 287,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 242,
            "end": 286,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 242,
              "end": 251,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 254,
              "end": 286,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 254,
                "end": 261,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 262,
                  "end": 285,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 288,
        "end": 358,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 294,
            "end": 357,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 294,
              "end": 316,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 319,
              "end": 357,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 319,
                "end": 326,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 327,
                  "end": 356,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "8": {
    "filepath": "/admin/roleController.js",
    "controllerName": "roleController",
    "methodArr": [
      {
        "addRole": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, roleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Role({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(Role, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "bulkInsertRole": "async (req, res) => {\n  try {\n    let data;\n\n    if (req.body.data !== undefined && req.body.data.length) {\n      data = req.body.data;\n\n      for (let i = 0; i < data.length; i++) {\n        Object.assign(data[i], {\n          addedBy: req.user.id\n        });\n      }\n\n      let result = await dbService.bulkInsert(Role, data);\n      return utils.successResponse(result, res);\n    } else {\n      return utils.failureResponse('Invalid Data', res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllRole": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Role, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Role, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getRole": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Role, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateRole": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, roleSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Role, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteRole": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await deleteDependentService.softDeleteRole(query);\n\n    if (!result) {\n      return utils.failureResponse('something went wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateRole": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, roleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(Role, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getRoleByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Role, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getRoleCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Role, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, roleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Role, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Role({ ...params\n      });\n      let result = await dbService.createDocument(Role, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Role": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 41,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 40,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 10,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 10
                },
                "identifierName": "Role"
              },
              "name": "Role"
            },
            "init": {
              "type": "CallExpression",
              "start": 13,
              "end": 40,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 13
                },
                "end": {
                  "line": 1,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 13,
                "end": 20,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 13
                  },
                  "end": {
                    "line": 1,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 21,
                  "end": 39,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 21
                    },
                    "end": {
                      "line": 1,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/role",
                    "raw": "'../../model/role'"
                  },
                  "value": "../../model/role"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 42,
        "end": 88,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 48,
            "end": 87,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 48,
              "end": 53,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 56,
              "end": 87,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 56,
                "end": 63,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 64,
                  "end": 86,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "roleSchemaKey": {
        "type": "VariableDeclaration",
        "start": 89,
        "end": 160,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 95,
            "end": 159,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 95,
              "end": 108,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 19
                },
                "identifierName": "roleSchemaKey"
              },
              "name": "roleSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 111,
              "end": 159,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 22
                },
                "end": {
                  "line": 3,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 111,
                "end": 118,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 22
                  },
                  "end": {
                    "line": 3,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 119,
                  "end": 158,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 30
                    },
                    "end": {
                      "line": 3,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/roleValidation",
                    "raw": "'../../utils/validation/roleValidation'"
                  },
                  "value": "../../utils/validation/roleValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 161,
        "end": 219,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 167,
            "end": 218,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 167,
              "end": 177,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 180,
              "end": 218,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 180,
                "end": 187,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 188,
                  "end": 217,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 220,
        "end": 271,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 226,
            "end": 270,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 226,
              "end": 235,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 238,
              "end": 270,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 238,
                "end": 245,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 246,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 342,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 341,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 300,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 303,
              "end": 341,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 303,
                "end": 310,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 311,
                  "end": 340,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "9": {
    "filepath": "/admin/routeRoleController.js",
    "controllerName": "routeRoleController",
    "methodArr": [
      {
        "addRouteRole": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, routeRoleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new RouteRole({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(RouteRole, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "bulkInsertRouteRole": "async (req, res) => {\n  try {\n    let data;\n\n    if (req.body.data !== undefined && req.body.data.length) {\n      data = req.body.data;\n\n      for (let i = 0; i < data.length; i++) {\n        Object.assign(data[i], {\n          addedBy: req.user.id\n        });\n      }\n\n      let result = await dbService.bulkInsert(RouteRole, data);\n      return utils.successResponse(result, res);\n    } else {\n      return utils.failureResponse('Invalid Data', res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllRouteRole": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(RouteRole, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(RouteRole, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getRouteRole": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(RouteRole, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateRouteRole": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, routeRoleSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(RouteRole, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateRouteRole": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, routeRoleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(RouteRole, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteRouteRole": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(RouteRole, query, {\n      isDeleted: true\n    }, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.recordNotFound([], res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getRouteRoleByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(RouteRole, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getRouteRoleCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(RouteRole, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, routeRoleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(RouteRole, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new RouteRole({ ...params\n      });\n      let result = await dbService.createDocument(RouteRole, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "RouteRole": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 51,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 50,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 15,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 15
                },
                "identifierName": "RouteRole"
              },
              "name": "RouteRole"
            },
            "init": {
              "type": "CallExpression",
              "start": 18,
              "end": 50,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 18
                },
                "end": {
                  "line": 1,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 18,
                "end": 25,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 18
                  },
                  "end": {
                    "line": 1,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 26,
                  "end": 49,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 26
                    },
                    "end": {
                      "line": 1,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/routeRole",
                    "raw": "'../../model/routeRole'"
                  },
                  "value": "../../model/routeRole"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 52,
        "end": 98,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 58,
            "end": 97,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 58,
              "end": 63,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 66,
              "end": 97,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 66,
                "end": 73,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 74,
                  "end": 96,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "routeRoleSchemaKey": {
        "type": "VariableDeclaration",
        "start": 99,
        "end": 180,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 81
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 105,
            "end": 179,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 80
              }
            },
            "id": {
              "type": "Identifier",
              "start": 105,
              "end": 123,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 24
                },
                "identifierName": "routeRoleSchemaKey"
              },
              "name": "routeRoleSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 126,
              "end": 179,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 27
                },
                "end": {
                  "line": 3,
                  "column": 80
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 126,
                "end": 133,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 27
                  },
                  "end": {
                    "line": 3,
                    "column": 34
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 134,
                  "end": 178,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 35
                    },
                    "end": {
                      "line": 3,
                      "column": 79
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/routeRoleValidation",
                    "raw": "'../../utils/validation/routeRoleValidation'"
                  },
                  "value": "../../utils/validation/routeRoleValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 181,
        "end": 239,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 187,
            "end": 238,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 187,
              "end": 197,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 200,
              "end": 238,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 200,
                "end": 207,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 208,
                  "end": 237,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 240,
        "end": 291,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 246,
            "end": 290,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 246,
              "end": 255,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 258,
              "end": 290,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 258,
                "end": 265,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 266,
                  "end": 289,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "10": {
    "filepath": "/admin/subPropertyAttributeController.js",
    "controllerName": "subPropertyAttributeController",
    "methodArr": [
      {
        "addSubPropertyAttribute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, subPropertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new SubPropertyAttribute({ ...req.body\n    });\n    let result = await dbService.createDocument(SubPropertyAttribute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllSubPropertyAttribute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(SubPropertyAttribute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(SubPropertyAttribute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(SubPropertyAttribute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttributeCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(SubPropertyAttribute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttributeByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(SubPropertyAttribute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateSubPropertyAttribute": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, subPropertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(SubPropertyAttribute, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateSubPropertyAttribute": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, subPropertyAttributeSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(SubPropertyAttribute, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteSubPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await deleteDependentService.softDeleteSubPropertyAttribute(query);\n\n    if (!result) {\n      return utils.failureResponse('something went wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteManySubPropertyAttribute": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      const query = {\n        _id: {\n          $in: ids\n        }\n      };\n      let result = await deleteDependentService.softDeleteSubPropertyAttribute(query);\n\n      if (!result) {\n        return utils.recordNotFound([], res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, subPropertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(SubPropertyAttribute, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new SubPropertyAttribute({ ...params\n      });\n      let result = await dbService.createDocument(SubPropertyAttribute, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "SubPropertyAttribute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 73,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 73
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 72,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 72
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 26,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 26
                },
                "identifierName": "SubPropertyAttribute"
              },
              "name": "SubPropertyAttribute"
            },
            "init": {
              "type": "CallExpression",
              "start": 29,
              "end": 72,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 29
                },
                "end": {
                  "line": 1,
                  "column": 72
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 29,
                "end": 36,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 29
                  },
                  "end": {
                    "line": 1,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 37,
                  "end": 71,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 37
                    },
                    "end": {
                      "line": 1,
                      "column": 71
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/subPropertyAttribute",
                    "raw": "'../../model/subPropertyAttribute'"
                  },
                  "value": "../../model/subPropertyAttribute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 74,
        "end": 120,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 80,
            "end": 119,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 80,
              "end": 85,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 88,
              "end": 119,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 88,
                "end": 95,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 96,
                  "end": 118,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "subPropertyAttributeSchemaKey": {
        "type": "VariableDeclaration",
        "start": 121,
        "end": 224,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 103
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 127,
            "end": 223,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 102
              }
            },
            "id": {
              "type": "Identifier",
              "start": 127,
              "end": 156,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 35
                },
                "identifierName": "subPropertyAttributeSchemaKey"
              },
              "name": "subPropertyAttributeSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 159,
              "end": 223,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 38
                },
                "end": {
                  "line": 3,
                  "column": 102
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 159,
                "end": 166,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 38
                  },
                  "end": {
                    "line": 3,
                    "column": 45
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 167,
                  "end": 222,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 46
                    },
                    "end": {
                      "line": 3,
                      "column": 101
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/subPropertyAttributeValidation",
                    "raw": "'../../utils/validation/subPropertyAttributeValidation'"
                  },
                  "value": "../../utils/validation/subPropertyAttributeValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 225,
        "end": 283,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 231,
            "end": 282,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 231,
              "end": 241,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 244,
              "end": 282,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 244,
                "end": 251,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 252,
                  "end": 281,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 284,
        "end": 335,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 290,
            "end": 334,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 290,
              "end": 299,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 302,
              "end": 334,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 302,
                "end": 309,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 310,
                  "end": 333,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 336,
        "end": 406,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 342,
            "end": 405,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 342,
              "end": 364,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 367,
              "end": 405,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 367,
                "end": 374,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 375,
                  "end": 404,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "11": {
    "filepath": "/admin/testController.js",
    "controllerName": "testController",
    "methodArr": [
      {
        "addEnhancement": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Enhancement({ ...req.body\n    });\n    let result = await dbService.createDocument(Enhancement, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Enhancement": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 55,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 55
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 54,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 54
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "Enhancement"
              },
              "name": "Enhancement"
            },
            "init": {
              "type": "CallExpression",
              "start": 20,
              "end": 54,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 20
                },
                "end": {
                  "line": 1,
                  "column": 54
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 20,
                "end": 27,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 20
                  },
                  "end": {
                    "line": 1,
                    "column": 27
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 28,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 28
                    },
                    "end": {
                      "line": 1,
                      "column": 53
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/enhancement",
                    "raw": "'../../model/enhancement'"
                  },
                  "value": "../../model/enhancement"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 102,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 101,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 67,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 70,
              "end": 101,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 70,
                "end": 77,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 78,
                  "end": 100,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "enhancementSchemaKey": {
        "type": "VariableDeclaration",
        "start": 103,
        "end": 188,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 85
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 109,
            "end": 187,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 84
              }
            },
            "id": {
              "type": "Identifier",
              "start": 109,
              "end": 129,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 26
                },
                "identifierName": "enhancementSchemaKey"
              },
              "name": "enhancementSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 132,
              "end": 187,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 29
                },
                "end": {
                  "line": 3,
                  "column": 84
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 132,
                "end": 139,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 29
                  },
                  "end": {
                    "line": 3,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 140,
                  "end": 186,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 37
                    },
                    "end": {
                      "line": 3,
                      "column": 83
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/enhancementValidation",
                    "raw": "'../../utils/validation/enhancementValidation'"
                  },
                  "value": "../../utils/validation/enhancementValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 189,
        "end": 247,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 195,
            "end": 246,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 195,
              "end": 205,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 208,
              "end": 246,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 208,
                "end": 215,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 216,
                  "end": 245,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 248,
        "end": 299,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 254,
            "end": 298,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 254,
              "end": 263,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 266,
              "end": 298,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 266,
                "end": 273,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 274,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "12": {
    "filepath": "/admin/userController.js",
    "controllerName": "userController",
    "methodArr": [
      {
        "addUser": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new User({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(User, data);\n\n    result = (({\n      username,\n      email\n    }) => ({\n      username,\n      email\n    }))(result);\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllUser": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(User, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (!options.populate) options.populate = [];\n      options.populate = options.populate.concat([{\n        path: 'properties'\n      }, {\n        path: 'subProperties'\n      }]);\n\n      if (options.select && options.select.length) {\n        options.select = ['username', 'email'].filter(Set.prototype.has, new Set(options.select));\n        if (!options.select.length) options.select.push('_id');\n      } else {\n        options.select = ['username', 'email'];\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(User, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUser": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let select = ['username', 'email'];\n    let result = await dbService.getDocumentByQuery(User, query, select);\n\n    if (result) {\n      result = await result.populate([{\n        'path': 'properties'\n      }, {\n        'path': 'subProperties'\n      }]).execPopulate();\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(User, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(User, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateUser": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {};\n\n    if (req.user) {\n      query = {\n        '_id': {\n          '$eq': req.params.id,\n          '$ne': req.user.id\n        }\n      };\n    } else {\n      return util.badRequest({}, res);\n    }\n\n    let result = await dbService.findOneAndUpdateDocument(User, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    result = (({\n      username,\n      email\n    }) => ({\n      username,\n      email\n    }))(result);\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateUser": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, userSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {};\n\n    if (req.user) {\n      query = {\n        '_id': {\n          '$eq': req.params.id,\n          '$ne': req.user.id\n        }\n      };\n    } else {\n      return util.badRequest({}, res);\n    }\n\n    let result = await dbService.findOneAndUpdateDocument(User, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    let select = ['username', 'email'];\n    result = await dbService.getSingleDocumentById(User, req.params.id, select);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteUser": "async (req, res) => {\n  try {\n    let query = {};\n\n    if (req.user) {\n      query = {\n        '_id': {\n          '$eq': req.params.id,\n          '$ne': req.user.id\n        }\n      };\n    }\n\n    let result = await deleteDependentService.softDeleteUser(query);\n\n    if (!result) {\n      return utils.failureResponse('something went wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteManyUser": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      let query = {};\n\n      if (req.user) {\n        query = {\n          '_id': {\n            '$in': ids,\n            '$ne': req.user.id\n          }\n        };\n      }\n\n      let result = await deleteDependentService.softDeleteUser(query);\n\n      if (!result) {\n        return utils.recordNotFound([], res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "deleteUser": "async (req, res) => {\n  try {\n    if (req.params.id) {\n      let query = {};\n\n      if (req.user) {\n        query = {\n          '_id': {\n            '$eq': req.params.id,\n            '$ne': req.user.id\n          }\n        };\n      } else {\n        return util.badRequest({}, res);\n      }\n\n      if (req.body.isWarning) {\n        let result = await deleteDependentService.countUser(query);\n\n        if (result) {\n          return utils.successResponse(result, res);\n        }\n\n        return utils.failureResponse('something went wrong.', res);\n      } else {\n        let result = await deleteDependentService.deleteUser(query);\n\n        if (!result) {\n          return utils.failureResponse('something went wrong.', res);\n        }\n\n        return utils.successResponse(result, res);\n      }\n    } else {\n      return utils.badRequest({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "deleteManyUser": "async (req, res) => {\n  try {\n    let ids = req.body.ids;\n\n    if (ids) {\n      let query = {};\n\n      if (req.user) {\n        query = {\n          '_id': {\n            '$in': rids,\n            '$ne': req.user.id\n          }\n        };\n      } else {\n        return util.badRequest({}, res);\n      }\n\n      if (req.body.isWarning) {\n        let result = await deleteDependentService.countUser(query);\n        return utils.successResponse(result, res);\n      } else {\n        let result = await deleteDependentService.deleteUser(query);\n        return utils.successResponse(result, res);\n      }\n    }\n\n    return utils.badRequest({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(User, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new User({ ...params\n      });\n      let result = await dbService.createDocument(User, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "changePassword": "async (req, res) => {\n  try {\n    let params = req.body;\n\n    if (!params.newPassword || !req.user.id || !params.oldPassword) {\n      return utils.inValidParam('Please Provide userId and new Password and Old password', res);\n    }\n\n    let result = await auth.changePassword({ ...params,\n      userId: req.user.id\n    });\n\n    if (result.flag) {\n      return utils.invalidRequest(result.data, res);\n    }\n\n    return utils.requestValidated(result.data, res);\n  } catch (error) {\n    return utils.failureResponse(error, res);\n  }\n}"
      },
      {
        "updateProfile": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.user.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, userSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (data.password) delete data.password;\n    if (data.createdAt) delete data.createdAt;\n    if (data.updatedAt) delete data.updatedAt;\n    if (data.id) delete data.id;\n    let result = await dbService.findOneAndUpdateDocument(User, {\n      _id: req.user.id\n    }, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "User": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 41,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 40,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 10,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 10
                },
                "identifierName": "User"
              },
              "name": "User"
            },
            "init": {
              "type": "CallExpression",
              "start": 13,
              "end": 40,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 13
                },
                "end": {
                  "line": 1,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 13,
                "end": 20,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 13
                  },
                  "end": {
                    "line": 1,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 21,
                  "end": 39,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 21
                    },
                    "end": {
                      "line": 1,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/user",
                    "raw": "'../../model/user'"
                  },
                  "value": "../../model/user"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 42,
        "end": 88,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 48,
            "end": 87,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 48,
              "end": 53,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 56,
              "end": 87,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 56,
                "end": 63,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 64,
                  "end": 86,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userSchemaKey": {
        "type": "VariableDeclaration",
        "start": 89,
        "end": 160,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 95,
            "end": 159,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 95,
              "end": 108,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 19
                },
                "identifierName": "userSchemaKey"
              },
              "name": "userSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 111,
              "end": 159,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 22
                },
                "end": {
                  "line": 3,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 111,
                "end": 118,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 22
                  },
                  "end": {
                    "line": 3,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 119,
                  "end": 158,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 30
                    },
                    "end": {
                      "line": 3,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userValidation",
                    "raw": "'../../utils/validation/userValidation'"
                  },
                  "value": "../../utils/validation/userValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 161,
        "end": 219,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 167,
            "end": 218,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 167,
              "end": 177,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 180,
              "end": 218,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 180,
                "end": 187,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 188,
                  "end": 217,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 220,
        "end": 271,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 226,
            "end": 270,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 226,
              "end": 235,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 238,
              "end": 270,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 238,
                "end": 245,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 246,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "auth": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 316,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 315,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 43
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 282,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 10
                },
                "identifierName": "auth"
              },
              "name": "auth"
            },
            "init": {
              "type": "CallExpression",
              "start": 285,
              "end": 315,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 13
                },
                "end": {
                  "line": 6,
                  "column": 43
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 285,
                "end": 292,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 13
                  },
                  "end": {
                    "line": 6,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 293,
                  "end": 314,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 21
                    },
                    "end": {
                      "line": 6,
                      "column": 42
                    }
                  },
                  "extra": {
                    "rawValue": "../../services/auth",
                    "raw": "'../../services/auth'"
                  },
                  "value": "../../services/auth"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 317,
        "end": 387,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 323,
            "end": 386,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 323,
              "end": 345,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 348,
              "end": 386,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 31
                },
                "end": {
                  "line": 7,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 348,
                "end": 355,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 31
                  },
                  "end": {
                    "line": 7,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 356,
                  "end": 385,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 39
                    },
                    "end": {
                      "line": 7,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "13": {
    "filepath": "/admin/userRoleController.js",
    "controllerName": "userRoleController",
    "methodArr": [
      {
        "addUserRole": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userRoleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new UserRole({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(UserRole, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "bulkInsertUserRole": "async (req, res) => {\n  try {\n    let data;\n\n    if (req.body.data !== undefined && req.body.data.length) {\n      data = req.body.data;\n\n      for (let i = 0; i < data.length; i++) {\n        Object.assign(data[i], {\n          addedBy: req.user.id\n        });\n      }\n\n      let result = await dbService.bulkInsert(UserRole, data);\n      return utils.successResponse(result, res);\n    } else {\n      return utils.failureResponse('Invalid Data', res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllUserRole": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(UserRole, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(UserRole, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserRole": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(UserRole, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "partialUpdateUserRole": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, userRoleSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(UserRole, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "updateUserRole": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.params.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, userRoleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(UserRole, query, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "softDeleteUserRole": "async (req, res) => {\n  try {\n    let query = {\n      _id: req.params.id\n    };\n    let result = await dbService.findOneAndUpdateDocument(UserRole, query, {\n      isDeleted: true\n    }, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.recordNotFound([], res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserRoleByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(UserRole, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserRoleCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(UserRole, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, userRoleSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(UserRole, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new UserRole({ ...params\n      });\n      let result = await dbService.createDocument(UserRole, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "UserRole": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 49,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 48,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 48
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 14,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 14
                },
                "identifierName": "UserRole"
              },
              "name": "UserRole"
            },
            "init": {
              "type": "CallExpression",
              "start": 17,
              "end": 48,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 17
                },
                "end": {
                  "line": 1,
                  "column": 48
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 17,
                "end": 24,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 17
                  },
                  "end": {
                    "line": 1,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 25,
                  "end": 47,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 25
                    },
                    "end": {
                      "line": 1,
                      "column": 47
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/userRole",
                    "raw": "'../../model/userRole'"
                  },
                  "value": "../../model/userRole"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 50,
        "end": 96,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 56,
            "end": 95,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 56,
              "end": 61,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 64,
              "end": 95,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 64,
                "end": 71,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 72,
                  "end": 94,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userRoleSchemaKey": {
        "type": "VariableDeclaration",
        "start": 97,
        "end": 176,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 79
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 103,
            "end": 175,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 78
              }
            },
            "id": {
              "type": "Identifier",
              "start": 103,
              "end": 120,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 23
                },
                "identifierName": "userRoleSchemaKey"
              },
              "name": "userRoleSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 123,
              "end": 175,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 26
                },
                "end": {
                  "line": 3,
                  "column": 78
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 123,
                "end": 130,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 26
                  },
                  "end": {
                    "line": 3,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 131,
                  "end": 174,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 34
                    },
                    "end": {
                      "line": 3,
                      "column": 77
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userRoleValidation",
                    "raw": "'../../utils/validation/userRoleValidation'"
                  },
                  "value": "../../utils/validation/userRoleValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 177,
        "end": 235,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 183,
            "end": 234,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 183,
              "end": 193,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 196,
              "end": 234,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 196,
                "end": 203,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 204,
                  "end": 233,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 236,
        "end": 287,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 242,
            "end": 286,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 242,
              "end": 251,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 254,
              "end": 286,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 254,
                "end": 261,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 262,
                  "end": 285,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "14": {
    "filepath": "/client/authController.js",
    "controllerName": "authController",
    "methodArr": [
      {
        "register": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const data = new User({ ...req.body\n    });\n    let unique = await uniqueValidation(User, req.body);\n\n    if (!unique) {\n      return utils.inValidParam('User Registration Failed, Duplicate Data found', res);\n    }\n\n    const result = await dbService.createDocument(User, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "forgotPassword": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params.email) {\n      return utils.insufficientParameters(res);\n    }\n\n    let where = {\n      email: params.email\n    };\n    where.role = {\n      $nin: [authConstant.USER_ROLE.Guest]\n    };\n    params.email = params.email.toString().toLowerCase();\n    let isUser = await dbService.getDocumentByQuery(User, where);\n\n    if (isUser) {\n      let {\n        resultOfEmail,\n        resultOfSMS\n      } = await authService.sendResetPasswordNotification(isUser);\n\n      if (resultOfEmail && resultOfSMS) {\n        return utils.successResponse('otp successfully send.', res);\n      } else if (resultOfEmail && !resultOfSMS) {\n        return utils.successResponse('otp successfully send to your email.', res);\n      } else if (!resultOfEmail && resultOfSMS) {\n        return utils.successResponse('otp successfully send to your mobile number.', res);\n      } else {\n        return utils.failureResponse('otp can not be sent due to some issue try again later', res);\n      }\n    } else {\n      return utils.recordNotFound('user not found', res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error, res);\n  }\n}"
      },
      {
        "validateResetPasswordOtp": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params || !params.otp) {\n      return utils.insufficientParameters(res);\n    }\n\n    let isUser = await dbService.getDocumentByQuery(User, {\n      'resetPasswordLink.code': params.otp\n    });\n\n    if (!isUser || !isUser.resetPasswordLink.expireTime) {\n      return utils.invalidRequest('Invalid OTP', res);\n    } // link expire\n\n\n    if (moment(new Date()).isAfter(moment(isUser.resetPasswordLink.expireTime))) {\n      return utils.invalidRequest('Your reset password link is expired or invalid', res);\n    } // await dbService.updateDocument(User, isUser.id, { resetPasswordLink: {} })\n\n\n    return utils.requestValidated('Otp verified', res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "resetPassword": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params.code || !params.newPassword) {\n      return utils.insufficientParameters(res);\n    }\n\n    let isUser = await dbService.getDocumentByQuery(User, {\n      'resetPasswordLink.code': params.code\n    });\n\n    if (isUser && isUser.resetPasswordLink.expireTime) {\n      if (moment(new Date()).isAfter(moment(isUser.resetPasswordLink.expireTime))) {\n        // link expire\n        return utils.invalidRequest('Your reset password link is expired on invalid', res);\n      }\n    } else {\n      // invalid token\n      return utils.invalidRequest('Invalid Code', res);\n    }\n\n    let response = await authService.resetPassword(isUser, params.newPassword);\n\n    if (response && !response.flag) {\n      return utils.requestValidated(response.data, res);\n    }\n\n    return utils.invalidRequest(response.data, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "login": "async (req, res) => {\n  try {\n    let {\n      username,\n      password\n    } = req.body;\n    let url = req.originalUrl;\n\n    if (username && password) {\n      let result = await authService.loginUser(username, password, url);\n\n      if (!result.flag) {\n        return utils.loginSuccess(result.data, res);\n      }\n\n      return utils.loginFailed(result.data, res);\n    } else {\n      return utils.insufficientParameters(res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "createOrLoginGuestUser": "async (req, res) => {\n  try {\n    let params = req.body;\n\n    if (!params || !params.username) {\n      return utils.insufficientParameters(res);\n    }\n\n    let where = {\n      'username': params.username\n    };\n    where.role = {\n      $in: [authConstant.USER_ROLE.Guest]\n    };\n    let isUser = await dbService.getDocumentByQuery(User, where);\n\n    if (!isUser) {\n      // create user\n      let isValid = validation.validateParamsWithJoi(params, userSchemaKey.schemaKeys);\n\n      if (isValid.error) {\n        return utils.inValidParam(isValid.error, res);\n      }\n\n      const data = new User({ ...params,\n        role: authConstant.USER_ROLE.Guest\n      });\n      const result = await dbService.createDocument(User, data);\n\n      if (result) {\n        // login user \n        let url = req.originalUrl;\n        let isLogin = await authService.loginGuestUser(where, url);\n\n        if (!isLogin.flag) {\n          return utils.loginSuccess(isLogin.data, res);\n        }\n\n        return utils.loginFailed(isLogin.data, res);\n      } else {\n        // user not created and not login\n        return utils.loginFailed('guest user is not created due to errors', res);\n      }\n    } // guest user exist and login\n\n\n    let url = req.originalUrl;\n    let isLogin = await authService.loginGuestUser(where, url);\n\n    if (!isLogin.flag) {\n      return utils.loginSuccess(isLogin.data, res);\n    }\n\n    return utils.loginFailed(isLogin.data, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "authService": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 52,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 51,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 51
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "authService"
              },
              "name": "authService"
            },
            "init": {
              "type": "CallExpression",
              "start": 21,
              "end": 51,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 21
                },
                "end": {
                  "line": 1,
                  "column": 51
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 21,
                "end": 28,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 21
                  },
                  "end": {
                    "line": 1,
                    "column": 28
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 29,
                  "end": 50,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 29
                    },
                    "end": {
                      "line": 1,
                      "column": 50
                    }
                  },
                  "extra": {
                    "rawValue": "../../services/auth",
                    "raw": "'../../services/auth'"
                  },
                  "value": "../../services/auth"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 53,
        "end": 99,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 59,
            "end": 98,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 59,
              "end": 64,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 67,
              "end": 98,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 67,
                "end": 74,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 75,
                  "end": 97,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "User": {
        "type": "VariableDeclaration",
        "start": 100,
        "end": 141,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 106,
            "end": 140,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 106,
              "end": 110,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 10
                },
                "identifierName": "User"
              },
              "name": "User"
            },
            "init": {
              "type": "CallExpression",
              "start": 113,
              "end": 140,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 13
                },
                "end": {
                  "line": 3,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 113,
                "end": 120,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 13
                  },
                  "end": {
                    "line": 3,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 121,
                  "end": 139,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 21
                    },
                    "end": {
                      "line": 3,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/user",
                    "raw": "'../../model/user'"
                  },
                  "value": "../../model/user"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 142,
        "end": 193,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 148,
            "end": 192,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 148,
              "end": 157,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 160,
              "end": 192,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 18
                },
                "end": {
                  "line": 4,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 160,
                "end": 167,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 18
                  },
                  "end": {
                    "line": 4,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 168,
                  "end": 191,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 26
                    },
                    "end": {
                      "line": 4,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "moment": {
        "type": "VariableDeclaration",
        "start": 194,
        "end": 227,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 33
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 200,
            "end": 226,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 32
              }
            },
            "id": {
              "type": "Identifier",
              "start": 200,
              "end": 206,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 12
                },
                "identifierName": "moment"
              },
              "name": "moment"
            },
            "init": {
              "type": "CallExpression",
              "start": 209,
              "end": 226,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 15
                },
                "end": {
                  "line": 5,
                  "column": 32
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 209,
                "end": 216,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 15
                  },
                  "end": {
                    "line": 5,
                    "column": 22
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 217,
                  "end": 225,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 23
                    },
                    "end": {
                      "line": 5,
                      "column": 31
                    }
                  },
                  "extra": {
                    "rawValue": "moment",
                    "raw": "'moment'"
                  },
                  "value": "moment"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userSchemaKey": {
        "type": "VariableDeclaration",
        "start": 228,
        "end": 299,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 234,
            "end": 298,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 234,
              "end": 247,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 19
                },
                "identifierName": "userSchemaKey"
              },
              "name": "userSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 250,
              "end": 298,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 22
                },
                "end": {
                  "line": 6,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 250,
                "end": 257,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 22
                  },
                  "end": {
                    "line": 6,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 258,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 30
                    },
                    "end": {
                      "line": 6,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userValidation",
                    "raw": "'../../utils/validation/userValidation'"
                  },
                  "value": "../../utils/validation/userValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 300,
        "end": 358,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 306,
            "end": 357,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 306,
              "end": 316,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 319,
              "end": 357,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 19
                },
                "end": {
                  "line": 7,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 319,
                "end": 326,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 19
                  },
                  "end": {
                    "line": 7,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 327,
                  "end": 356,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 27
                    },
                    "end": {
                      "line": 7,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "authConstant": {
        "type": "VariableDeclaration",
        "start": 359,
        "end": 420,
        "loc": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 61
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 365,
            "end": 419,
            "loc": {
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 60
              }
            },
            "id": {
              "type": "Identifier",
              "start": 365,
              "end": 377,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 8,
                  "column": 18
                },
                "identifierName": "authConstant"
              },
              "name": "authConstant"
            },
            "init": {
              "type": "CallExpression",
              "start": 380,
              "end": 419,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 21
                },
                "end": {
                  "line": 8,
                  "column": 60
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 380,
                "end": 387,
                "loc": {
                  "start": {
                    "line": 8,
                    "column": 21
                  },
                  "end": {
                    "line": 8,
                    "column": 28
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 388,
                  "end": 418,
                  "loc": {
                    "start": {
                      "line": 8,
                      "column": 29
                    },
                    "end": {
                      "line": 8,
                      "column": 59
                    }
                  },
                  "extra": {
                    "rawValue": "../../constants/authConstant",
                    "raw": "'../../constants/authConstant'"
                  },
                  "value": "../../constants/authConstant"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "uniqueValidation": {
        "type": "VariableDeclaration",
        "start": 421,
        "end": 480,
        "loc": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 59
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 427,
            "end": 479,
            "loc": {
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 58
              }
            },
            "id": {
              "type": "ObjectPattern",
              "start": 427,
              "end": 447,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 6
                },
                "end": {
                  "line": 9,
                  "column": 26
                }
              },
              "properties": [
                {
                  "type": "ObjectProperty",
                  "start": 429,
                  "end": 445,
                  "loc": {
                    "start": {
                      "line": 9,
                      "column": 8
                    },
                    "end": {
                      "line": 9,
                      "column": 24
                    }
                  },
                  "extra": {
                    "shorthand": true
                  },
                  "method": false,
                  "key": {
                    "type": "Identifier",
                    "start": 429,
                    "end": 445,
                    "loc": {
                      "start": {
                        "line": 9,
                        "column": 8
                      },
                      "end": {
                        "line": 9,
                        "column": 24
                      },
                      "identifierName": "uniqueValidation"
                    },
                    "name": "uniqueValidation"
                  },
                  "computed": false,
                  "shorthand": true,
                  "value": {
                    "type": "Identifier",
                    "start": 429,
                    "end": 445,
                    "loc": {
                      "start": {
                        "line": 9,
                        "column": 8
                      },
                      "end": {
                        "line": 9,
                        "column": 24
                      },
                      "identifierName": "uniqueValidation"
                    },
                    "name": "uniqueValidation"
                  }
                }
              ]
            },
            "init": {
              "type": "CallExpression",
              "start": 450,
              "end": 479,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 29
                },
                "end": {
                  "line": 9,
                  "column": 58
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 450,
                "end": 457,
                "loc": {
                  "start": {
                    "line": 9,
                    "column": 29
                  },
                  "end": {
                    "line": 9,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 458,
                  "end": 478,
                  "loc": {
                    "start": {
                      "line": 9,
                      "column": 37
                    },
                    "end": {
                      "line": 9,
                      "column": 57
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/common",
                    "raw": "'../../utils/common'"
                  },
                  "value": "../../utils/common"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "15": {
    "filepath": "/client/depreciationModelController.js",
    "controllerName": "depreciationModelController",
    "methodArr": [
      {
        "addDepreciationModel": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, depreciationModelSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new DepreciationModel({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(DepreciationModel, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllDepreciationModel": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(DepreciationModel, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(DepreciationModel, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModel": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(DepreciationModel, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModelCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(DepreciationModel, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModelByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(DepreciationModel, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "DepreciationModel": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 67,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 67
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 66,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 66
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 23,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 23
                },
                "identifierName": "DepreciationModel"
              },
              "name": "DepreciationModel"
            },
            "init": {
              "type": "CallExpression",
              "start": 26,
              "end": 66,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 66
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 26,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 34,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 34
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/depreciationModel",
                    "raw": "'../../model/depreciationModel'"
                  },
                  "value": "../../model/depreciationModel"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 68,
        "end": 114,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 74,
            "end": 113,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 74,
              "end": 79,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 82,
              "end": 113,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 82,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 90,
                  "end": 112,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "depreciationModelSchemaKey": {
        "type": "VariableDeclaration",
        "start": 115,
        "end": 212,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 97
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 121,
            "end": 211,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 96
              }
            },
            "id": {
              "type": "Identifier",
              "start": 121,
              "end": 147,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 32
                },
                "identifierName": "depreciationModelSchemaKey"
              },
              "name": "depreciationModelSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 150,
              "end": 211,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 35
                },
                "end": {
                  "line": 3,
                  "column": 96
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 150,
                "end": 157,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 35
                  },
                  "end": {
                    "line": 3,
                    "column": 42
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 158,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 43
                    },
                    "end": {
                      "line": 3,
                      "column": 95
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/depreciationModelValidation",
                    "raw": "'../../utils/validation/depreciationModelValidation'"
                  },
                  "value": "../../utils/validation/depreciationModelValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 213,
        "end": 271,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 219,
            "end": 270,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 219,
              "end": 229,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 232,
              "end": 270,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 232,
                "end": 239,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 240,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 323,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 322,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 287,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 290,
              "end": 322,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 290,
                "end": 297,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 298,
                  "end": 321,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "16": {
    "filepath": "/client/enhancementController.js",
    "controllerName": "enhancementController",
    "methodArr": [
      {
        "addEnhancement": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Enhancement({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(Enhancement, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllEnhancement": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Enhancement, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Enhancement, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancement": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Enhancement, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancementCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Enhancement, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancementByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Enhancement, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Enhancement": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 55,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 55
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 54,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 54
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "Enhancement"
              },
              "name": "Enhancement"
            },
            "init": {
              "type": "CallExpression",
              "start": 20,
              "end": 54,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 20
                },
                "end": {
                  "line": 1,
                  "column": 54
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 20,
                "end": 27,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 20
                  },
                  "end": {
                    "line": 1,
                    "column": 27
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 28,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 28
                    },
                    "end": {
                      "line": 1,
                      "column": 53
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/enhancement",
                    "raw": "'../../model/enhancement'"
                  },
                  "value": "../../model/enhancement"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 102,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 101,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 67,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 70,
              "end": 101,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 70,
                "end": 77,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 78,
                  "end": 100,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "enhancementSchemaKey": {
        "type": "VariableDeclaration",
        "start": 103,
        "end": 188,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 85
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 109,
            "end": 187,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 84
              }
            },
            "id": {
              "type": "Identifier",
              "start": 109,
              "end": 129,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 26
                },
                "identifierName": "enhancementSchemaKey"
              },
              "name": "enhancementSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 132,
              "end": 187,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 29
                },
                "end": {
                  "line": 3,
                  "column": 84
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 132,
                "end": 139,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 29
                  },
                  "end": {
                    "line": 3,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 140,
                  "end": 186,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 37
                    },
                    "end": {
                      "line": 3,
                      "column": 83
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/enhancementValidation",
                    "raw": "'../../utils/validation/enhancementValidation'"
                  },
                  "value": "../../utils/validation/enhancementValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 189,
        "end": 247,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 195,
            "end": 246,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 195,
              "end": 205,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 208,
              "end": 246,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 208,
                "end": 215,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 216,
                  "end": 245,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 248,
        "end": 299,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 254,
            "end": 298,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 254,
              "end": 263,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 266,
              "end": 298,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 266,
                "end": 273,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 274,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "17": {
    "filepath": "/client/fileUploadController.js",
    "controllerName": "fileUploadController",
    "methodArr": [
      {
        "upload": "async (req, res) => {\n  try {\n    // Create Directory if not exist.\n    await makeDirectory(defaultDirectory); // Setting up formidable options.\n\n    const form = new formidable.IncomingForm();\n    form.multiples = true;\n    form.maxFileSize = 300 * 1024 * 1024; //300 MB\n\n    form.maxFieldsSize = 100 * 1024 * 1024; //50 MB\n    //Upload File one by one\n\n    const uploadFileRes = await new Promise(async (resolve, reject) => {\n      form.parse(req, async function (err, fields, files) {\n        let filePaths = [];\n        let fileCount = 1;\n        let fileArr = [];\n\n        if (files['file[]'].size == 0) {\n          resolve({\n            'err': 'Please Select any one File',\n            'status': false\n          });\n        }\n\n        if (!Array.isArray(files['file[]'])) {\n          fileArr.push(files['file[]']);\n          files['file[]'] = fileArr;\n        }\n\n        for (let file of files['file[]']) {\n          let response = await uploadFile(file, fields, fileCount++);\n\n          if (response.status == false) {\n            filePaths.push({\n              'name': file.name,\n              'err': response.message,\n              'status': false\n            });\n          } else {\n            let url = response.data;\n\n            if (!validUrl.isUri(response.data)) {\n              response.data = response.data.replace('/public', '');\n              url = req.protocol + '://' + req.headers.host + response.data;\n            }\n\n            filePaths.push({\n              'path': url,\n              'status': true\n            });\n          }\n        }\n\n        resolve(filePaths);\n      });\n    });\n    return utils.successResponse(uploadFileRes, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "makeDirectory": "async directoryPath => {\n  if (!fs.existsSync(directoryPath)) {\n    fs.promises.mkdir(directoryPath, {\n      recursive: true\n    }, err => {\n      if (err) {\n        return false;\n      }\n\n      ;\n      return true;\n    });\n  }\n\n  return true;\n}"
      }
    ],
    "allVariablesInFile": {
      "fs": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 25,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 24,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 24
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 8,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 8
                },
                "identifierName": "fs"
              },
              "name": "fs"
            },
            "init": {
              "type": "CallExpression",
              "start": 11,
              "end": 24,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 11
                },
                "end": {
                  "line": 1,
                  "column": 24
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 11,
                "end": 18,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 11
                  },
                  "end": {
                    "line": 1,
                    "column": 18
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 19,
                  "end": 23,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 19
                    },
                    "end": {
                      "line": 1,
                      "column": 23
                    }
                  },
                  "extra": {
                    "rawValue": "fs",
                    "raw": "'fs'"
                  },
                  "value": "fs"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "path": {
        "type": "VariableDeclaration",
        "start": 26,
        "end": 55,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 32,
            "end": 54,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 28
              }
            },
            "id": {
              "type": "Identifier",
              "start": 32,
              "end": 36,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 10
                },
                "identifierName": "path"
              },
              "name": "path"
            },
            "init": {
              "type": "CallExpression",
              "start": 39,
              "end": 54,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 13
                },
                "end": {
                  "line": 2,
                  "column": 28
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 39,
                "end": 46,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 13
                  },
                  "end": {
                    "line": 2,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 47,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 21
                    },
                    "end": {
                      "line": 2,
                      "column": 27
                    }
                  },
                  "extra": {
                    "rawValue": "path",
                    "raw": "'path'"
                  },
                  "value": "path"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "formidable": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 97,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 96,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 72,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 16
                },
                "identifierName": "formidable"
              },
              "name": "formidable"
            },
            "init": {
              "type": "CallExpression",
              "start": 75,
              "end": 96,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 19
                },
                "end": {
                  "line": 3,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 75,
                "end": 82,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 19
                  },
                  "end": {
                    "line": 3,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 83,
                  "end": 95,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 27
                    },
                    "end": {
                      "line": 3,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "formidable",
                    "raw": "'formidable'"
                  },
                  "value": "formidable"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validUrl": {
        "type": "VariableDeclaration",
        "start": 98,
        "end": 136,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 38
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 104,
            "end": 135,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 37
              }
            },
            "id": {
              "type": "Identifier",
              "start": 104,
              "end": 112,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 14
                },
                "identifierName": "validUrl"
              },
              "name": "validUrl"
            },
            "init": {
              "type": "CallExpression",
              "start": 115,
              "end": 135,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 17
                },
                "end": {
                  "line": 4,
                  "column": 37
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 115,
                "end": 122,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 17
                  },
                  "end": {
                    "line": 4,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 123,
                  "end": 134,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 25
                    },
                    "end": {
                      "line": 4,
                      "column": 36
                    }
                  },
                  "extra": {
                    "rawValue": "valid-url",
                    "raw": "'valid-url'"
                  },
                  "value": "valid-url"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "AWS": {
        "type": "VariableDeclaration",
        "start": 137,
        "end": 168,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 31
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 143,
            "end": 167,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 30
              }
            },
            "id": {
              "type": "Identifier",
              "start": 143,
              "end": 146,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 9
                },
                "identifierName": "AWS"
              },
              "name": "AWS"
            },
            "init": {
              "type": "CallExpression",
              "start": 149,
              "end": 167,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 12
                },
                "end": {
                  "line": 5,
                  "column": 30
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 149,
                "end": 156,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 12
                  },
                  "end": {
                    "line": 5,
                    "column": 19
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 157,
                  "end": 166,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 20
                    },
                    "end": {
                      "line": 5,
                      "column": 29
                    }
                  },
                  "extra": {
                    "rawValue": "aws-sdk",
                    "raw": "'aws-sdk'"
                  },
                  "value": "aws-sdk"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 170,
        "end": 216,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 176,
            "end": 215,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 176,
              "end": 181,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 184,
              "end": 215,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 14
                },
                "end": {
                  "line": 7,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 184,
                "end": 191,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 14
                  },
                  "end": {
                    "line": 7,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 192,
                  "end": 214,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 22
                    },
                    "end": {
                      "line": 7,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "defaultDirectory": {
        "type": "VariableDeclaration",
        "start": 218,
        "end": 257,
        "loc": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 39
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 222,
            "end": 256,
            "loc": {
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 38
              }
            },
            "id": {
              "type": "Identifier",
              "start": 222,
              "end": 238,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 20
                },
                "identifierName": "defaultDirectory"
              },
              "name": "defaultDirectory"
            },
            "init": {
              "type": "StringLiteral",
              "start": 241,
              "end": 256,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 23
                },
                "end": {
                  "line": 9,
                  "column": 38
                }
              },
              "extra": {
                "rawValue": "public/assets",
                "raw": "'public/assets'"
              },
              "value": "public/assets"
            }
          }
        ],
        "kind": "let"
      },
      "allowedFileTypes": {
        "type": "VariableDeclaration",
        "start": 258,
        "end": 284,
        "loc": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 26
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 262,
            "end": 283,
            "loc": {
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 25
              }
            },
            "id": {
              "type": "Identifier",
              "start": 262,
              "end": 278,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 20
                },
                "identifierName": "allowedFileTypes"
              },
              "name": "allowedFileTypes"
            },
            "init": {
              "type": "ArrayExpression",
              "start": 281,
              "end": 283,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 23
                },
                "end": {
                  "line": 10,
                  "column": 25
                }
              },
              "elements": []
            }
          }
        ],
        "kind": "let"
      },
      "maxFileSize": {
        "type": "VariableDeclaration",
        "start": 285,
        "end": 305,
        "loc": {
          "start": {
            "line": 11,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 20
          }
        },
        "trailingComments": [
          {
            "type": "CommentLine",
            "value": "In Megabyte",
            "start": 306,
            "end": 319,
            "loc": {
              "start": {
                "line": 11,
                "column": 21
              },
              "end": {
                "line": 11,
                "column": 34
              }
            }
          }
        ],
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 289,
            "end": 304,
            "loc": {
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 19
              }
            },
            "id": {
              "type": "Identifier",
              "start": 289,
              "end": 300,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 15
                },
                "identifierName": "maxFileSize"
              },
              "name": "maxFileSize"
            },
            "init": {
              "type": "NumericLiteral",
              "start": 303,
              "end": 304,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 18
                },
                "end": {
                  "line": 11,
                  "column": 19
                }
              },
              "extra": {
                "rawValue": 5,
                "raw": "5"
              },
              "value": 5
            }
          }
        ],
        "kind": "let"
      }
    }
  },
  "18": {
    "filepath": "/client/masterController.js",
    "controllerName": "masterController",
    "methodArr": [
      {
        "addMaster": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, masterSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Master({ ...req.body\n    });\n    let result = await dbService.createDocument(Master, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllMaster": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Master, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Master, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMaster": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Master, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMasterCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Master, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMasterByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Master, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Master": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 45,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 45
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 44,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 44
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 12,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 12
                },
                "identifierName": "Master"
              },
              "name": "Master"
            },
            "init": {
              "type": "CallExpression",
              "start": 15,
              "end": 44,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 15
                },
                "end": {
                  "line": 1,
                  "column": 44
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 15,
                "end": 22,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 15
                  },
                  "end": {
                    "line": 1,
                    "column": 22
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 23,
                  "end": 43,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 43
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/master",
                    "raw": "'../../model/master'"
                  },
                  "value": "../../model/master"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 46,
        "end": 92,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 52,
            "end": 91,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 52,
              "end": 57,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 60,
              "end": 91,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 60,
                "end": 67,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 68,
                  "end": 90,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "masterSchemaKey": {
        "type": "VariableDeclaration",
        "start": 93,
        "end": 168,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 75
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 99,
            "end": 167,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 74
              }
            },
            "id": {
              "type": "Identifier",
              "start": 99,
              "end": 114,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 21
                },
                "identifierName": "masterSchemaKey"
              },
              "name": "masterSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 117,
              "end": 167,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 24
                },
                "end": {
                  "line": 3,
                  "column": 74
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 117,
                "end": 124,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 24
                  },
                  "end": {
                    "line": 3,
                    "column": 31
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 125,
                  "end": 166,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 32
                    },
                    "end": {
                      "line": 3,
                      "column": 73
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/masterValidation",
                    "raw": "'../../utils/validation/masterValidation'"
                  },
                  "value": "../../utils/validation/masterValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 169,
        "end": 227,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 175,
            "end": 226,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 175,
              "end": 185,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 188,
              "end": 226,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 188,
                "end": 195,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 196,
                  "end": 225,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 228,
        "end": 279,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 234,
            "end": 278,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 234,
              "end": 243,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 246,
              "end": 278,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 246,
                "end": 253,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 254,
                  "end": 277,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 280,
        "end": 350,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 286,
            "end": 349,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 286,
              "end": 308,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 311,
              "end": 349,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 311,
                "end": 318,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 319,
                  "end": 348,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "19": {
    "filepath": "/client/propertyAttributeController.js",
    "controllerName": "propertyAttributeController",
    "methodArr": [
      {
        "addPropertyAttribute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, propertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new PropertyAttribute({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(PropertyAttribute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllPropertyAttribute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(PropertyAttribute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(PropertyAttribute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(PropertyAttribute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttributeCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(PropertyAttribute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttributeByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(PropertyAttribute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "PropertyAttribute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 67,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 67
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 66,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 66
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 23,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 23
                },
                "identifierName": "PropertyAttribute"
              },
              "name": "PropertyAttribute"
            },
            "init": {
              "type": "CallExpression",
              "start": 26,
              "end": 66,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 66
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 26,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 34,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 34
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/propertyAttribute",
                    "raw": "'../../model/propertyAttribute'"
                  },
                  "value": "../../model/propertyAttribute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 68,
        "end": 114,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 74,
            "end": 113,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 74,
              "end": 79,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 82,
              "end": 113,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 82,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 90,
                  "end": 112,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "propertyAttributeSchemaKey": {
        "type": "VariableDeclaration",
        "start": 115,
        "end": 212,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 97
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 121,
            "end": 211,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 96
              }
            },
            "id": {
              "type": "Identifier",
              "start": 121,
              "end": 147,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 32
                },
                "identifierName": "propertyAttributeSchemaKey"
              },
              "name": "propertyAttributeSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 150,
              "end": 211,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 35
                },
                "end": {
                  "line": 3,
                  "column": 96
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 150,
                "end": 157,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 35
                  },
                  "end": {
                    "line": 3,
                    "column": 42
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 158,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 43
                    },
                    "end": {
                      "line": 3,
                      "column": 95
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/propertyAttributeValidation",
                    "raw": "'../../utils/validation/propertyAttributeValidation'"
                  },
                  "value": "../../utils/validation/propertyAttributeValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 213,
        "end": 271,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 219,
            "end": 270,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 219,
              "end": 229,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 232,
              "end": 270,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 232,
                "end": 239,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 240,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 323,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 322,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 287,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 290,
              "end": 322,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 290,
                "end": 297,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 298,
                  "end": 321,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 324,
        "end": 394,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 330,
            "end": 393,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 330,
              "end": 352,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 355,
              "end": 393,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 355,
                "end": 362,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 363,
                  "end": 392,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "20": {
    "filepath": "/client/propertyController.js",
    "controllerName": "propertyController",
    "methodArr": [
      {
        "addProperty": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, propertySchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Property({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(Property, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllProperty": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Property, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Property, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getProperty": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Property, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Property, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Property, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Property": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 49,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 48,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 48
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 14,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 14
                },
                "identifierName": "Property"
              },
              "name": "Property"
            },
            "init": {
              "type": "CallExpression",
              "start": 17,
              "end": 48,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 17
                },
                "end": {
                  "line": 1,
                  "column": 48
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 17,
                "end": 24,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 17
                  },
                  "end": {
                    "line": 1,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 25,
                  "end": 47,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 25
                    },
                    "end": {
                      "line": 1,
                      "column": 47
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/property",
                    "raw": "'../../model/property'"
                  },
                  "value": "../../model/property"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 50,
        "end": 96,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 56,
            "end": 95,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 56,
              "end": 61,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 64,
              "end": 95,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 64,
                "end": 71,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 72,
                  "end": 94,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "propertySchemaKey": {
        "type": "VariableDeclaration",
        "start": 97,
        "end": 176,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 79
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 103,
            "end": 175,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 78
              }
            },
            "id": {
              "type": "Identifier",
              "start": 103,
              "end": 120,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 23
                },
                "identifierName": "propertySchemaKey"
              },
              "name": "propertySchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 123,
              "end": 175,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 26
                },
                "end": {
                  "line": 3,
                  "column": 78
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 123,
                "end": 130,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 26
                  },
                  "end": {
                    "line": 3,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 131,
                  "end": 174,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 34
                    },
                    "end": {
                      "line": 3,
                      "column": 77
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/propertyValidation",
                    "raw": "'../../utils/validation/propertyValidation'"
                  },
                  "value": "../../utils/validation/propertyValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 177,
        "end": 235,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 183,
            "end": 234,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 183,
              "end": 193,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 196,
              "end": 234,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 196,
                "end": 203,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 204,
                  "end": 233,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 236,
        "end": 287,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 242,
            "end": 286,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 242,
              "end": 251,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 254,
              "end": 286,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 254,
                "end": 261,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 262,
                  "end": 285,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 288,
        "end": 358,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 294,
            "end": 357,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 294,
              "end": 316,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 319,
              "end": 357,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 319,
                "end": 326,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 327,
                  "end": 356,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "21": {
    "filepath": "/client/subPropertyAttributeController.js",
    "controllerName": "subPropertyAttributeController",
    "methodArr": [
      {
        "addSubPropertyAttribute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, subPropertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new SubPropertyAttribute({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(SubPropertyAttribute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllSubPropertyAttribute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(SubPropertyAttribute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(SubPropertyAttribute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(SubPropertyAttribute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttributeCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(SubPropertyAttribute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttributeByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(SubPropertyAttribute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "SubPropertyAttribute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 73,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 73
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 72,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 72
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 26,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 26
                },
                "identifierName": "SubPropertyAttribute"
              },
              "name": "SubPropertyAttribute"
            },
            "init": {
              "type": "CallExpression",
              "start": 29,
              "end": 72,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 29
                },
                "end": {
                  "line": 1,
                  "column": 72
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 29,
                "end": 36,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 29
                  },
                  "end": {
                    "line": 1,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 37,
                  "end": 71,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 37
                    },
                    "end": {
                      "line": 1,
                      "column": 71
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/subPropertyAttribute",
                    "raw": "'../../model/subPropertyAttribute'"
                  },
                  "value": "../../model/subPropertyAttribute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 74,
        "end": 120,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 80,
            "end": 119,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 80,
              "end": 85,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 88,
              "end": 119,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 88,
                "end": 95,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 96,
                  "end": 118,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "subPropertyAttributeSchemaKey": {
        "type": "VariableDeclaration",
        "start": 121,
        "end": 224,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 103
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 127,
            "end": 223,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 102
              }
            },
            "id": {
              "type": "Identifier",
              "start": 127,
              "end": 156,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 35
                },
                "identifierName": "subPropertyAttributeSchemaKey"
              },
              "name": "subPropertyAttributeSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 159,
              "end": 223,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 38
                },
                "end": {
                  "line": 3,
                  "column": 102
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 159,
                "end": 166,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 38
                  },
                  "end": {
                    "line": 3,
                    "column": 45
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 167,
                  "end": 222,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 46
                    },
                    "end": {
                      "line": 3,
                      "column": 101
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/subPropertyAttributeValidation",
                    "raw": "'../../utils/validation/subPropertyAttributeValidation'"
                  },
                  "value": "../../utils/validation/subPropertyAttributeValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 225,
        "end": 283,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 231,
            "end": 282,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 231,
              "end": 241,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 244,
              "end": 282,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 244,
                "end": 251,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 252,
                  "end": 281,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 284,
        "end": 335,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 290,
            "end": 334,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 290,
              "end": 299,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 302,
              "end": 334,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 302,
                "end": 309,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 310,
                  "end": 333,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 336,
        "end": 406,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 342,
            "end": 405,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 342,
              "end": 364,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 367,
              "end": 405,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 367,
                "end": 374,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 375,
                  "end": 404,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "22": {
    "filepath": "/client/userController.js",
    "controllerName": "userController",
    "methodArr": [
      {
        "addUser": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new User({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(User, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllUser": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      if (req.user) {\n        query = { ...query,\n          ...{\n            '_id': {\n              $ne: req.user.id\n            }\n          }\n        };\n\n        if (req.body.query._id) {\n          Object.assign(query._id, {\n            $in: [req.body.query._id]\n          });\n        }\n      } else {\n        return util.badRequest({}, res);\n      }\n\n      result = await dbService.countDocument(User, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (!options.populate) options.populate = [];\n      options.populate = options.populate.concat([{\n        path: 'properties'\n      }, {\n        path: 'subProperties'\n      }]);\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      if (req.user) {\n        query = { ...query,\n          ...{\n            '_id': {\n              $ne: req.user.id\n            }\n          }\n        };\n\n        if (req.body.query._id) {\n          Object.assign(query._id, {\n            $in: [req.body.query._id]\n          });\n        }\n      }\n\n      result = await dbService.getAllDocuments(User, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUser": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(User, query);\n\n    if (result) {\n      result = await result.populate([{\n        'path': 'properties'\n      }, {\n        'path': 'subProperties'\n      }]).execPopulate();\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(User, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(User, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "changePassword": "async (req, res) => {\n  try {\n    let params = req.body;\n\n    if (!params.newPassword || !req.user.id || !params.oldPassword) {\n      return utils.inValidParam('Please Provide userId and new Password and Old password', res);\n    }\n\n    let result = await auth.changePassword({ ...params,\n      userId: req.user.id\n    });\n\n    if (result.flag) {\n      return utils.invalidRequest(result.data, res);\n    }\n\n    return utils.requestValidated(result.data, res);\n  } catch (error) {\n    return utils.failureResponse(error, res);\n  }\n}"
      },
      {
        "updateProfile": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.user.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, userSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (data.password) delete data.password;\n    if (data.createdAt) delete data.createdAt;\n    if (data.updatedAt) delete data.updatedAt;\n    if (data.id) delete data.id;\n    let result = await dbService.findOneAndUpdateDocument(User, {\n      _id: req.user.id\n    }, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "User": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 41,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 40,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 10,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 10
                },
                "identifierName": "User"
              },
              "name": "User"
            },
            "init": {
              "type": "CallExpression",
              "start": 13,
              "end": 40,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 13
                },
                "end": {
                  "line": 1,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 13,
                "end": 20,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 13
                  },
                  "end": {
                    "line": 1,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 21,
                  "end": 39,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 21
                    },
                    "end": {
                      "line": 1,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/user",
                    "raw": "'../../model/user'"
                  },
                  "value": "../../model/user"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 42,
        "end": 88,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 48,
            "end": 87,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 48,
              "end": 53,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 56,
              "end": 87,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 56,
                "end": 63,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 64,
                  "end": 86,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userSchemaKey": {
        "type": "VariableDeclaration",
        "start": 89,
        "end": 160,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 95,
            "end": 159,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 95,
              "end": 108,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 19
                },
                "identifierName": "userSchemaKey"
              },
              "name": "userSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 111,
              "end": 159,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 22
                },
                "end": {
                  "line": 3,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 111,
                "end": 118,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 22
                  },
                  "end": {
                    "line": 3,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 119,
                  "end": 158,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 30
                    },
                    "end": {
                      "line": 3,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userValidation",
                    "raw": "'../../utils/validation/userValidation'"
                  },
                  "value": "../../utils/validation/userValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 161,
        "end": 219,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 167,
            "end": 218,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 167,
              "end": 177,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 180,
              "end": 218,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 180,
                "end": 187,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 188,
                  "end": 217,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 220,
        "end": 271,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 226,
            "end": 270,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 226,
              "end": 235,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 238,
              "end": 270,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 238,
                "end": 245,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 246,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "auth": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 316,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 315,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 43
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 282,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 10
                },
                "identifierName": "auth"
              },
              "name": "auth"
            },
            "init": {
              "type": "CallExpression",
              "start": 285,
              "end": 315,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 13
                },
                "end": {
                  "line": 6,
                  "column": 43
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 285,
                "end": 292,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 13
                  },
                  "end": {
                    "line": 6,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 293,
                  "end": 314,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 21
                    },
                    "end": {
                      "line": 6,
                      "column": 42
                    }
                  },
                  "extra": {
                    "rawValue": "../../services/auth",
                    "raw": "'../../services/auth'"
                  },
                  "value": "../../services/auth"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 317,
        "end": 387,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 323,
            "end": 386,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 323,
              "end": 345,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 348,
              "end": 386,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 31
                },
                "end": {
                  "line": 7,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 348,
                "end": 355,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 31
                  },
                  "end": {
                    "line": 7,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 356,
                  "end": 385,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 39
                    },
                    "end": {
                      "line": 7,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "23": {
    "filepath": "/desktop/authController.js",
    "controllerName": "authController",
    "methodArr": [
      {
        "register": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const data = new User({ ...req.body\n    });\n    let unique = await uniqueValidation(User, req.body);\n\n    if (!unique) {\n      return utils.inValidParam('User Registration Failed, Duplicate Data found', res);\n    }\n\n    const result = await dbService.createDocument(User, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "forgotPassword": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params.email) {\n      return utils.insufficientParameters(res);\n    }\n\n    let where = {\n      email: params.email\n    };\n    where.role = {\n      $nin: [authConstant.USER_ROLE.Guest]\n    };\n    params.email = params.email.toString().toLowerCase();\n    let isUser = await dbService.getDocumentByQuery(User, where);\n\n    if (isUser) {\n      let {\n        resultOfEmail,\n        resultOfSMS\n      } = await authService.sendResetPasswordNotification(isUser);\n\n      if (resultOfEmail && resultOfSMS) {\n        return utils.successResponse('otp successfully send.', res);\n      } else if (resultOfEmail && !resultOfSMS) {\n        return utils.successResponse('otp successfully send to your email.', res);\n      } else if (!resultOfEmail && resultOfSMS) {\n        return utils.successResponse('otp successfully send to your mobile number.', res);\n      } else {\n        return utils.failureResponse('otp can not be sent due to some issue try again later', res);\n      }\n    } else {\n      return utils.recordNotFound('user not found', res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error, res);\n  }\n}"
      },
      {
        "validateResetPasswordOtp": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params || !params.otp) {\n      return utils.insufficientParameters(res);\n    }\n\n    let isUser = await dbService.getDocumentByQuery(User, {\n      'resetPasswordLink.code': params.otp\n    });\n\n    if (!isUser || !isUser.resetPasswordLink.expireTime) {\n      return utils.invalidRequest('Invalid OTP', res);\n    } // link expire\n\n\n    if (moment(new Date()).isAfter(moment(isUser.resetPasswordLink.expireTime))) {\n      return utils.invalidRequest('Your reset password link is expired or invalid', res);\n    } // await dbService.updateDocument(User, isUser.id, { resetPasswordLink: {} })\n\n\n    return utils.requestValidated('Otp verified', res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "resetPassword": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params.code || !params.newPassword) {\n      return utils.insufficientParameters(res);\n    }\n\n    let isUser = await dbService.getDocumentByQuery(User, {\n      'resetPasswordLink.code': params.code\n    });\n\n    if (isUser && isUser.resetPasswordLink.expireTime) {\n      if (moment(new Date()).isAfter(moment(isUser.resetPasswordLink.expireTime))) {\n        // link expire\n        return utils.invalidRequest('Your reset password link is expired on invalid', res);\n      }\n    } else {\n      // invalid token\n      return utils.invalidRequest('Invalid Code', res);\n    }\n\n    let response = await authService.resetPassword(isUser, params.newPassword);\n\n    if (response && !response.flag) {\n      return utils.requestValidated(response.data, res);\n    }\n\n    return utils.invalidRequest(response.data, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "login": "async (req, res) => {\n  try {\n    let {\n      username,\n      password\n    } = req.body;\n    let url = req.originalUrl;\n\n    if (username && password) {\n      let result = await authService.loginUser(username, password, url);\n\n      if (!result.flag) {\n        return utils.loginSuccess(result.data, res);\n      }\n\n      return utils.loginFailed(result.data, res);\n    } else {\n      return utils.insufficientParameters(res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "createOrLoginGuestUser": "async (req, res) => {\n  try {\n    let params = req.body;\n\n    if (!params || !params.username) {\n      return utils.insufficientParameters(res);\n    }\n\n    let where = {\n      'username': params.username\n    };\n    where.role = {\n      $in: [authConstant.USER_ROLE.Guest]\n    };\n    let isUser = await dbService.getDocumentByQuery(User, where);\n\n    if (!isUser) {\n      // create user\n      let isValid = validation.validateParamsWithJoi(params, userSchemaKey.schemaKeys);\n\n      if (isValid.error) {\n        return utils.inValidParam(isValid.error, res);\n      }\n\n      const data = new User({ ...params,\n        role: authConstant.USER_ROLE.Guest\n      });\n      const result = await dbService.createDocument(User, data);\n\n      if (result) {\n        // login user \n        let url = req.originalUrl;\n        let isLogin = await authService.loginGuestUser(where, url);\n\n        if (!isLogin.flag) {\n          return utils.loginSuccess(isLogin.data, res);\n        }\n\n        return utils.loginFailed(isLogin.data, res);\n      } else {\n        // user not created and not login\n        return utils.loginFailed('guest user is not created due to errors', res);\n      }\n    } // guest user exist and login\n\n\n    let url = req.originalUrl;\n    let isLogin = await authService.loginGuestUser(where, url);\n\n    if (!isLogin.flag) {\n      return utils.loginSuccess(isLogin.data, res);\n    }\n\n    return utils.loginFailed(isLogin.data, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "authService": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 52,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 51,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 51
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "authService"
              },
              "name": "authService"
            },
            "init": {
              "type": "CallExpression",
              "start": 21,
              "end": 51,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 21
                },
                "end": {
                  "line": 1,
                  "column": 51
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 21,
                "end": 28,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 21
                  },
                  "end": {
                    "line": 1,
                    "column": 28
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 29,
                  "end": 50,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 29
                    },
                    "end": {
                      "line": 1,
                      "column": 50
                    }
                  },
                  "extra": {
                    "rawValue": "../../services/auth",
                    "raw": "'../../services/auth'"
                  },
                  "value": "../../services/auth"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 53,
        "end": 99,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 59,
            "end": 98,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 59,
              "end": 64,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 67,
              "end": 98,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 67,
                "end": 74,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 75,
                  "end": 97,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "User": {
        "type": "VariableDeclaration",
        "start": 100,
        "end": 141,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 106,
            "end": 140,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 106,
              "end": 110,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 10
                },
                "identifierName": "User"
              },
              "name": "User"
            },
            "init": {
              "type": "CallExpression",
              "start": 113,
              "end": 140,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 13
                },
                "end": {
                  "line": 3,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 113,
                "end": 120,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 13
                  },
                  "end": {
                    "line": 3,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 121,
                  "end": 139,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 21
                    },
                    "end": {
                      "line": 3,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/user",
                    "raw": "'../../model/user'"
                  },
                  "value": "../../model/user"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 142,
        "end": 193,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 148,
            "end": 192,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 148,
              "end": 157,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 160,
              "end": 192,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 18
                },
                "end": {
                  "line": 4,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 160,
                "end": 167,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 18
                  },
                  "end": {
                    "line": 4,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 168,
                  "end": 191,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 26
                    },
                    "end": {
                      "line": 4,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "moment": {
        "type": "VariableDeclaration",
        "start": 194,
        "end": 227,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 33
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 200,
            "end": 226,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 32
              }
            },
            "id": {
              "type": "Identifier",
              "start": 200,
              "end": 206,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 12
                },
                "identifierName": "moment"
              },
              "name": "moment"
            },
            "init": {
              "type": "CallExpression",
              "start": 209,
              "end": 226,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 15
                },
                "end": {
                  "line": 5,
                  "column": 32
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 209,
                "end": 216,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 15
                  },
                  "end": {
                    "line": 5,
                    "column": 22
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 217,
                  "end": 225,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 23
                    },
                    "end": {
                      "line": 5,
                      "column": 31
                    }
                  },
                  "extra": {
                    "rawValue": "moment",
                    "raw": "'moment'"
                  },
                  "value": "moment"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userSchemaKey": {
        "type": "VariableDeclaration",
        "start": 228,
        "end": 299,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 234,
            "end": 298,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 234,
              "end": 247,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 19
                },
                "identifierName": "userSchemaKey"
              },
              "name": "userSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 250,
              "end": 298,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 22
                },
                "end": {
                  "line": 6,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 250,
                "end": 257,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 22
                  },
                  "end": {
                    "line": 6,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 258,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 30
                    },
                    "end": {
                      "line": 6,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userValidation",
                    "raw": "'../../utils/validation/userValidation'"
                  },
                  "value": "../../utils/validation/userValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 300,
        "end": 358,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 306,
            "end": 357,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 306,
              "end": 316,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 319,
              "end": 357,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 19
                },
                "end": {
                  "line": 7,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 319,
                "end": 326,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 19
                  },
                  "end": {
                    "line": 7,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 327,
                  "end": 356,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 27
                    },
                    "end": {
                      "line": 7,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "authConstant": {
        "type": "VariableDeclaration",
        "start": 359,
        "end": 420,
        "loc": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 61
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 365,
            "end": 419,
            "loc": {
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 60
              }
            },
            "id": {
              "type": "Identifier",
              "start": 365,
              "end": 377,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 8,
                  "column": 18
                },
                "identifierName": "authConstant"
              },
              "name": "authConstant"
            },
            "init": {
              "type": "CallExpression",
              "start": 380,
              "end": 419,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 21
                },
                "end": {
                  "line": 8,
                  "column": 60
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 380,
                "end": 387,
                "loc": {
                  "start": {
                    "line": 8,
                    "column": 21
                  },
                  "end": {
                    "line": 8,
                    "column": 28
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 388,
                  "end": 418,
                  "loc": {
                    "start": {
                      "line": 8,
                      "column": 29
                    },
                    "end": {
                      "line": 8,
                      "column": 59
                    }
                  },
                  "extra": {
                    "rawValue": "../../constants/authConstant",
                    "raw": "'../../constants/authConstant'"
                  },
                  "value": "../../constants/authConstant"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "uniqueValidation": {
        "type": "VariableDeclaration",
        "start": 421,
        "end": 480,
        "loc": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 59
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 427,
            "end": 479,
            "loc": {
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 58
              }
            },
            "id": {
              "type": "ObjectPattern",
              "start": 427,
              "end": 447,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 6
                },
                "end": {
                  "line": 9,
                  "column": 26
                }
              },
              "properties": [
                {
                  "type": "ObjectProperty",
                  "start": 429,
                  "end": 445,
                  "loc": {
                    "start": {
                      "line": 9,
                      "column": 8
                    },
                    "end": {
                      "line": 9,
                      "column": 24
                    }
                  },
                  "extra": {
                    "shorthand": true
                  },
                  "method": false,
                  "key": {
                    "type": "Identifier",
                    "start": 429,
                    "end": 445,
                    "loc": {
                      "start": {
                        "line": 9,
                        "column": 8
                      },
                      "end": {
                        "line": 9,
                        "column": 24
                      },
                      "identifierName": "uniqueValidation"
                    },
                    "name": "uniqueValidation"
                  },
                  "computed": false,
                  "shorthand": true,
                  "value": {
                    "type": "Identifier",
                    "start": 429,
                    "end": 445,
                    "loc": {
                      "start": {
                        "line": 9,
                        "column": 8
                      },
                      "end": {
                        "line": 9,
                        "column": 24
                      },
                      "identifierName": "uniqueValidation"
                    },
                    "name": "uniqueValidation"
                  }
                }
              ]
            },
            "init": {
              "type": "CallExpression",
              "start": 450,
              "end": 479,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 29
                },
                "end": {
                  "line": 9,
                  "column": 58
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 450,
                "end": 457,
                "loc": {
                  "start": {
                    "line": 9,
                    "column": 29
                  },
                  "end": {
                    "line": 9,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 458,
                  "end": 478,
                  "loc": {
                    "start": {
                      "line": 9,
                      "column": 37
                    },
                    "end": {
                      "line": 9,
                      "column": 57
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/common",
                    "raw": "'../../utils/common'"
                  },
                  "value": "../../utils/common"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "24": {
    "filepath": "/desktop/depreciationModelController.js",
    "controllerName": "depreciationModelController",
    "methodArr": [
      {
        "addDepreciationModel": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, depreciationModelSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new DepreciationModel({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(DepreciationModel, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllDepreciationModel": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(DepreciationModel, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(DepreciationModel, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModel": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(DepreciationModel, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModelCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(DepreciationModel, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModelByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(DepreciationModel, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, depreciationModelSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(DepreciationModel, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new DepreciationModel({ ...params\n      });\n      let result = await dbService.createDocument(DepreciationModel, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "DepreciationModel": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 67,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 67
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 66,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 66
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 23,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 23
                },
                "identifierName": "DepreciationModel"
              },
              "name": "DepreciationModel"
            },
            "init": {
              "type": "CallExpression",
              "start": 26,
              "end": 66,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 66
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 26,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 34,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 34
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/depreciationModel",
                    "raw": "'../../model/depreciationModel'"
                  },
                  "value": "../../model/depreciationModel"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 68,
        "end": 114,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 74,
            "end": 113,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 74,
              "end": 79,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 82,
              "end": 113,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 82,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 90,
                  "end": 112,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "depreciationModelSchemaKey": {
        "type": "VariableDeclaration",
        "start": 115,
        "end": 212,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 97
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 121,
            "end": 211,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 96
              }
            },
            "id": {
              "type": "Identifier",
              "start": 121,
              "end": 147,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 32
                },
                "identifierName": "depreciationModelSchemaKey"
              },
              "name": "depreciationModelSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 150,
              "end": 211,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 35
                },
                "end": {
                  "line": 3,
                  "column": 96
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 150,
                "end": 157,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 35
                  },
                  "end": {
                    "line": 3,
                    "column": 42
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 158,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 43
                    },
                    "end": {
                      "line": 3,
                      "column": 95
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/depreciationModelValidation",
                    "raw": "'../../utils/validation/depreciationModelValidation'"
                  },
                  "value": "../../utils/validation/depreciationModelValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 213,
        "end": 271,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 219,
            "end": 270,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 219,
              "end": 229,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 232,
              "end": 270,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 232,
                "end": 239,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 240,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 323,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 322,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 287,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 290,
              "end": 322,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 290,
                "end": 297,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 298,
                  "end": 321,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "25": {
    "filepath": "/desktop/enhancementController.js",
    "controllerName": "enhancementController",
    "methodArr": [
      {
        "addEnhancement": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Enhancement({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(Enhancement, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllEnhancement": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Enhancement, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Enhancement, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancement": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Enhancement, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancementCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Enhancement, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancementByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Enhancement, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Enhancement, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Enhancement({ ...params\n      });\n      let result = await dbService.createDocument(Enhancement, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Enhancement": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 55,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 55
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 54,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 54
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "Enhancement"
              },
              "name": "Enhancement"
            },
            "init": {
              "type": "CallExpression",
              "start": 20,
              "end": 54,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 20
                },
                "end": {
                  "line": 1,
                  "column": 54
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 20,
                "end": 27,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 20
                  },
                  "end": {
                    "line": 1,
                    "column": 27
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 28,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 28
                    },
                    "end": {
                      "line": 1,
                      "column": 53
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/enhancement",
                    "raw": "'../../model/enhancement'"
                  },
                  "value": "../../model/enhancement"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 102,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 101,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 67,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 70,
              "end": 101,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 70,
                "end": 77,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 78,
                  "end": 100,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "enhancementSchemaKey": {
        "type": "VariableDeclaration",
        "start": 103,
        "end": 188,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 85
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 109,
            "end": 187,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 84
              }
            },
            "id": {
              "type": "Identifier",
              "start": 109,
              "end": 129,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 26
                },
                "identifierName": "enhancementSchemaKey"
              },
              "name": "enhancementSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 132,
              "end": 187,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 29
                },
                "end": {
                  "line": 3,
                  "column": 84
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 132,
                "end": 139,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 29
                  },
                  "end": {
                    "line": 3,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 140,
                  "end": 186,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 37
                    },
                    "end": {
                      "line": 3,
                      "column": 83
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/enhancementValidation",
                    "raw": "'../../utils/validation/enhancementValidation'"
                  },
                  "value": "../../utils/validation/enhancementValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 189,
        "end": 247,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 195,
            "end": 246,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 195,
              "end": 205,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 208,
              "end": 246,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 208,
                "end": 215,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 216,
                  "end": 245,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 248,
        "end": 299,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 254,
            "end": 298,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 254,
              "end": 263,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 266,
              "end": 298,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 266,
                "end": 273,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 274,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "26": {
    "filepath": "/desktop/fileUploadController.js",
    "controllerName": "fileUploadController",
    "methodArr": [
      {
        "upload": "async (req, res) => {\n  try {\n    // Create Directory if not exist.\n    await makeDirectory(defaultDirectory); // Setting up formidable options.\n\n    const form = new formidable.IncomingForm();\n    form.multiples = true;\n    form.maxFileSize = 300 * 1024 * 1024; //300 MB\n\n    form.maxFieldsSize = 100 * 1024 * 1024; //50 MB\n    //Upload File one by one\n\n    const uploadFileRes = await new Promise(async (resolve, reject) => {\n      form.parse(req, async function (err, fields, files) {\n        let filePaths = [];\n        let fileCount = 1;\n        let fileArr = [];\n\n        if (files['file[]'].size == 0) {\n          resolve({\n            'err': 'Please Select any one File',\n            'status': false\n          });\n        }\n\n        if (!Array.isArray(files['file[]'])) {\n          fileArr.push(files['file[]']);\n          files['file[]'] = fileArr;\n        }\n\n        for (let file of files['file[]']) {\n          let response = await uploadFile(file, fields, fileCount++);\n\n          if (response.status == false) {\n            filePaths.push({\n              'name': file.name,\n              'err': response.message,\n              'status': false\n            });\n          } else {\n            let url = response.data;\n\n            if (!validUrl.isUri(response.data)) {\n              response.data = response.data.replace('/public', '');\n              url = req.protocol + '://' + req.headers.host + response.data;\n            }\n\n            filePaths.push({\n              'path': url,\n              'status': true\n            });\n          }\n        }\n\n        resolve(filePaths);\n      });\n    });\n    return utils.successResponse(uploadFileRes, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "makeDirectory": "async directoryPath => {\n  if (!fs.existsSync(directoryPath)) {\n    fs.promises.mkdir(directoryPath, {\n      recursive: true\n    }, err => {\n      if (err) {\n        return false;\n      }\n\n      ;\n      return true;\n    });\n  }\n\n  return true;\n}"
      }
    ],
    "allVariablesInFile": {
      "fs": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 25,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 24,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 24
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 8,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 8
                },
                "identifierName": "fs"
              },
              "name": "fs"
            },
            "init": {
              "type": "CallExpression",
              "start": 11,
              "end": 24,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 11
                },
                "end": {
                  "line": 1,
                  "column": 24
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 11,
                "end": 18,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 11
                  },
                  "end": {
                    "line": 1,
                    "column": 18
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 19,
                  "end": 23,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 19
                    },
                    "end": {
                      "line": 1,
                      "column": 23
                    }
                  },
                  "extra": {
                    "rawValue": "fs",
                    "raw": "'fs'"
                  },
                  "value": "fs"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "path": {
        "type": "VariableDeclaration",
        "start": 26,
        "end": 55,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 32,
            "end": 54,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 28
              }
            },
            "id": {
              "type": "Identifier",
              "start": 32,
              "end": 36,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 10
                },
                "identifierName": "path"
              },
              "name": "path"
            },
            "init": {
              "type": "CallExpression",
              "start": 39,
              "end": 54,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 13
                },
                "end": {
                  "line": 2,
                  "column": 28
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 39,
                "end": 46,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 13
                  },
                  "end": {
                    "line": 2,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 47,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 21
                    },
                    "end": {
                      "line": 2,
                      "column": 27
                    }
                  },
                  "extra": {
                    "rawValue": "path",
                    "raw": "'path'"
                  },
                  "value": "path"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "formidable": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 97,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 96,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 72,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 16
                },
                "identifierName": "formidable"
              },
              "name": "formidable"
            },
            "init": {
              "type": "CallExpression",
              "start": 75,
              "end": 96,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 19
                },
                "end": {
                  "line": 3,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 75,
                "end": 82,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 19
                  },
                  "end": {
                    "line": 3,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 83,
                  "end": 95,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 27
                    },
                    "end": {
                      "line": 3,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "formidable",
                    "raw": "'formidable'"
                  },
                  "value": "formidable"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validUrl": {
        "type": "VariableDeclaration",
        "start": 98,
        "end": 136,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 38
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 104,
            "end": 135,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 37
              }
            },
            "id": {
              "type": "Identifier",
              "start": 104,
              "end": 112,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 14
                },
                "identifierName": "validUrl"
              },
              "name": "validUrl"
            },
            "init": {
              "type": "CallExpression",
              "start": 115,
              "end": 135,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 17
                },
                "end": {
                  "line": 4,
                  "column": 37
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 115,
                "end": 122,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 17
                  },
                  "end": {
                    "line": 4,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 123,
                  "end": 134,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 25
                    },
                    "end": {
                      "line": 4,
                      "column": 36
                    }
                  },
                  "extra": {
                    "rawValue": "valid-url",
                    "raw": "'valid-url'"
                  },
                  "value": "valid-url"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "AWS": {
        "type": "VariableDeclaration",
        "start": 137,
        "end": 168,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 31
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 143,
            "end": 167,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 30
              }
            },
            "id": {
              "type": "Identifier",
              "start": 143,
              "end": 146,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 9
                },
                "identifierName": "AWS"
              },
              "name": "AWS"
            },
            "init": {
              "type": "CallExpression",
              "start": 149,
              "end": 167,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 12
                },
                "end": {
                  "line": 5,
                  "column": 30
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 149,
                "end": 156,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 12
                  },
                  "end": {
                    "line": 5,
                    "column": 19
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 157,
                  "end": 166,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 20
                    },
                    "end": {
                      "line": 5,
                      "column": 29
                    }
                  },
                  "extra": {
                    "rawValue": "aws-sdk",
                    "raw": "'aws-sdk'"
                  },
                  "value": "aws-sdk"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 170,
        "end": 216,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 176,
            "end": 215,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 176,
              "end": 181,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 184,
              "end": 215,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 14
                },
                "end": {
                  "line": 7,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 184,
                "end": 191,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 14
                  },
                  "end": {
                    "line": 7,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 192,
                  "end": 214,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 22
                    },
                    "end": {
                      "line": 7,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "defaultDirectory": {
        "type": "VariableDeclaration",
        "start": 218,
        "end": 257,
        "loc": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 39
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 222,
            "end": 256,
            "loc": {
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 38
              }
            },
            "id": {
              "type": "Identifier",
              "start": 222,
              "end": 238,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 20
                },
                "identifierName": "defaultDirectory"
              },
              "name": "defaultDirectory"
            },
            "init": {
              "type": "StringLiteral",
              "start": 241,
              "end": 256,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 23
                },
                "end": {
                  "line": 9,
                  "column": 38
                }
              },
              "extra": {
                "rawValue": "public/assets",
                "raw": "'public/assets'"
              },
              "value": "public/assets"
            }
          }
        ],
        "kind": "let"
      },
      "allowedFileTypes": {
        "type": "VariableDeclaration",
        "start": 258,
        "end": 284,
        "loc": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 26
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 262,
            "end": 283,
            "loc": {
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 25
              }
            },
            "id": {
              "type": "Identifier",
              "start": 262,
              "end": 278,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 20
                },
                "identifierName": "allowedFileTypes"
              },
              "name": "allowedFileTypes"
            },
            "init": {
              "type": "ArrayExpression",
              "start": 281,
              "end": 283,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 23
                },
                "end": {
                  "line": 10,
                  "column": 25
                }
              },
              "elements": []
            }
          }
        ],
        "kind": "let"
      },
      "maxFileSize": {
        "type": "VariableDeclaration",
        "start": 285,
        "end": 305,
        "loc": {
          "start": {
            "line": 11,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 20
          }
        },
        "trailingComments": [
          {
            "type": "CommentLine",
            "value": "In Megabyte",
            "start": 306,
            "end": 319,
            "loc": {
              "start": {
                "line": 11,
                "column": 21
              },
              "end": {
                "line": 11,
                "column": 34
              }
            }
          }
        ],
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 289,
            "end": 304,
            "loc": {
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 19
              }
            },
            "id": {
              "type": "Identifier",
              "start": 289,
              "end": 300,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 15
                },
                "identifierName": "maxFileSize"
              },
              "name": "maxFileSize"
            },
            "init": {
              "type": "NumericLiteral",
              "start": 303,
              "end": 304,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 18
                },
                "end": {
                  "line": 11,
                  "column": 19
                }
              },
              "extra": {
                "rawValue": 5,
                "raw": "5"
              },
              "value": 5
            }
          }
        ],
        "kind": "let"
      }
    }
  },
  "27": {
    "filepath": "/desktop/masterController.js",
    "controllerName": "masterController",
    "methodArr": [
      {
        "addMaster": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, masterSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Master({ ...req.body\n    });\n    let result = await dbService.createDocument(Master, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllMaster": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Master, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Master, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMaster": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Master, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMasterCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Master, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMasterByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Master, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, masterSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Master, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Master({ ...params\n      });\n      let result = await dbService.createDocument(Master, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Master": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 45,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 45
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 44,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 44
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 12,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 12
                },
                "identifierName": "Master"
              },
              "name": "Master"
            },
            "init": {
              "type": "CallExpression",
              "start": 15,
              "end": 44,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 15
                },
                "end": {
                  "line": 1,
                  "column": 44
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 15,
                "end": 22,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 15
                  },
                  "end": {
                    "line": 1,
                    "column": 22
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 23,
                  "end": 43,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 43
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/master",
                    "raw": "'../../model/master'"
                  },
                  "value": "../../model/master"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 46,
        "end": 92,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 52,
            "end": 91,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 52,
              "end": 57,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 60,
              "end": 91,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 60,
                "end": 67,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 68,
                  "end": 90,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "masterSchemaKey": {
        "type": "VariableDeclaration",
        "start": 93,
        "end": 168,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 75
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 99,
            "end": 167,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 74
              }
            },
            "id": {
              "type": "Identifier",
              "start": 99,
              "end": 114,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 21
                },
                "identifierName": "masterSchemaKey"
              },
              "name": "masterSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 117,
              "end": 167,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 24
                },
                "end": {
                  "line": 3,
                  "column": 74
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 117,
                "end": 124,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 24
                  },
                  "end": {
                    "line": 3,
                    "column": 31
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 125,
                  "end": 166,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 32
                    },
                    "end": {
                      "line": 3,
                      "column": 73
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/masterValidation",
                    "raw": "'../../utils/validation/masterValidation'"
                  },
                  "value": "../../utils/validation/masterValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 169,
        "end": 227,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 175,
            "end": 226,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 175,
              "end": 185,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 188,
              "end": 226,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 188,
                "end": 195,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 196,
                  "end": 225,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 228,
        "end": 279,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 234,
            "end": 278,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 234,
              "end": 243,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 246,
              "end": 278,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 246,
                "end": 253,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 254,
                  "end": 277,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 280,
        "end": 350,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 286,
            "end": 349,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 286,
              "end": 308,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 311,
              "end": 349,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 311,
                "end": 318,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 319,
                  "end": 348,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "28": {
    "filepath": "/desktop/propertyAttributeController.js",
    "controllerName": "propertyAttributeController",
    "methodArr": [
      {
        "addPropertyAttribute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, propertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new PropertyAttribute({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(PropertyAttribute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllPropertyAttribute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(PropertyAttribute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(PropertyAttribute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(PropertyAttribute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttributeCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(PropertyAttribute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttributeByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(PropertyAttribute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, propertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(PropertyAttribute, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new PropertyAttribute({ ...params\n      });\n      let result = await dbService.createDocument(PropertyAttribute, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "PropertyAttribute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 67,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 67
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 66,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 66
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 23,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 23
                },
                "identifierName": "PropertyAttribute"
              },
              "name": "PropertyAttribute"
            },
            "init": {
              "type": "CallExpression",
              "start": 26,
              "end": 66,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 66
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 26,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 34,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 34
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/propertyAttribute",
                    "raw": "'../../model/propertyAttribute'"
                  },
                  "value": "../../model/propertyAttribute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 68,
        "end": 114,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 74,
            "end": 113,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 74,
              "end": 79,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 82,
              "end": 113,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 82,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 90,
                  "end": 112,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "propertyAttributeSchemaKey": {
        "type": "VariableDeclaration",
        "start": 115,
        "end": 212,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 97
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 121,
            "end": 211,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 96
              }
            },
            "id": {
              "type": "Identifier",
              "start": 121,
              "end": 147,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 32
                },
                "identifierName": "propertyAttributeSchemaKey"
              },
              "name": "propertyAttributeSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 150,
              "end": 211,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 35
                },
                "end": {
                  "line": 3,
                  "column": 96
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 150,
                "end": 157,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 35
                  },
                  "end": {
                    "line": 3,
                    "column": 42
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 158,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 43
                    },
                    "end": {
                      "line": 3,
                      "column": 95
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/propertyAttributeValidation",
                    "raw": "'../../utils/validation/propertyAttributeValidation'"
                  },
                  "value": "../../utils/validation/propertyAttributeValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 213,
        "end": 271,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 219,
            "end": 270,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 219,
              "end": 229,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 232,
              "end": 270,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 232,
                "end": 239,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 240,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 323,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 322,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 287,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 290,
              "end": 322,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 290,
                "end": 297,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 298,
                  "end": 321,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 324,
        "end": 394,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 330,
            "end": 393,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 330,
              "end": 352,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 355,
              "end": 393,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 355,
                "end": 362,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 363,
                  "end": 392,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "29": {
    "filepath": "/desktop/propertyController.js",
    "controllerName": "propertyController",
    "methodArr": [
      {
        "addProperty": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, propertySchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Property({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(Property, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllProperty": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Property, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Property, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getProperty": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Property, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Property, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Property, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, propertySchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Property, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Property({ ...params\n      });\n      let result = await dbService.createDocument(Property, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Property": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 49,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 48,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 48
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 14,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 14
                },
                "identifierName": "Property"
              },
              "name": "Property"
            },
            "init": {
              "type": "CallExpression",
              "start": 17,
              "end": 48,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 17
                },
                "end": {
                  "line": 1,
                  "column": 48
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 17,
                "end": 24,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 17
                  },
                  "end": {
                    "line": 1,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 25,
                  "end": 47,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 25
                    },
                    "end": {
                      "line": 1,
                      "column": 47
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/property",
                    "raw": "'../../model/property'"
                  },
                  "value": "../../model/property"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 50,
        "end": 96,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 56,
            "end": 95,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 56,
              "end": 61,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 64,
              "end": 95,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 64,
                "end": 71,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 72,
                  "end": 94,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "propertySchemaKey": {
        "type": "VariableDeclaration",
        "start": 97,
        "end": 176,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 79
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 103,
            "end": 175,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 78
              }
            },
            "id": {
              "type": "Identifier",
              "start": 103,
              "end": 120,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 23
                },
                "identifierName": "propertySchemaKey"
              },
              "name": "propertySchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 123,
              "end": 175,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 26
                },
                "end": {
                  "line": 3,
                  "column": 78
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 123,
                "end": 130,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 26
                  },
                  "end": {
                    "line": 3,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 131,
                  "end": 174,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 34
                    },
                    "end": {
                      "line": 3,
                      "column": 77
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/propertyValidation",
                    "raw": "'../../utils/validation/propertyValidation'"
                  },
                  "value": "../../utils/validation/propertyValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 177,
        "end": 235,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 183,
            "end": 234,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 183,
              "end": 193,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 196,
              "end": 234,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 196,
                "end": 203,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 204,
                  "end": 233,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 236,
        "end": 287,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 242,
            "end": 286,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 242,
              "end": 251,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 254,
              "end": 286,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 254,
                "end": 261,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 262,
                  "end": 285,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 288,
        "end": 358,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 294,
            "end": 357,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 294,
              "end": 316,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 319,
              "end": 357,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 319,
                "end": 326,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 327,
                  "end": 356,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "30": {
    "filepath": "/desktop/subPropertyAttributeController.js",
    "controllerName": "subPropertyAttributeController",
    "methodArr": [
      {
        "addSubPropertyAttribute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, subPropertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new SubPropertyAttribute({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(SubPropertyAttribute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllSubPropertyAttribute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(SubPropertyAttribute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(SubPropertyAttribute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(SubPropertyAttribute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttributeCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(SubPropertyAttribute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttributeByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(SubPropertyAttribute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, subPropertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(SubPropertyAttribute, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new SubPropertyAttribute({ ...params\n      });\n      let result = await dbService.createDocument(SubPropertyAttribute, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "SubPropertyAttribute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 73,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 73
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 72,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 72
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 26,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 26
                },
                "identifierName": "SubPropertyAttribute"
              },
              "name": "SubPropertyAttribute"
            },
            "init": {
              "type": "CallExpression",
              "start": 29,
              "end": 72,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 29
                },
                "end": {
                  "line": 1,
                  "column": 72
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 29,
                "end": 36,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 29
                  },
                  "end": {
                    "line": 1,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 37,
                  "end": 71,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 37
                    },
                    "end": {
                      "line": 1,
                      "column": 71
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/subPropertyAttribute",
                    "raw": "'../../model/subPropertyAttribute'"
                  },
                  "value": "../../model/subPropertyAttribute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 74,
        "end": 120,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 80,
            "end": 119,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 80,
              "end": 85,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 88,
              "end": 119,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 88,
                "end": 95,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 96,
                  "end": 118,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "subPropertyAttributeSchemaKey": {
        "type": "VariableDeclaration",
        "start": 121,
        "end": 224,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 103
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 127,
            "end": 223,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 102
              }
            },
            "id": {
              "type": "Identifier",
              "start": 127,
              "end": 156,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 35
                },
                "identifierName": "subPropertyAttributeSchemaKey"
              },
              "name": "subPropertyAttributeSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 159,
              "end": 223,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 38
                },
                "end": {
                  "line": 3,
                  "column": 102
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 159,
                "end": 166,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 38
                  },
                  "end": {
                    "line": 3,
                    "column": 45
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 167,
                  "end": 222,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 46
                    },
                    "end": {
                      "line": 3,
                      "column": 101
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/subPropertyAttributeValidation",
                    "raw": "'../../utils/validation/subPropertyAttributeValidation'"
                  },
                  "value": "../../utils/validation/subPropertyAttributeValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 225,
        "end": 283,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 231,
            "end": 282,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 231,
              "end": 241,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 244,
              "end": 282,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 244,
                "end": 251,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 252,
                  "end": 281,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 284,
        "end": 335,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 290,
            "end": 334,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 290,
              "end": 299,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 302,
              "end": 334,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 302,
                "end": 309,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 310,
                  "end": 333,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 336,
        "end": 406,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 342,
            "end": 405,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 342,
              "end": 364,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 367,
              "end": 405,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 367,
                "end": 374,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 375,
                  "end": 404,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "31": {
    "filepath": "/desktop/userController.js",
    "controllerName": "userController",
    "methodArr": [
      {
        "addUser": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new User({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(User, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllUser": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      if (req.user) {\n        query = { ...query,\n          ...{\n            '_id': {\n              $ne: req.user.id\n            }\n          }\n        };\n\n        if (req.body.query._id) {\n          Object.assign(query._id, {\n            $in: [req.body.query._id]\n          });\n        }\n      } else {\n        return util.badRequest({}, res);\n      }\n\n      result = await dbService.countDocument(User, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (!options.populate) options.populate = [];\n      options.populate = options.populate.concat([{\n        path: 'properties'\n      }, {\n        path: 'subProperties'\n      }]);\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      if (req.user) {\n        query = { ...query,\n          ...{\n            '_id': {\n              $ne: req.user.id\n            }\n          }\n        };\n\n        if (req.body.query._id) {\n          Object.assign(query._id, {\n            $in: [req.body.query._id]\n          });\n        }\n      }\n\n      result = await dbService.getAllDocuments(User, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUser": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(User, query);\n\n    if (result) {\n      result = await result.populate([{\n        'path': 'properties'\n      }, {\n        'path': 'subProperties'\n      }]).execPopulate();\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(User, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(User, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(User, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new User({ ...params\n      });\n      let result = await dbService.createDocument(User, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "changePassword": "async (req, res) => {\n  try {\n    let params = req.body;\n\n    if (!params.newPassword || !req.user.id || !params.oldPassword) {\n      return utils.inValidParam('Please Provide userId and new Password and Old password', res);\n    }\n\n    let result = await auth.changePassword({ ...params,\n      userId: req.user.id\n    });\n\n    if (result.flag) {\n      return utils.invalidRequest(result.data, res);\n    }\n\n    return utils.requestValidated(result.data, res);\n  } catch (error) {\n    return utils.failureResponse(error, res);\n  }\n}"
      },
      {
        "updateProfile": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.user.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, userSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (data.password) delete data.password;\n    if (data.createdAt) delete data.createdAt;\n    if (data.updatedAt) delete data.updatedAt;\n    if (data.id) delete data.id;\n    let result = await dbService.findOneAndUpdateDocument(User, {\n      _id: req.user.id\n    }, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "User": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 41,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 40,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 10,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 10
                },
                "identifierName": "User"
              },
              "name": "User"
            },
            "init": {
              "type": "CallExpression",
              "start": 13,
              "end": 40,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 13
                },
                "end": {
                  "line": 1,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 13,
                "end": 20,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 13
                  },
                  "end": {
                    "line": 1,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 21,
                  "end": 39,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 21
                    },
                    "end": {
                      "line": 1,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/user",
                    "raw": "'../../model/user'"
                  },
                  "value": "../../model/user"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 42,
        "end": 88,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 48,
            "end": 87,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 48,
              "end": 53,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 56,
              "end": 87,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 56,
                "end": 63,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 64,
                  "end": 86,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userSchemaKey": {
        "type": "VariableDeclaration",
        "start": 89,
        "end": 160,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 95,
            "end": 159,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 95,
              "end": 108,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 19
                },
                "identifierName": "userSchemaKey"
              },
              "name": "userSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 111,
              "end": 159,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 22
                },
                "end": {
                  "line": 3,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 111,
                "end": 118,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 22
                  },
                  "end": {
                    "line": 3,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 119,
                  "end": 158,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 30
                    },
                    "end": {
                      "line": 3,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userValidation",
                    "raw": "'../../utils/validation/userValidation'"
                  },
                  "value": "../../utils/validation/userValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 161,
        "end": 219,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 167,
            "end": 218,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 167,
              "end": 177,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 180,
              "end": 218,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 180,
                "end": 187,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 188,
                  "end": 217,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 220,
        "end": 271,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 226,
            "end": 270,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 226,
              "end": 235,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 238,
              "end": 270,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 238,
                "end": 245,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 246,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "auth": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 316,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 315,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 43
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 282,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 10
                },
                "identifierName": "auth"
              },
              "name": "auth"
            },
            "init": {
              "type": "CallExpression",
              "start": 285,
              "end": 315,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 13
                },
                "end": {
                  "line": 6,
                  "column": 43
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 285,
                "end": 292,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 13
                  },
                  "end": {
                    "line": 6,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 293,
                  "end": 314,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 21
                    },
                    "end": {
                      "line": 6,
                      "column": 42
                    }
                  },
                  "extra": {
                    "rawValue": "../../services/auth",
                    "raw": "'../../services/auth'"
                  },
                  "value": "../../services/auth"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 317,
        "end": 387,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 323,
            "end": 386,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 323,
              "end": 345,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 348,
              "end": 386,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 31
                },
                "end": {
                  "line": 7,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 348,
                "end": 355,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 31
                  },
                  "end": {
                    "line": 7,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 356,
                  "end": 385,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 39
                    },
                    "end": {
                      "line": 7,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "32": {
    "filepath": "/device/authController.js",
    "controllerName": "authController",
    "methodArr": [
      {
        "register": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    const data = new User({ ...req.body\n    });\n    let unique = await uniqueValidation(User, req.body);\n\n    if (!unique) {\n      return utils.inValidParam('User Registration Failed, Duplicate Data found', res);\n    }\n\n    const result = await dbService.createDocument(User, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "forgotPassword": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params.email) {\n      return utils.insufficientParameters(res);\n    }\n\n    let where = {\n      email: params.email\n    };\n    where.role = {\n      $nin: [authConstant.USER_ROLE.Guest]\n    };\n    params.email = params.email.toString().toLowerCase();\n    let isUser = await dbService.getDocumentByQuery(User, where);\n\n    if (isUser) {\n      let {\n        resultOfEmail,\n        resultOfSMS\n      } = await authService.sendResetPasswordNotification(isUser);\n\n      if (resultOfEmail && resultOfSMS) {\n        return utils.successResponse('otp successfully send.', res);\n      } else if (resultOfEmail && !resultOfSMS) {\n        return utils.successResponse('otp successfully send to your email.', res);\n      } else if (!resultOfEmail && resultOfSMS) {\n        return utils.successResponse('otp successfully send to your mobile number.', res);\n      } else {\n        return utils.failureResponse('otp can not be sent due to some issue try again later', res);\n      }\n    } else {\n      return utils.recordNotFound('user not found', res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error, res);\n  }\n}"
      },
      {
        "validateResetPasswordOtp": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params || !params.otp) {\n      return utils.insufficientParameters(res);\n    }\n\n    let isUser = await dbService.getDocumentByQuery(User, {\n      'resetPasswordLink.code': params.otp\n    });\n\n    if (!isUser || !isUser.resetPasswordLink.expireTime) {\n      return utils.invalidRequest('Invalid OTP', res);\n    } // link expire\n\n\n    if (moment(new Date()).isAfter(moment(isUser.resetPasswordLink.expireTime))) {\n      return utils.invalidRequest('Your reset password link is expired or invalid', res);\n    } // await dbService.updateDocument(User, isUser.id, { resetPasswordLink: {} })\n\n\n    return utils.requestValidated('Otp verified', res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "resetPassword": "async (req, res) => {\n  const params = req.body;\n\n  try {\n    if (!params.code || !params.newPassword) {\n      return utils.insufficientParameters(res);\n    }\n\n    let isUser = await dbService.getDocumentByQuery(User, {\n      'resetPasswordLink.code': params.code\n    });\n\n    if (isUser && isUser.resetPasswordLink.expireTime) {\n      if (moment(new Date()).isAfter(moment(isUser.resetPasswordLink.expireTime))) {\n        // link expire\n        return utils.invalidRequest('Your reset password link is expired on invalid', res);\n      }\n    } else {\n      // invalid token\n      return utils.invalidRequest('Invalid Code', res);\n    }\n\n    let response = await authService.resetPassword(isUser, params.newPassword);\n\n    if (response && !response.flag) {\n      return utils.requestValidated(response.data, res);\n    }\n\n    return utils.invalidRequest(response.data, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "login": "async (req, res) => {\n  try {\n    let {\n      username,\n      password\n    } = req.body;\n    let url = req.originalUrl;\n\n    if (username && password) {\n      let result = await authService.loginUser(username, password, url);\n\n      if (!result.flag) {\n        return utils.loginSuccess(result.data, res);\n      }\n\n      return utils.loginFailed(result.data, res);\n    } else {\n      return utils.insufficientParameters(res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "createOrLoginGuestUser": "async (req, res) => {\n  try {\n    let params = req.body;\n\n    if (!params || !params.username) {\n      return utils.insufficientParameters(res);\n    }\n\n    let where = {\n      'username': params.username\n    };\n    where.role = {\n      $in: [authConstant.USER_ROLE.Guest]\n    };\n    let isUser = await dbService.getDocumentByQuery(User, where);\n\n    if (!isUser) {\n      // create user\n      let isValid = validation.validateParamsWithJoi(params, userSchemaKey.schemaKeys);\n\n      if (isValid.error) {\n        return utils.inValidParam(isValid.error, res);\n      }\n\n      const data = new User({ ...params,\n        role: authConstant.USER_ROLE.Guest\n      });\n      const result = await dbService.createDocument(User, data);\n\n      if (result) {\n        // login user \n        let url = req.originalUrl;\n        let isLogin = await authService.loginGuestUser(where, url);\n\n        if (!isLogin.flag) {\n          return utils.loginSuccess(isLogin.data, res);\n        }\n\n        return utils.loginFailed(isLogin.data, res);\n      } else {\n        // user not created and not login\n        return utils.loginFailed('guest user is not created due to errors', res);\n      }\n    } // guest user exist and login\n\n\n    let url = req.originalUrl;\n    let isLogin = await authService.loginGuestUser(where, url);\n\n    if (!isLogin.flag) {\n      return utils.loginSuccess(isLogin.data, res);\n    }\n\n    return utils.loginFailed(isLogin.data, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "authService": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 52,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 51,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 51
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "authService"
              },
              "name": "authService"
            },
            "init": {
              "type": "CallExpression",
              "start": 21,
              "end": 51,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 21
                },
                "end": {
                  "line": 1,
                  "column": 51
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 21,
                "end": 28,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 21
                  },
                  "end": {
                    "line": 1,
                    "column": 28
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 29,
                  "end": 50,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 29
                    },
                    "end": {
                      "line": 1,
                      "column": 50
                    }
                  },
                  "extra": {
                    "rawValue": "../../services/auth",
                    "raw": "'../../services/auth'"
                  },
                  "value": "../../services/auth"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 53,
        "end": 99,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 59,
            "end": 98,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 59,
              "end": 64,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 67,
              "end": 98,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 67,
                "end": 74,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 75,
                  "end": 97,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "User": {
        "type": "VariableDeclaration",
        "start": 100,
        "end": 141,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 106,
            "end": 140,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 106,
              "end": 110,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 10
                },
                "identifierName": "User"
              },
              "name": "User"
            },
            "init": {
              "type": "CallExpression",
              "start": 113,
              "end": 140,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 13
                },
                "end": {
                  "line": 3,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 113,
                "end": 120,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 13
                  },
                  "end": {
                    "line": 3,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 121,
                  "end": 139,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 21
                    },
                    "end": {
                      "line": 3,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/user",
                    "raw": "'../../model/user'"
                  },
                  "value": "../../model/user"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 142,
        "end": 193,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 148,
            "end": 192,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 148,
              "end": 157,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 160,
              "end": 192,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 18
                },
                "end": {
                  "line": 4,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 160,
                "end": 167,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 18
                  },
                  "end": {
                    "line": 4,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 168,
                  "end": 191,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 26
                    },
                    "end": {
                      "line": 4,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "moment": {
        "type": "VariableDeclaration",
        "start": 194,
        "end": 227,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 33
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 200,
            "end": 226,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 32
              }
            },
            "id": {
              "type": "Identifier",
              "start": 200,
              "end": 206,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 12
                },
                "identifierName": "moment"
              },
              "name": "moment"
            },
            "init": {
              "type": "CallExpression",
              "start": 209,
              "end": 226,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 15
                },
                "end": {
                  "line": 5,
                  "column": 32
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 209,
                "end": 216,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 15
                  },
                  "end": {
                    "line": 5,
                    "column": 22
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 217,
                  "end": 225,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 23
                    },
                    "end": {
                      "line": 5,
                      "column": 31
                    }
                  },
                  "extra": {
                    "rawValue": "moment",
                    "raw": "'moment'"
                  },
                  "value": "moment"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userSchemaKey": {
        "type": "VariableDeclaration",
        "start": 228,
        "end": 299,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 234,
            "end": 298,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 234,
              "end": 247,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 19
                },
                "identifierName": "userSchemaKey"
              },
              "name": "userSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 250,
              "end": 298,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 22
                },
                "end": {
                  "line": 6,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 250,
                "end": 257,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 22
                  },
                  "end": {
                    "line": 6,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 258,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 30
                    },
                    "end": {
                      "line": 6,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userValidation",
                    "raw": "'../../utils/validation/userValidation'"
                  },
                  "value": "../../utils/validation/userValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 300,
        "end": 358,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 306,
            "end": 357,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 306,
              "end": 316,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 319,
              "end": 357,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 19
                },
                "end": {
                  "line": 7,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 319,
                "end": 326,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 19
                  },
                  "end": {
                    "line": 7,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 327,
                  "end": 356,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 27
                    },
                    "end": {
                      "line": 7,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "authConstant": {
        "type": "VariableDeclaration",
        "start": 359,
        "end": 420,
        "loc": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 61
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 365,
            "end": 419,
            "loc": {
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 60
              }
            },
            "id": {
              "type": "Identifier",
              "start": 365,
              "end": 377,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 8,
                  "column": 18
                },
                "identifierName": "authConstant"
              },
              "name": "authConstant"
            },
            "init": {
              "type": "CallExpression",
              "start": 380,
              "end": 419,
              "loc": {
                "start": {
                  "line": 8,
                  "column": 21
                },
                "end": {
                  "line": 8,
                  "column": 60
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 380,
                "end": 387,
                "loc": {
                  "start": {
                    "line": 8,
                    "column": 21
                  },
                  "end": {
                    "line": 8,
                    "column": 28
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 388,
                  "end": 418,
                  "loc": {
                    "start": {
                      "line": 8,
                      "column": 29
                    },
                    "end": {
                      "line": 8,
                      "column": 59
                    }
                  },
                  "extra": {
                    "rawValue": "../../constants/authConstant",
                    "raw": "'../../constants/authConstant'"
                  },
                  "value": "../../constants/authConstant"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "uniqueValidation": {
        "type": "VariableDeclaration",
        "start": 421,
        "end": 480,
        "loc": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 59
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 427,
            "end": 479,
            "loc": {
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 58
              }
            },
            "id": {
              "type": "ObjectPattern",
              "start": 427,
              "end": 447,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 6
                },
                "end": {
                  "line": 9,
                  "column": 26
                }
              },
              "properties": [
                {
                  "type": "ObjectProperty",
                  "start": 429,
                  "end": 445,
                  "loc": {
                    "start": {
                      "line": 9,
                      "column": 8
                    },
                    "end": {
                      "line": 9,
                      "column": 24
                    }
                  },
                  "extra": {
                    "shorthand": true
                  },
                  "method": false,
                  "key": {
                    "type": "Identifier",
                    "start": 429,
                    "end": 445,
                    "loc": {
                      "start": {
                        "line": 9,
                        "column": 8
                      },
                      "end": {
                        "line": 9,
                        "column": 24
                      },
                      "identifierName": "uniqueValidation"
                    },
                    "name": "uniqueValidation"
                  },
                  "computed": false,
                  "shorthand": true,
                  "value": {
                    "type": "Identifier",
                    "start": 429,
                    "end": 445,
                    "loc": {
                      "start": {
                        "line": 9,
                        "column": 8
                      },
                      "end": {
                        "line": 9,
                        "column": 24
                      },
                      "identifierName": "uniqueValidation"
                    },
                    "name": "uniqueValidation"
                  }
                }
              ]
            },
            "init": {
              "type": "CallExpression",
              "start": 450,
              "end": 479,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 29
                },
                "end": {
                  "line": 9,
                  "column": 58
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 450,
                "end": 457,
                "loc": {
                  "start": {
                    "line": 9,
                    "column": 29
                  },
                  "end": {
                    "line": 9,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 458,
                  "end": 478,
                  "loc": {
                    "start": {
                      "line": 9,
                      "column": 37
                    },
                    "end": {
                      "line": 9,
                      "column": 57
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/common",
                    "raw": "'../../utils/common'"
                  },
                  "value": "../../utils/common"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "33": {
    "filepath": "/device/depreciationModelController.js",
    "controllerName": "depreciationModelController",
    "methodArr": [
      {
        "addDepreciationModel": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, depreciationModelSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new DepreciationModel({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(DepreciationModel, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllDepreciationModel": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(DepreciationModel, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(DepreciationModel, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModel": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(DepreciationModel, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModelCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(DepreciationModel, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getDepreciationModelByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(DepreciationModel, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, depreciationModelSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(DepreciationModel, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new DepreciationModel({ ...params\n      });\n      let result = await dbService.createDocument(DepreciationModel, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "DepreciationModel": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 67,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 67
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 66,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 66
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 23,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 23
                },
                "identifierName": "DepreciationModel"
              },
              "name": "DepreciationModel"
            },
            "init": {
              "type": "CallExpression",
              "start": 26,
              "end": 66,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 66
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 26,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 34,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 34
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/depreciationModel",
                    "raw": "'../../model/depreciationModel'"
                  },
                  "value": "../../model/depreciationModel"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 68,
        "end": 114,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 74,
            "end": 113,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 74,
              "end": 79,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 82,
              "end": 113,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 82,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 90,
                  "end": 112,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "depreciationModelSchemaKey": {
        "type": "VariableDeclaration",
        "start": 115,
        "end": 212,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 97
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 121,
            "end": 211,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 96
              }
            },
            "id": {
              "type": "Identifier",
              "start": 121,
              "end": 147,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 32
                },
                "identifierName": "depreciationModelSchemaKey"
              },
              "name": "depreciationModelSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 150,
              "end": 211,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 35
                },
                "end": {
                  "line": 3,
                  "column": 96
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 150,
                "end": 157,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 35
                  },
                  "end": {
                    "line": 3,
                    "column": 42
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 158,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 43
                    },
                    "end": {
                      "line": 3,
                      "column": 95
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/depreciationModelValidation",
                    "raw": "'../../utils/validation/depreciationModelValidation'"
                  },
                  "value": "../../utils/validation/depreciationModelValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 213,
        "end": 271,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 219,
            "end": 270,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 219,
              "end": 229,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 232,
              "end": 270,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 232,
                "end": 239,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 240,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 323,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 322,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 287,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 290,
              "end": 322,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 290,
                "end": 297,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 298,
                  "end": 321,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "34": {
    "filepath": "/device/enhancementController.js",
    "controllerName": "enhancementController",
    "methodArr": [
      {
        "addEnhancement": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Enhancement({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(Enhancement, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllEnhancement": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Enhancement, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Enhancement, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancement": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Enhancement, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancementCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Enhancement, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getEnhancementByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Enhancement, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, enhancementSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Enhancement, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Enhancement({ ...params\n      });\n      let result = await dbService.createDocument(Enhancement, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Enhancement": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 55,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 55
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 54,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 54
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 17,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 17
                },
                "identifierName": "Enhancement"
              },
              "name": "Enhancement"
            },
            "init": {
              "type": "CallExpression",
              "start": 20,
              "end": 54,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 20
                },
                "end": {
                  "line": 1,
                  "column": 54
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 20,
                "end": 27,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 20
                  },
                  "end": {
                    "line": 1,
                    "column": 27
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 28,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 28
                    },
                    "end": {
                      "line": 1,
                      "column": 53
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/enhancement",
                    "raw": "'../../model/enhancement'"
                  },
                  "value": "../../model/enhancement"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 102,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 101,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 67,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 70,
              "end": 101,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 70,
                "end": 77,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 78,
                  "end": 100,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "enhancementSchemaKey": {
        "type": "VariableDeclaration",
        "start": 103,
        "end": 188,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 85
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 109,
            "end": 187,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 84
              }
            },
            "id": {
              "type": "Identifier",
              "start": 109,
              "end": 129,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 26
                },
                "identifierName": "enhancementSchemaKey"
              },
              "name": "enhancementSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 132,
              "end": 187,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 29
                },
                "end": {
                  "line": 3,
                  "column": 84
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 132,
                "end": 139,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 29
                  },
                  "end": {
                    "line": 3,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 140,
                  "end": 186,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 37
                    },
                    "end": {
                      "line": 3,
                      "column": 83
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/enhancementValidation",
                    "raw": "'../../utils/validation/enhancementValidation'"
                  },
                  "value": "../../utils/validation/enhancementValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 189,
        "end": 247,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 195,
            "end": 246,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 195,
              "end": 205,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 208,
              "end": 246,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 208,
                "end": 215,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 216,
                  "end": 245,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 248,
        "end": 299,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 254,
            "end": 298,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 254,
              "end": 263,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 266,
              "end": 298,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 266,
                "end": 273,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 274,
                  "end": 297,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "35": {
    "filepath": "/device/fileUploadController.js",
    "controllerName": "fileUploadController",
    "methodArr": [
      {
        "upload": "async (req, res) => {\n  try {\n    // Create Directory if not exist.\n    await makeDirectory(defaultDirectory); // Setting up formidable options.\n\n    const form = new formidable.IncomingForm();\n    form.multiples = true;\n    form.maxFileSize = 300 * 1024 * 1024; //300 MB\n\n    form.maxFieldsSize = 100 * 1024 * 1024; //50 MB\n    //Upload File one by one\n\n    const uploadFileRes = await new Promise(async (resolve, reject) => {\n      form.parse(req, async function (err, fields, files) {\n        let filePaths = [];\n        let fileCount = 1;\n        let fileArr = [];\n\n        if (files['file[]'].size == 0) {\n          resolve({\n            'err': 'Please Select any one File',\n            'status': false\n          });\n        }\n\n        if (!Array.isArray(files['file[]'])) {\n          fileArr.push(files['file[]']);\n          files['file[]'] = fileArr;\n        }\n\n        for (let file of files['file[]']) {\n          let response = await uploadFile(file, fields, fileCount++);\n\n          if (response.status == false) {\n            filePaths.push({\n              'name': file.name,\n              'err': response.message,\n              'status': false\n            });\n          } else {\n            let url = response.data;\n\n            if (!validUrl.isUri(response.data)) {\n              response.data = response.data.replace('/public', '');\n              url = req.protocol + '://' + req.headers.host + response.data;\n            }\n\n            filePaths.push({\n              'path': url,\n              'status': true\n            });\n          }\n        }\n\n        resolve(filePaths);\n      });\n    });\n    return utils.successResponse(uploadFileRes, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "makeDirectory": "async directoryPath => {\n  if (!fs.existsSync(directoryPath)) {\n    fs.promises.mkdir(directoryPath, {\n      recursive: true\n    }, err => {\n      if (err) {\n        return false;\n      }\n\n      ;\n      return true;\n    });\n  }\n\n  return true;\n}"
      }
    ],
    "allVariablesInFile": {
      "fs": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 25,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 24,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 24
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 8,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 8
                },
                "identifierName": "fs"
              },
              "name": "fs"
            },
            "init": {
              "type": "CallExpression",
              "start": 11,
              "end": 24,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 11
                },
                "end": {
                  "line": 1,
                  "column": 24
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 11,
                "end": 18,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 11
                  },
                  "end": {
                    "line": 1,
                    "column": 18
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 19,
                  "end": 23,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 19
                    },
                    "end": {
                      "line": 1,
                      "column": 23
                    }
                  },
                  "extra": {
                    "rawValue": "fs",
                    "raw": "'fs'"
                  },
                  "value": "fs"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "path": {
        "type": "VariableDeclaration",
        "start": 26,
        "end": 55,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 32,
            "end": 54,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 28
              }
            },
            "id": {
              "type": "Identifier",
              "start": 32,
              "end": 36,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 10
                },
                "identifierName": "path"
              },
              "name": "path"
            },
            "init": {
              "type": "CallExpression",
              "start": 39,
              "end": 54,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 13
                },
                "end": {
                  "line": 2,
                  "column": 28
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 39,
                "end": 46,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 13
                  },
                  "end": {
                    "line": 2,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 47,
                  "end": 53,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 21
                    },
                    "end": {
                      "line": 2,
                      "column": 27
                    }
                  },
                  "extra": {
                    "rawValue": "path",
                    "raw": "'path'"
                  },
                  "value": "path"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "formidable": {
        "type": "VariableDeclaration",
        "start": 56,
        "end": 97,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 62,
            "end": 96,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 62,
              "end": 72,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 16
                },
                "identifierName": "formidable"
              },
              "name": "formidable"
            },
            "init": {
              "type": "CallExpression",
              "start": 75,
              "end": 96,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 19
                },
                "end": {
                  "line": 3,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 75,
                "end": 82,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 19
                  },
                  "end": {
                    "line": 3,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 83,
                  "end": 95,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 27
                    },
                    "end": {
                      "line": 3,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "formidable",
                    "raw": "'formidable'"
                  },
                  "value": "formidable"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validUrl": {
        "type": "VariableDeclaration",
        "start": 98,
        "end": 136,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 38
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 104,
            "end": 135,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 37
              }
            },
            "id": {
              "type": "Identifier",
              "start": 104,
              "end": 112,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 14
                },
                "identifierName": "validUrl"
              },
              "name": "validUrl"
            },
            "init": {
              "type": "CallExpression",
              "start": 115,
              "end": 135,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 17
                },
                "end": {
                  "line": 4,
                  "column": 37
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 115,
                "end": 122,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 17
                  },
                  "end": {
                    "line": 4,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 123,
                  "end": 134,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 25
                    },
                    "end": {
                      "line": 4,
                      "column": 36
                    }
                  },
                  "extra": {
                    "rawValue": "valid-url",
                    "raw": "'valid-url'"
                  },
                  "value": "valid-url"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "AWS": {
        "type": "VariableDeclaration",
        "start": 137,
        "end": 168,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 31
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 143,
            "end": 167,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 30
              }
            },
            "id": {
              "type": "Identifier",
              "start": 143,
              "end": 146,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 9
                },
                "identifierName": "AWS"
              },
              "name": "AWS"
            },
            "init": {
              "type": "CallExpression",
              "start": 149,
              "end": 167,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 12
                },
                "end": {
                  "line": 5,
                  "column": 30
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 149,
                "end": 156,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 12
                  },
                  "end": {
                    "line": 5,
                    "column": 19
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 157,
                  "end": 166,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 20
                    },
                    "end": {
                      "line": 5,
                      "column": 29
                    }
                  },
                  "extra": {
                    "rawValue": "aws-sdk",
                    "raw": "'aws-sdk'"
                  },
                  "value": "aws-sdk"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 170,
        "end": 216,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 176,
            "end": 215,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 176,
              "end": 181,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 184,
              "end": 215,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 14
                },
                "end": {
                  "line": 7,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 184,
                "end": 191,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 14
                  },
                  "end": {
                    "line": 7,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 192,
                  "end": 214,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 22
                    },
                    "end": {
                      "line": 7,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "defaultDirectory": {
        "type": "VariableDeclaration",
        "start": 218,
        "end": 257,
        "loc": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 39
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 222,
            "end": 256,
            "loc": {
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 38
              }
            },
            "id": {
              "type": "Identifier",
              "start": 222,
              "end": 238,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 20
                },
                "identifierName": "defaultDirectory"
              },
              "name": "defaultDirectory"
            },
            "init": {
              "type": "StringLiteral",
              "start": 241,
              "end": 256,
              "loc": {
                "start": {
                  "line": 9,
                  "column": 23
                },
                "end": {
                  "line": 9,
                  "column": 38
                }
              },
              "extra": {
                "rawValue": "public/assets",
                "raw": "'public/assets'"
              },
              "value": "public/assets"
            }
          }
        ],
        "kind": "let"
      },
      "allowedFileTypes": {
        "type": "VariableDeclaration",
        "start": 258,
        "end": 284,
        "loc": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 26
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 262,
            "end": 283,
            "loc": {
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 25
              }
            },
            "id": {
              "type": "Identifier",
              "start": 262,
              "end": 278,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 20
                },
                "identifierName": "allowedFileTypes"
              },
              "name": "allowedFileTypes"
            },
            "init": {
              "type": "ArrayExpression",
              "start": 281,
              "end": 283,
              "loc": {
                "start": {
                  "line": 10,
                  "column": 23
                },
                "end": {
                  "line": 10,
                  "column": 25
                }
              },
              "elements": []
            }
          }
        ],
        "kind": "let"
      },
      "maxFileSize": {
        "type": "VariableDeclaration",
        "start": 285,
        "end": 305,
        "loc": {
          "start": {
            "line": 11,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 20
          }
        },
        "trailingComments": [
          {
            "type": "CommentLine",
            "value": "In Megabyte",
            "start": 306,
            "end": 319,
            "loc": {
              "start": {
                "line": 11,
                "column": 21
              },
              "end": {
                "line": 11,
                "column": 34
              }
            }
          }
        ],
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 289,
            "end": 304,
            "loc": {
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 19
              }
            },
            "id": {
              "type": "Identifier",
              "start": 289,
              "end": 300,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 15
                },
                "identifierName": "maxFileSize"
              },
              "name": "maxFileSize"
            },
            "init": {
              "type": "NumericLiteral",
              "start": 303,
              "end": 304,
              "loc": {
                "start": {
                  "line": 11,
                  "column": 18
                },
                "end": {
                  "line": 11,
                  "column": 19
                }
              },
              "extra": {
                "rawValue": 5,
                "raw": "5"
              },
              "value": 5
            }
          }
        ],
        "kind": "let"
      }
    }
  },
  "36": {
    "filepath": "/device/masterController.js",
    "controllerName": "masterController",
    "methodArr": [
      {
        "addMaster": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, masterSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Master({ ...req.body\n    });\n    let result = await dbService.createDocument(Master, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllMaster": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Master, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Master, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMaster": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Master, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMasterCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Master, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getMasterByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Master, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, masterSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Master, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Master({ ...params\n      });\n      let result = await dbService.createDocument(Master, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Master": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 45,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 45
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 44,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 44
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 12,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 12
                },
                "identifierName": "Master"
              },
              "name": "Master"
            },
            "init": {
              "type": "CallExpression",
              "start": 15,
              "end": 44,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 15
                },
                "end": {
                  "line": 1,
                  "column": 44
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 15,
                "end": 22,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 15
                  },
                  "end": {
                    "line": 1,
                    "column": 22
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 23,
                  "end": 43,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 43
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/master",
                    "raw": "'../../model/master'"
                  },
                  "value": "../../model/master"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 46,
        "end": 92,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 52,
            "end": 91,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 52,
              "end": 57,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 60,
              "end": 91,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 60,
                "end": 67,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 68,
                  "end": 90,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "masterSchemaKey": {
        "type": "VariableDeclaration",
        "start": 93,
        "end": 168,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 75
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 99,
            "end": 167,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 74
              }
            },
            "id": {
              "type": "Identifier",
              "start": 99,
              "end": 114,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 21
                },
                "identifierName": "masterSchemaKey"
              },
              "name": "masterSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 117,
              "end": 167,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 24
                },
                "end": {
                  "line": 3,
                  "column": 74
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 117,
                "end": 124,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 24
                  },
                  "end": {
                    "line": 3,
                    "column": 31
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 125,
                  "end": 166,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 32
                    },
                    "end": {
                      "line": 3,
                      "column": 73
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/masterValidation",
                    "raw": "'../../utils/validation/masterValidation'"
                  },
                  "value": "../../utils/validation/masterValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 169,
        "end": 227,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 175,
            "end": 226,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 175,
              "end": 185,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 188,
              "end": 226,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 188,
                "end": 195,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 196,
                  "end": 225,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 228,
        "end": 279,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 234,
            "end": 278,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 234,
              "end": 243,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 246,
              "end": 278,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 246,
                "end": 253,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 254,
                  "end": 277,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 280,
        "end": 350,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 286,
            "end": 349,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 286,
              "end": 308,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 311,
              "end": 349,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 311,
                "end": 318,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 319,
                  "end": 348,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "37": {
    "filepath": "/device/propertyAttributeController.js",
    "controllerName": "propertyAttributeController",
    "methodArr": [
      {
        "addPropertyAttribute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, propertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new PropertyAttribute({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(PropertyAttribute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllPropertyAttribute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(PropertyAttribute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(PropertyAttribute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(PropertyAttribute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttributeCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(PropertyAttribute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyAttributeByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(PropertyAttribute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, propertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(PropertyAttribute, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new PropertyAttribute({ ...params\n      });\n      let result = await dbService.createDocument(PropertyAttribute, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "PropertyAttribute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 67,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 67
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 66,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 66
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 23,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 23
                },
                "identifierName": "PropertyAttribute"
              },
              "name": "PropertyAttribute"
            },
            "init": {
              "type": "CallExpression",
              "start": 26,
              "end": 66,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 26
                },
                "end": {
                  "line": 1,
                  "column": 66
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 26,
                "end": 33,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 26
                  },
                  "end": {
                    "line": 1,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 34,
                  "end": 65,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 34
                    },
                    "end": {
                      "line": 1,
                      "column": 65
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/propertyAttribute",
                    "raw": "'../../model/propertyAttribute'"
                  },
                  "value": "../../model/propertyAttribute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 68,
        "end": 114,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 74,
            "end": 113,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 74,
              "end": 79,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 82,
              "end": 113,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 82,
                "end": 89,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 90,
                  "end": 112,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "propertyAttributeSchemaKey": {
        "type": "VariableDeclaration",
        "start": 115,
        "end": 212,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 97
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 121,
            "end": 211,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 96
              }
            },
            "id": {
              "type": "Identifier",
              "start": 121,
              "end": 147,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 32
                },
                "identifierName": "propertyAttributeSchemaKey"
              },
              "name": "propertyAttributeSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 150,
              "end": 211,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 35
                },
                "end": {
                  "line": 3,
                  "column": 96
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 150,
                "end": 157,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 35
                  },
                  "end": {
                    "line": 3,
                    "column": 42
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 158,
                  "end": 210,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 43
                    },
                    "end": {
                      "line": 3,
                      "column": 95
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/propertyAttributeValidation",
                    "raw": "'../../utils/validation/propertyAttributeValidation'"
                  },
                  "value": "../../utils/validation/propertyAttributeValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 213,
        "end": 271,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 219,
            "end": 270,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 219,
              "end": 229,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 232,
              "end": 270,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 232,
                "end": 239,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 240,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 323,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 322,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 287,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 290,
              "end": 322,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 290,
                "end": 297,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 298,
                  "end": 321,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 324,
        "end": 394,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 330,
            "end": 393,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 330,
              "end": 352,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 355,
              "end": 393,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 355,
                "end": 362,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 363,
                  "end": 392,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "38": {
    "filepath": "/device/propertyController.js",
    "controllerName": "propertyController",
    "methodArr": [
      {
        "addProperty": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, propertySchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new Property({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(Property, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllProperty": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(Property, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(Property, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getProperty": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(Property, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(Property, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getPropertyByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(Property, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, propertySchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(Property, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new Property({ ...params\n      });\n      let result = await dbService.createDocument(Property, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "Property": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 49,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 48,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 48
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 14,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 14
                },
                "identifierName": "Property"
              },
              "name": "Property"
            },
            "init": {
              "type": "CallExpression",
              "start": 17,
              "end": 48,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 17
                },
                "end": {
                  "line": 1,
                  "column": 48
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 17,
                "end": 24,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 17
                  },
                  "end": {
                    "line": 1,
                    "column": 24
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 25,
                  "end": 47,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 25
                    },
                    "end": {
                      "line": 1,
                      "column": 47
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/property",
                    "raw": "'../../model/property'"
                  },
                  "value": "../../model/property"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 50,
        "end": 96,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 56,
            "end": 95,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 56,
              "end": 61,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 64,
              "end": 95,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 64,
                "end": 71,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 72,
                  "end": 94,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "propertySchemaKey": {
        "type": "VariableDeclaration",
        "start": 97,
        "end": 176,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 79
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 103,
            "end": 175,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 78
              }
            },
            "id": {
              "type": "Identifier",
              "start": 103,
              "end": 120,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 23
                },
                "identifierName": "propertySchemaKey"
              },
              "name": "propertySchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 123,
              "end": 175,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 26
                },
                "end": {
                  "line": 3,
                  "column": 78
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 123,
                "end": 130,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 26
                  },
                  "end": {
                    "line": 3,
                    "column": 33
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 131,
                  "end": 174,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 34
                    },
                    "end": {
                      "line": 3,
                      "column": 77
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/propertyValidation",
                    "raw": "'../../utils/validation/propertyValidation'"
                  },
                  "value": "../../utils/validation/propertyValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 177,
        "end": 235,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 183,
            "end": 234,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 183,
              "end": 193,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 196,
              "end": 234,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 196,
                "end": 203,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 204,
                  "end": 233,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 236,
        "end": 287,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 242,
            "end": 286,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 242,
              "end": 251,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 254,
              "end": 286,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 254,
                "end": 261,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 262,
                  "end": 285,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 288,
        "end": 358,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 294,
            "end": 357,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 294,
              "end": 316,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 319,
              "end": 357,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 319,
                "end": 326,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 327,
                  "end": 356,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "39": {
    "filepath": "/device/subPropertyAttributeController.js",
    "controllerName": "subPropertyAttributeController",
    "methodArr": [
      {
        "addSubPropertyAttribute": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, subPropertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new SubPropertyAttribute({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(SubPropertyAttribute, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllSubPropertyAttribute": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.countDocument(SubPropertyAttribute, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      result = await dbService.getAllDocuments(SubPropertyAttribute, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttribute": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(SubPropertyAttribute, query);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttributeCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(SubPropertyAttribute, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getSubPropertyAttributeByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(SubPropertyAttribute, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, subPropertyAttributeSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(SubPropertyAttribute, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new SubPropertyAttribute({ ...params\n      });\n      let result = await dbService.createDocument(SubPropertyAttribute, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "SubPropertyAttribute": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 73,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 73
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 72,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 72
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 26,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 26
                },
                "identifierName": "SubPropertyAttribute"
              },
              "name": "SubPropertyAttribute"
            },
            "init": {
              "type": "CallExpression",
              "start": 29,
              "end": 72,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 29
                },
                "end": {
                  "line": 1,
                  "column": 72
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 29,
                "end": 36,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 29
                  },
                  "end": {
                    "line": 1,
                    "column": 36
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 37,
                  "end": 71,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 37
                    },
                    "end": {
                      "line": 1,
                      "column": 71
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/subPropertyAttribute",
                    "raw": "'../../model/subPropertyAttribute'"
                  },
                  "value": "../../model/subPropertyAttribute"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 74,
        "end": 120,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 80,
            "end": 119,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 80,
              "end": 85,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 88,
              "end": 119,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 88,
                "end": 95,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 96,
                  "end": 118,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "subPropertyAttributeSchemaKey": {
        "type": "VariableDeclaration",
        "start": 121,
        "end": 224,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 103
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 127,
            "end": 223,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 102
              }
            },
            "id": {
              "type": "Identifier",
              "start": 127,
              "end": 156,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 35
                },
                "identifierName": "subPropertyAttributeSchemaKey"
              },
              "name": "subPropertyAttributeSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 159,
              "end": 223,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 38
                },
                "end": {
                  "line": 3,
                  "column": 102
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 159,
                "end": 166,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 38
                  },
                  "end": {
                    "line": 3,
                    "column": 45
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 167,
                  "end": 222,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 46
                    },
                    "end": {
                      "line": 3,
                      "column": 101
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/subPropertyAttributeValidation",
                    "raw": "'../../utils/validation/subPropertyAttributeValidation'"
                  },
                  "value": "../../utils/validation/subPropertyAttributeValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 225,
        "end": 283,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 231,
            "end": 282,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 231,
              "end": 241,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 244,
              "end": 282,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 244,
                "end": 251,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 252,
                  "end": 281,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 284,
        "end": 335,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 290,
            "end": 334,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 290,
              "end": 299,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 302,
              "end": 334,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 302,
                "end": 309,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 310,
                  "end": 333,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 336,
        "end": 406,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 342,
            "end": 405,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 342,
              "end": 364,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 367,
              "end": 405,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 31
                },
                "end": {
                  "line": 6,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 367,
                "end": 374,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 31
                  },
                  "end": {
                    "line": 6,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 375,
                  "end": 404,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 39
                    },
                    "end": {
                      "line": 6,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  },
  "40": {
    "filepath": "/device/userController.js",
    "controllerName": "userController",
    "methodArr": [
      {
        "addUser": "async (req, res) => {\n  try {\n    let isValid = validation.validateParamsWithJoi(req.body, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    let data = new User({ ...req.body,\n      addedBy: req.user.id\n    });\n    let result = await dbService.createDocument(User, data);\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "findAllUser": "async (req, res) => {\n  try {\n    let options = {};\n    let query = {};\n    let result;\n\n    if (req.body.isCountOnly) {\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      if (req.user) {\n        query = { ...query,\n          ...{\n            '_id': {\n              $ne: req.user.id\n            }\n          }\n        };\n\n        if (req.body.query._id) {\n          Object.assign(query._id, {\n            $in: [req.body.query._id]\n          });\n        }\n      } else {\n        return util.badRequest({}, res);\n      }\n\n      result = await dbService.countDocument(User, query);\n\n      if (result) {\n        result = {\n          totalRecords: result\n        };\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound([], res);\n    } else {\n      if (req.body.options !== undefined) {\n        /*\n         * if(req.body.options.populate){\n         *   delete req.body.options.populate;\n         * }\n         */\n        options = { ...req.body.options\n        };\n      }\n\n      if (!options.populate) options.populate = [];\n      options.populate = options.populate.concat([{\n        path: 'properties'\n      }, {\n        path: 'subProperties'\n      }]);\n\n      if (req.body.query !== undefined) {\n        query = { ...req.body.query\n        };\n      }\n\n      if (req.user) {\n        query = { ...query,\n          ...{\n            '_id': {\n              $ne: req.user.id\n            }\n          }\n        };\n\n        if (req.body.query._id) {\n          Object.assign(query._id, {\n            $in: [req.body.query._id]\n          });\n        }\n      }\n\n      result = await dbService.getAllDocuments(User, query, options);\n\n      if (result && result.data && result.data.length) {\n        return utils.successResponse(result, res);\n      }\n\n      return utils.recordNotFound({}, res);\n    }\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUser": "async (req, res) => {\n  try {\n    let query = {};\n    query._id = req.params.id;\n    let result = await dbService.getDocumentByQuery(User, query);\n\n    if (result) {\n      result = await result.populate([{\n        'path': 'properties'\n      }, {\n        'path': 'subProperties'\n      }]).execPopulate();\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserCount": "async (req, res) => {\n  try {\n    let where = {};\n\n    if (req.body.where) {\n      where = req.body.where;\n    }\n\n    let result = await dbService.countDocument(User, where);\n\n    if (result) {\n      result = {\n        totalRecords: result\n      };\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound({}, res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "getUserByAggregate": "async (req, res) => {\n  try {\n    let result = await dbService.getDocumentByAggregation(User, req.body);\n\n    if (result) {\n      return utils.successResponse(result, res);\n    }\n\n    return utils.recordNotFound([], res);\n  } catch (error) {\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "upsert": "async (req, res) => {\n  try {\n    let params = req.body;\n    let isValid = validation.validateParamsWithJoi(params, userSchemaKey.schemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (params.id) {\n      let where = params.id;\n      ['id', 'createdAt', 'updatedAt'].forEach(e => delete params[e]);\n      let result = await dbService.updateDocument(User, where, params);\n\n      if (!result) {\n        utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    } else {\n      let data = new User({ ...params\n      });\n      let result = await dbService.createDocument(User, data);\n\n      if (!result) {\n        return utils.failureResponse('something is wrong', res);\n      }\n\n      return utils.successResponse(result, res);\n    }\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.validationError(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      },
      {
        "changePassword": "async (req, res) => {\n  try {\n    let params = req.body;\n\n    if (!params.newPassword || !req.user.id || !params.oldPassword) {\n      return utils.inValidParam('Please Provide userId and new Password and Old password', res);\n    }\n\n    let result = await auth.changePassword({ ...params,\n      userId: req.user.id\n    });\n\n    if (result.flag) {\n      return utils.invalidRequest(result.data, res);\n    }\n\n    return utils.requestValidated(result.data, res);\n  } catch (error) {\n    return utils.failureResponse(error, res);\n  }\n}"
      },
      {
        "updateProfile": "async (req, res) => {\n  try {\n    let data = { ...req.body,\n      id: req.user.id\n    };\n    let isValid = validation.validateParamsWithJoi(data, userSchemaKey.updateSchemaKeys);\n\n    if (isValid.error) {\n      return utils.inValidParam(isValid.error, res);\n    }\n\n    if (data.password) delete data.password;\n    if (data.createdAt) delete data.createdAt;\n    if (data.updatedAt) delete data.updatedAt;\n    if (data.id) delete data.id;\n    let result = await dbService.findOneAndUpdateDocument(User, {\n      _id: req.user.id\n    }, data, {\n      new: true\n    });\n\n    if (!result) {\n      return utils.failureResponse('something is wrong', res);\n    }\n\n    return utils.successResponse(result, res);\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    if (error.code && error.code == 11000) {\n      return utils.isDuplicate(error.message, res);\n    }\n\n    return utils.failureResponse(error.message, res);\n  }\n}"
      }
    ],
    "allVariablesInFile": {
      "User": {
        "type": "VariableDeclaration",
        "start": 0,
        "end": 41,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 41
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 6,
            "end": 40,
            "loc": {
              "start": {
                "line": 1,
                "column": 6
              },
              "end": {
                "line": 1,
                "column": 40
              }
            },
            "id": {
              "type": "Identifier",
              "start": 6,
              "end": 10,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 6
                },
                "end": {
                  "line": 1,
                  "column": 10
                },
                "identifierName": "User"
              },
              "name": "User"
            },
            "init": {
              "type": "CallExpression",
              "start": 13,
              "end": 40,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 13
                },
                "end": {
                  "line": 1,
                  "column": 40
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 13,
                "end": 20,
                "loc": {
                  "start": {
                    "line": 1,
                    "column": 13
                  },
                  "end": {
                    "line": 1,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 21,
                  "end": 39,
                  "loc": {
                    "start": {
                      "line": 1,
                      "column": 21
                    },
                    "end": {
                      "line": 1,
                      "column": 39
                    }
                  },
                  "extra": {
                    "rawValue": "../../model/user",
                    "raw": "'../../model/user'"
                  },
                  "value": "../../model/user"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "utils": {
        "type": "VariableDeclaration",
        "start": 42,
        "end": 88,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 46
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 48,
            "end": 87,
            "loc": {
              "start": {
                "line": 2,
                "column": 6
              },
              "end": {
                "line": 2,
                "column": 45
              }
            },
            "id": {
              "type": "Identifier",
              "start": 48,
              "end": 53,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 6
                },
                "end": {
                  "line": 2,
                  "column": 11
                },
                "identifierName": "utils"
              },
              "name": "utils"
            },
            "init": {
              "type": "CallExpression",
              "start": 56,
              "end": 87,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 14
                },
                "end": {
                  "line": 2,
                  "column": 45
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 56,
                "end": 63,
                "loc": {
                  "start": {
                    "line": 2,
                    "column": 14
                  },
                  "end": {
                    "line": 2,
                    "column": 21
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 64,
                  "end": 86,
                  "loc": {
                    "start": {
                      "line": 2,
                      "column": 22
                    },
                    "end": {
                      "line": 2,
                      "column": 44
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/messages",
                    "raw": "'../../utils/messages'"
                  },
                  "value": "../../utils/messages"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "userSchemaKey": {
        "type": "VariableDeclaration",
        "start": 89,
        "end": 160,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 71
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 95,
            "end": 159,
            "loc": {
              "start": {
                "line": 3,
                "column": 6
              },
              "end": {
                "line": 3,
                "column": 70
              }
            },
            "id": {
              "type": "Identifier",
              "start": 95,
              "end": 108,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 6
                },
                "end": {
                  "line": 3,
                  "column": 19
                },
                "identifierName": "userSchemaKey"
              },
              "name": "userSchemaKey"
            },
            "init": {
              "type": "CallExpression",
              "start": 111,
              "end": 159,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 22
                },
                "end": {
                  "line": 3,
                  "column": 70
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 111,
                "end": 118,
                "loc": {
                  "start": {
                    "line": 3,
                    "column": 22
                  },
                  "end": {
                    "line": 3,
                    "column": 29
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 119,
                  "end": 158,
                  "loc": {
                    "start": {
                      "line": 3,
                      "column": 30
                    },
                    "end": {
                      "line": 3,
                      "column": 69
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validation/userValidation",
                    "raw": "'../../utils/validation/userValidation'"
                  },
                  "value": "../../utils/validation/userValidation"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "validation": {
        "type": "VariableDeclaration",
        "start": 161,
        "end": 219,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 58
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 167,
            "end": 218,
            "loc": {
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 4,
                "column": 57
              }
            },
            "id": {
              "type": "Identifier",
              "start": 167,
              "end": 177,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 6
                },
                "end": {
                  "line": 4,
                  "column": 16
                },
                "identifierName": "validation"
              },
              "name": "validation"
            },
            "init": {
              "type": "CallExpression",
              "start": 180,
              "end": 218,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 19
                },
                "end": {
                  "line": 4,
                  "column": 57
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 180,
                "end": 187,
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 19
                  },
                  "end": {
                    "line": 4,
                    "column": 26
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 188,
                  "end": 217,
                  "loc": {
                    "start": {
                      "line": 4,
                      "column": 27
                    },
                    "end": {
                      "line": 4,
                      "column": 56
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/validateRequest",
                    "raw": "'../../utils/validateRequest'"
                  },
                  "value": "../../utils/validateRequest"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "dbService": {
        "type": "VariableDeclaration",
        "start": 220,
        "end": 271,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 51
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 226,
            "end": 270,
            "loc": {
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 5,
                "column": 50
              }
            },
            "id": {
              "type": "Identifier",
              "start": 226,
              "end": 235,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 6
                },
                "end": {
                  "line": 5,
                  "column": 15
                },
                "identifierName": "dbService"
              },
              "name": "dbService"
            },
            "init": {
              "type": "CallExpression",
              "start": 238,
              "end": 270,
              "loc": {
                "start": {
                  "line": 5,
                  "column": 18
                },
                "end": {
                  "line": 5,
                  "column": 50
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 238,
                "end": 245,
                "loc": {
                  "start": {
                    "line": 5,
                    "column": 18
                  },
                  "end": {
                    "line": 5,
                    "column": 25
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 246,
                  "end": 269,
                  "loc": {
                    "start": {
                      "line": 5,
                      "column": 26
                    },
                    "end": {
                      "line": 5,
                      "column": 49
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/dbService",
                    "raw": "'../../utils/dbService'"
                  },
                  "value": "../../utils/dbService"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "auth": {
        "type": "VariableDeclaration",
        "start": 272,
        "end": 316,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 44
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 278,
            "end": 315,
            "loc": {
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 43
              }
            },
            "id": {
              "type": "Identifier",
              "start": 278,
              "end": 282,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 6,
                  "column": 10
                },
                "identifierName": "auth"
              },
              "name": "auth"
            },
            "init": {
              "type": "CallExpression",
              "start": 285,
              "end": 315,
              "loc": {
                "start": {
                  "line": 6,
                  "column": 13
                },
                "end": {
                  "line": 6,
                  "column": 43
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 285,
                "end": 292,
                "loc": {
                  "start": {
                    "line": 6,
                    "column": 13
                  },
                  "end": {
                    "line": 6,
                    "column": 20
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 293,
                  "end": 314,
                  "loc": {
                    "start": {
                      "line": 6,
                      "column": 21
                    },
                    "end": {
                      "line": 6,
                      "column": 42
                    }
                  },
                  "extra": {
                    "rawValue": "../../services/auth",
                    "raw": "'../../services/auth'"
                  },
                  "value": "../../services/auth"
                }
              ]
            }
          }
        ],
        "kind": "const"
      },
      "deleteDependentService": {
        "type": "VariableDeclaration",
        "start": 317,
        "end": 387,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 70
          }
        },
        "declarations": [
          {
            "type": "VariableDeclarator",
            "start": 323,
            "end": 386,
            "loc": {
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 7,
                "column": 69
              }
            },
            "id": {
              "type": "Identifier",
              "start": 323,
              "end": 345,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 6
                },
                "end": {
                  "line": 7,
                  "column": 28
                },
                "identifierName": "deleteDependentService"
              },
              "name": "deleteDependentService"
            },
            "init": {
              "type": "CallExpression",
              "start": 348,
              "end": 386,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 31
                },
                "end": {
                  "line": 7,
                  "column": 69
                }
              },
              "callee": {
                "type": "Identifier",
                "start": 348,
                "end": 355,
                "loc": {
                  "start": {
                    "line": 7,
                    "column": 31
                  },
                  "end": {
                    "line": 7,
                    "column": 38
                  },
                  "identifierName": "require"
                },
                "name": "require"
              },
              "arguments": [
                {
                  "type": "StringLiteral",
                  "start": 356,
                  "end": 385,
                  "loc": {
                    "start": {
                      "line": 7,
                      "column": 39
                    },
                    "end": {
                      "line": 7,
                      "column": 68
                    }
                  },
                  "extra": {
                    "rawValue": "../../utils/deleteDependent",
                    "raw": "'../../utils/deleteDependent'"
                  },
                  "value": "../../utils/deleteDependent"
                }
              ]
            }
          }
        ],
        "kind": "const"
      }
    }
  }
}