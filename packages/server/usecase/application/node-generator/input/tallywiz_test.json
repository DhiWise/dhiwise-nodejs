{
    "directoryStructure": {
        "root": "projectTwo",
        "mainJsFile": "src/app.js",
        "model": "src/models",
        "controller": "src/controllers",
        "constant": "src/config/constant",
        "configuration": "src/config",
        "routes": "src/routes",
        "envFiles": ".env",
        "service": "src/services",
        "middleware": "src/middlewares",
        "dbConnectionFile": "src/config/db.js"
    },
    "envVariables": {
        "environments": [
            "DEVELOPMENT"
        ],
        "customJson": [
            {
                "value": {
                    "DEVELOPMENT": "development"
                },
                "key": "NODE_ENV",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "3001"
                },
                "key": "PORT",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "mongodb://192.168.0.15:40017/TallyWiz"
                },
                "key": "MONGODB_URL",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "TallyWizTestDevLocalAdmin"
                },
                "key": "MONGODB_USER",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "Z96wcEDbz4A8ESmQCBkjLQwyMWeBZqN44bj"
                },
                "key": "MONGODB_PASS",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "ADSBVNCBJKCNJKDJNKLADSNKJADNOE32347973298JDASBJHADSBHJ"
                },
                "key": "JWT_SECRET",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "30"
                },
                "key": "JWT_ACCESS_EXPIRATION_MINUTES",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "30"
                },
                "key": "JWT_REFRESH_EXPIRATION_DAYS",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "2000191858"
                },
                "key": "GUPSHUB_USERNAME",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "Jhyg$#fr(J444"
                },
                "key": "GUPSHUB_PASSWORD",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "postmaster@www.democ.in"
                },
                "key": "SENDGRID_USER",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "2d337c40573fe319ff272e1a984dd689-d5e69b0b-43d1c801"
                },
                "key": "SENDGRID_PASSWORD",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "http://192.168.0.227:3001"
                },
                "key": "URL",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "ZDU4MDdkZjktMmQwMS00NTBjLWJiOTMtYzM4NmYwNmI0NDE0"
                },
                "key": "ONE_SIGNAL_APP_ID",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "15c6ea8e-bea4-41f3-81c4-54b5ea45935a"
                },
                "key": "ONE_SIGNAL_KEY",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "1000.63895d54f666d82bc1871394b75e428a.383e1e4042c5f166bd85953cb7aeb8f9"
                },
                "key": "ZOHO_SUBSCRIPTION_CODE",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "1000.CM65TY6OCD9QV33RPCOKEKCC3COQEM"
                },
                "key": "ZOHO_CLIENT_ID",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "daa8dea692a63b2b05c2cd460da41606b400abb551"
                },
                "key": "ZOHO_CLIENT_SECRET",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "http://localhost:3000"
                },
                "key": "ZOHO_CALLBACK_URL",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "60009412783"
                },
                "key": "ZOHO_ORGANIZATION_ID",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "https://accounts.zoho.in/oauth/v2/"
                },
                "key": "ZOHO_AUTH_API_END_POINT",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "https://subscriptions.zoho.in/api/v1/"
                },
                "key": "ZOHO_SUBSCRIPTIONS_API_END_POINT",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "FALSE"
                },
                "key": "ZOHO_TOKEN_SAVE",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "https://www.tallywiz.co"
                },
                "key": "ZOHO_REDIRECT_URL",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "1000.2c5bc9536e46857fdf7aa5e9916fafc4.5d5f92a78586eab3889597be7a12c757"
                },
                "key": "ZOHO_REFRESH_TOKEN",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "http://127.0.0.1:3001/user/zoho/payment-redirect"
                },
                "key": "ZOHO_PAYMENT_REDIRECT_URL",
                "dataType": ""
            },
            {
                "value": {
                    "DEVELOPMENT": "http://127.0.0.1:3001/user/zoho/addon-purchase-redirect"
                },
                "key": "ZOHO_ADDON_PAYMENT_REDIRECT_URL",
                "dataType": ""
            }
        ]
    },
    "authentication": {
        "authModule": "",
        "platform": [
            "general"
        ],
        "isAuthentication": false
    },
    "id": "Tallywiz",
    "projectType": "MVC",
    "config": {
        "port": 5000,
        "databaseName": "local",
        "projectName": "Tallywiz",
        "path": "/home/vaidehisoni/Documents/Output"
    },
    "constants": {
        "common": {
            "COMMON": {
                "USER_MASTER_OTP": "7030",
                "USER_ENABLE_MASTER_OTP": true
            },
            "VALID_MIME_TYPES": [
                "image/png",
                "image/jpeg",
                "image / jpeg",
                "image/jpeg",
                "application/pdf",
                "application/msword",
                "application / msword"
            ]
        },
        "file": {
            "services": {
                "file": {
                    "maxMegaBytes": 22,
                    "validFileTypes": [
                        ".jpeg",
                        ".jpg",
                        ".bmp",
                        ".gif",
                        ".png",
                        ".tif",
                        ".txt",
                        ".rtf",
                        ".doc",
                        ".docx",
                        ".xls",
                        ".xlsx",
                        ".ppt",
                        ".odt",
                        ".odt",
                        ".ods",
                        ".odp"
                    ],
                    "defaultDestinations": "images"
                }
            },
            "ALLOWED_FILE_TYPE": {
                "PDF": [
                    "application/pdf"
                ],
                "CSV": [
                    "text/csv"
                ],
                "XLS": [
                    "application/vnd.ms-excel",
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ],
                "JPG": [
                    "image/jpg"
                ],
                "JPEG": [
                    "image/jpeg"
                ],
                "PNG": [
                    "image/png"
                ]
            },
            "S3": {
                "bucketName": "tally-wiz",
                "versionBucketName": "tallywiz",
                "region": "ap-south-1",
                "accessKeyId": "AKIAWM7VSTDL7YTLU5VQ",
                "secretAccessKey": "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",
                "parentFolderName": "tallyWizDocs",
                "baseUrl": "https://tally-wiz.s3.ap-south-1.amazonaws.com/",
                "versionBaseUrl": "https://tallywiz.s3.ap-south-1.amazonaws.com/"
            },
            "FOLDER_NAME": [
                "Transaction",
                "Ledger",
                "Process-Document"
            ]
        },
        "payment": {
            "STATUS": {
                "captured": 1,
                "expired": 2,
                "failed": 3,
                "canceled": 4,
                "pending": 5,
                "refunded": 6,
                "succeeded": 7,
                "paid": 8
            },
            "TRANSACTION_TYPE": {
                "CREDIT": 1,
                "DEBIT": 2,
                "REFUND": 3,
                "SUBSCRIPTION": 4
            },
            "MESSAGE": {
                "CARD_VERIFY_AMOUNT": "Transaction to verify customer card.",
                "FAILED_PAYMENT_CHARGE": "Transaction on the failed of the payment.",
                "CREDIT_WALLET_DONE": "Added to wallet",
                "NEW_CUSTOMER_WALLET_CREDIT": "System credited wallet",
                "CREDIT_WALLET_PENDING": "Pending wallet",
                "PLAN_BUY_DONE": "Transaction on the completion of buying the plan",
                "REFUND_BOOK_PLAN": "Transaction on refund for the plan",
                "EXPIRE_PAYMENT": "Transaction is expire.",
                "CREDIT_WALLET_FAILED": "Failed to add amount in wallet",
                "EXTRA_TIME_PLAN_PAYMENT": "Transaction for extra taken time from the plan",
                "BONUS_CREDIT": "Bonus credited in wallet",
                "RIDE_REQUEST_PENDING_CHARGE": "Transaction on the pending of the payment.",
                "BONUS_FILE_CREDIT": "Bonus credited in file credit"
            },
            "PAYTM_CREDENTIALS": {
                "PAYTM_MID": "oNMLVZ33603448087317",
                "PAYTM_WEBSITE": "WEBSTAGING",
                "PAYTM_CHANNEL_ID": "WEB",
                "PAYTM_INDUSTRY_TYPE_ID": "Retail",
                "PAYTM_MERCHANT_KEY": "aiPsGZU8Yet32wtl",
                "PAYTM_CALLBACK_URL": "https://securegw-stage.paytm.in/order/process",
                "PAYTM_TRANSACTION_STATUS_URL": "https://securegw-stage.paytm.in/order/status"
            },
            "PAYMENT_STATUS": {
                "SUCCESS": "TXN_SUCCESS",
                "FAILURE": "TXN_FAILURE",
                "PENDING": "PENDING"
            },
            "TRANSACTION_LOG": {
                "STATUS": {
                    "CARD_VERIFY": 1,
                    "FILE_PAYMENT": 2,
                    "FAILED_PAYMENT_CHARGE": 4,
                    "REFUND": 5,
                    "WALLET_CREDIT": 6,
                    "WALLET_DEBIT": 7,
                    "RIDE_DEPOSIT": 8,
                    "PROMO_CODE_WALLET": 9,
                    "FILE_CREDIT": 10,
                    "FILE_DEBIT": 11
                },
                "REMARK": {
                    "ADD_WALLET_BY_ADMIN": "Wallet added by Admin",
                    "ADD_WALLET_BY_DISTRIBUTOR": "Wallet added by Distributor"
                }
            },
            "SERVICE_TYPE": {
                "FILE": 1,
                "RUPPEES": 2
            },
            "SERIES_GENERATOR_TYPE": {
                "TRANSACTION_ID": 1
            }
        },
        "spTransactionTemplate": {
            "WITHOUT_ITEM_MAPPING": [
                {
                    "label": "Voucher No",
                    "value": "voucherNo"
                },
                {
                    "label": "Reference No",
                    "value": "referenceNo"
                },
                {
                    "label": "Date",
                    "value": "date"
                },
                {
                    "label": "Party A/c Name",
                    "value": "partyLedger"
                },
                {
                    "label": "GST No",
                    "value": "gstNum"
                },
                {
                    "label": "Particulars",
                    "value": "particulars"
                },
                {
                    "label": "Description",
                    "value": "description"
                },
                {
                    "label": "Rate",
                    "value": "rate"
                },
                {
                    "label": "Amount",
                    "value": "amount"
                },
                {
                    "label": "SGST",
                    "value": "sgstAmount"
                },
                {
                    "label": "CGST",
                    "value": "cgstAmount"
                },
                {
                    "label": "IGST",
                    "value": "igstAmount"
                },
                {
                    "label": "Total Amount",
                    "value": "total"
                },
                {
                    "label": "Narration",
                    "value": "narration"
                }
            ],
            "WITH_ITEM_MAPPING": [
                {
                    "label": "Supplier Invoice Number",
                    "value": "voucherNo"
                },
                {
                    "label": "Date",
                    "value": "date"
                },
                {
                    "label": "GST No",
                    "value": "gstNum"
                },
                {
                    "label": "Party A/c Name",
                    "value": "partyLedger"
                },
                {
                    "label": "Place Of supply",
                    "value": "placeOfsupply"
                },
                {
                    "label": "Sales/Purchase Account",
                    "value": "salesLedger"
                },
                {
                    "label": "Item Name",
                    "value": "itemName"
                },
                {
                    "label": "Quantity",
                    "value": "quantity"
                },
                {
                    "label": "Rate",
                    "value": "rate"
                },
                {
                    "label": "Amount",
                    "value": "amount"
                },
                {
                    "label": "Item Narration",
                    "value": "itemNarration"
                },
                {
                    "label": "Ledger",
                    "value": "ledger"
                },
                {
                    "label": "Ledger Amount",
                    "value": "ledgerAmount"
                },
                {
                    "label": "Ledger Narration",
                    "value": "ledgerNarration"
                },
                {
                    "label": "SGST",
                    "value": "sgstAmount"
                },
                {
                    "label": "CGST",
                    "value": "cgstAmount"
                },
                {
                    "label": "IGST",
                    "value": "igstAmount"
                },
                {
                    "label": "Total Amount",
                    "value": "total"
                },
                {
                    "label": "Customer/Vendor Name",
                    "value": "partyName"
                },
                {
                    "label": "Narration",
                    "value": "narration"
                }
            ]
        }
    },
    "models": {},
    "modelVariables": {
        "Document": [
            "const {\n  convertObjectToEnum\n} = require('../utils/common');",
            "const {\n  DOC_TYPE,\n  DOC_STATUS,\n  DOC_ENTRY_TYPE\n} = require('../config/constant');"
        ],
        "Items": [
            "const {\n  VOUCHER_FROM,\n  TALLY_STATUS\n} = require('../config/constant');"
        ],
        "MarketingMaterial": [
            "const {\n  MARKETING_CATEGORY\n} = require('../config/constant');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "Master": [],
        "Payment": [
            "const PAYMENT_STATUS = require('../config/constant/payment');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "Purchase": [
            "const {\n  SP_TRANSACTION_TYPE,\n  TALLY_STATUS\n} = require('../config/constant');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "SPTransaction_Temp": [
            "const {\n  TRANSACTION_TYPE,\n  TALLY_STATUS\n} = require('../config/constant');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "Sales": [
            "const {\n  TRANSACTION_TYPE,\n  TALLY_STATUS,\n  SP_TRANSACTION_TYPE\n} = require('../config/constant');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "transactionKeys": [
            "const {\n  TRANSACTION_TYPE,\n  SP_TRANSACTION_TYPE\n} = require('../config/constant');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "Transactions": [
            "const {\n  TRANSACTION_TYPE,\n  TALLY_STATUS\n} = require('../config/constant');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "User": [
            "const {\n  roles\n} = require('../config/roles');"
        ],
        "UserHistory": [
            "const {\n  USER_ROLE,\n  USER_TYPE,\n  DEFAULT_ROLE,\n  DEFAULT_USER_TYPE,\n  KEY\n} = require('../config/constant');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "Voucher": [
            "const {\n  SP_TRANSACTION_TYPE,\n  TALLY_STATUS,\n  VOUCHER_FROM\n} = require('../config/constant');",
            "const {\n  convertObjectToEnum\n} = require('../utils/common');"
        ],
        "ZohoSubscriptions": [
            "const {\n  ZOHO_SUBSCRIPTIONS_PLAN_STATUS\n} = require('../config/constant');"
        ]
    },
    "validationVariables": {
        "Document": [
            "const {\n  convertObjectToEnum\n} = require(\"../common\");",
            "const {\n  DOC_TYPE,\n  DOC_STATUS,\n  DOC_ENTRY_TYPE\n} = require(\"../../src/config/constant\");"
        ],
        "Items": [
            "const {\n  VOUCHER_FROM,\n  TALLY_STATUS\n} = require(\"../../src/config/constant\");"
        ],
        "MarketingMaterial": [
            "const {\n  MARKETING_CATEGORY\n} = require(\"../../src/config/constant\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "Master": [],
        "Payment": [
            "const PAYMENT_STATUS = require(\"../../src/config/constant/payment\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "Purchase": [
            "const {\n  SP_TRANSACTION_TYPE,\n  TALLY_STATUS\n} = require(\"../../src/config/constant\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "SPTransaction_Temp": [
            "const {\n  TRANSACTION_TYPE,\n  TALLY_STATUS\n} = require(\"../../src/config/constant\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "Sales": [
            "const {\n  TRANSACTION_TYPE,\n  TALLY_STATUS,\n  SP_TRANSACTION_TYPE\n} = require(\"../../src/config/constant\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "transactionKeys": [
            "const {\n  TRANSACTION_TYPE,\n  SP_TRANSACTION_TYPE\n} = require(\"../../src/config/constant\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "Transactions": [
            "const {\n  TRANSACTION_TYPE,\n  TALLY_STATUS\n} = require(\"../../src/config/constant\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "User": [
            "const {\n  roles\n} = require(\"../../src/config/roles\");"
        ],
        "UserHistory": [
            "const {\n  USER_ROLE,\n  USER_TYPE,\n  DEFAULT_ROLE,\n  DEFAULT_USER_TYPE,\n  KEY\n} = require(\"../../src/config/constant\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "Voucher": [
            "const {\n  SP_TRANSACTION_TYPE,\n  TALLY_STATUS,\n  VOUCHER_FROM\n} = require(\"../../src/config/constant\");",
            "const {\n  convertObjectToEnum\n} = require(\"../common\");"
        ],
        "ZohoSubscriptions": [
            "const {\n  ZOHO_SUBSCRIPTIONS_PLAN_STATUS\n} = require(\"../../src/config/constant\");"
        ]
    },
    "policy": {
        "auth": {
            "functionName": "auth",
            "code": "const passport = require('passport');\n\nconst {\n  ROLE_RIGHTS,\n  USER_ROLE\n} = require('../config/constant');\n\nconst MESSAGE = require('../config/message').message;\n\nconst verifyCallback = (req, resolve, reject, requiredRights) => async (err, user, info) => {\n  console.log('err :>> ', err);\n\n  if (err || info || !user) {\n    return reject(MESSAGE.FORBIDDEN);\n  }\n\n  req.user = user;\n\n  if (!user.isActive) {\n    return reject(MESSAGE.USER_DEACTIVATE);\n  }\n\n  if (requiredRights.length) {\n    if (USER_ROLE.USER === user.role) {\n      const userRights = ROLE_RIGHTS[user.role];\n      const hasRequiredRights = requiredRights.every(requiredRight => userRights.includes(requiredRight));\n\n      if (!hasRequiredRights || !user.id) {\n        return reject(MESSAGE.UNAUTHORIZED);\n      }\n    } else if (USER_ROLE.THIRD_PARTY === user.role) {\n      const thirdPartyRights = ROLE_RIGHTS[user.role];\n      const hasRequiredRights = requiredRights.every(requiredRight => thirdPartyRights.includes(requiredRight));\n\n      if (!hasRequiredRights || !user.id) {\n        return reject(MESSAGE.UNAUTHORIZED);\n      }\n    } else if (USER_ROLE.ADMIN === user.role) {\n      const thirdPartyRights = ROLE_RIGHTS[user.role];\n      const hasRequiredRights = requiredRights.every(requiredRight => thirdPartyRights.includes(requiredRight));\n\n      if (!hasRequiredRights || !user.id) {\n        return reject(MESSAGE.UNAUTHORIZED);\n      }\n    } else if (USER_ROLE.MASTER_DISTRIBUTOR === user.role) {\n      const thirdPartyRights = ROLE_RIGHTS[user.role];\n      const hasRequiredRights = requiredRights.every(requiredRight => thirdPartyRights.includes(requiredRight));\n\n      if (!hasRequiredRights || !user.id) {\n        return reject(MESSAGE.UNAUTHORIZED);\n      }\n    } else if (USER_ROLE.DISTRIBUTOR === user.role) {\n      const thirdPartyRights = ROLE_RIGHTS[user.role];\n      const hasRequiredRights = requiredRights.every(requiredRight => thirdPartyRights.includes(requiredRight));\n\n      if (!hasRequiredRights || !user.id) {\n        return reject(MESSAGE.UNAUTHORIZED);\n      }\n    } else if (USER_ROLE.SUB_DISTRIBUTOR === user.role) {\n      const thirdPartyRights = ROLE_RIGHTS[user.role];\n      const hasRequiredRights = requiredRights.every(requiredRight => thirdPartyRights.includes(requiredRight));\n\n      if (!hasRequiredRights || !user.id) {\n        return reject(MESSAGE.UNAUTHORIZED);\n      }\n    } else if (USER_ROLE.END_USER === user.role) {\n      const thirdPartyRights = ROLE_RIGHTS[user.role];\n      const hasRequiredRights = requiredRights.every(requiredRight => thirdPartyRights.includes(requiredRight));\n\n      if (!hasRequiredRights || !user.id) {\n        return reject(MESSAGE.UNAUTHORIZED);\n      }\n    }\n  }\n\n  resolve();\n};\n\nconst auth = (...requiredRights) => async (req, res, next) => {\n  return new Promise((resolve, reject) => {\n    passport.authenticate('jwt', {\n      session: false\n    }, verifyCallback(req, resolve, reject, requiredRights))(req, res, next);\n  }).then(() => next()).catch(err => {\n    return res.serverError({}, err);\n  });\n};\n\nmodule.exports = auth;"
        },
        "error": {
            "functionName": "error",
            "code": "const httpStatus = require('http-status');\n\nconst config = require('../config/config');\n\nconst logger = require('../config/logger');\n\nconst ApiError = require('../utils/ApiError');\n\nconst errorConverter = (err, req, res, next) => {\n  let error = err;\n\n  if (!(error instanceof ApiError)) {\n    const statusCode = error.statusCode || httpStatus.INTERNAL_SERVER_ERROR;\n    const message = error.message || httpStatus[statusCode];\n    error = new ApiError(statusCode, message, false, err.stack);\n  }\n\n  next(error);\n};\n\nconst errorHandler = (err, req, res, next) => {\n  let {\n    statusCode,\n    message\n  } = err;\n\n  if (config.env === 'production' && !err.isOperational) {\n    statusCode = httpStatus.INTERNAL_SERVER_ERROR;\n    message = httpStatus[httpStatus.INTERNAL_SERVER_ERROR];\n  }\n\n  res.locals.errorMessage = err.message;\n  const response = {\n    code: statusCode,\n    message,\n    ...(config.env === 'development' && {\n      stack: err.stack\n    })\n  };\n\n  if (config.env === 'development') {\n    logger.error(err);\n  }\n\n  res.status(statusCode).send(response);\n};\n\nmodule.exports = {\n  errorConverter,\n  errorHandler\n};"
        },
        "permission": {
            "functionName": "permission",
            "code": "const _ = require('lodash');\n\nconst MESSAGE = require('../config/message').message;\n\nconst {\n  Permission,\n  Master\n} = require('../models');\n\nconst {\n  MASTERS\n} = require('../config/constant');\n\nconst permission = (page, action) => async (req, res, next) => {\n  let userPermission = await Permission.findOne({\n    user: req.user.id,\n    type: req.user.role\n  });\n\n  if (!userPermission) {\n    let filter = {\n      code: MASTERS.USER_ROLE,\n      $and: [{\n        parentId: {\n          $in: [null]\n        }\n      }]\n    };\n    let masters = await Master.findOne(filter);\n    let submasters = await Master.findOne({\n      parentId: masters._id,\n      type: req.user.role,\n      isDefault: true\n    });\n    userPermission = await Permission.findOne({\n      masterId: submasters._id\n    });\n  }\n\n  if (!userPermission && !userPermission.permissions) {\n    return res.badRequest({}, MESSAGE.FORBIDDEN);\n  }\n\n  const validPermission = _.find(userPermission.permissions, {\n    moduleNum: page\n  });\n\n  if (!validPermission || !validPermission.permissions[action]) {\n    return res.badRequest({}, MESSAGE.FORBIDDEN);\n  }\n\n  return next();\n};\n\nmodule.exports = permission;"
        },
        "rateLimiter": {
            "functionName": "rateLimiter",
            "code": "const rateLimit = require('express-rate-limit');\n\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 20,\n  skipSuccessfulRequests: true\n});\nmodule.exports = {\n  authLimiter\n};"
        },
        "validate": {
            "functionName": "validate",
            "code": "const Joi = require('joi');\n\nconst pick = require('../utils/pick');\n\nconst MESSAGE = require('../config/message').message;\n\nconst validate = schema => (req, res, next) => {\n  const validSchema = pick(schema, ['params', 'query', 'body']);\n  const object = pick(req, Object.keys(validSchema));\n\n  if (object && object.body) {\n    const result = validSchema.body.validate(object.body);\n\n    if (result.error && result.error.details.length) {\n      let errorMessage = result.error.details[0].message;\n      errorMessage = errorMessage.replace(/[\"\\|[\\]\\\\]/g, '');\n      return res.badRequest({}, {\n        message: errorMessage\n      });\n    }\n  }\n\n  return next();\n};\n\nmodule.exports = validate;"
        }
    },
    "modelConfig": {},
    "newModelConfig": {},
    "routes": {
        "apis": [
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/register",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "register",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/login",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "login",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/logout",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "logout",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/forgot-password",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "forgotPassword",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/reset-password",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resetPassword",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/change-password",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "changePassword",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/reset-password-otp-verify",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resetPasswordOtpVerify",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/verifyOtp",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "verifyOtp",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/resend-login-otp",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resendLoginOtp",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/resend-email-otp",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resendEmailOtp",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/resend-mobile-otp",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resendMobileOtp",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/add-licence",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "addLicence",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/auth/check-licence",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "checkLicence",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/get-users",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getUsers",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/commision",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "commision",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/get-users-xls",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getUsersExcel",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/getMarketingMaterials",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getMarketingMaterials",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/get-distributors",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getDistributors",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/create-user-by-admin",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "createUserByAdmin",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/active-deactive-user",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "activeDeActive",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/get-partner-users",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getPartnerUsers",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/assign-user",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "assignUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/:userId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "patch",
                "api": "/admin/:userId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "updateUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "delete",
                "api": "/admin/:userId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "deleteUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/loaderStatus/:userId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "loaderOff",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/update-role-group",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "changeRoleGroup",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "delete",
                "api": "/admin/distributor/:masterId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "deleteMasterUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/files/paginate",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "getFiles",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/documents/paginate",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "getDocuments",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/documents/reject-document",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "rejectDocument",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/documents/:documentsId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "getDocument",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/documents/document-status-change/:documentId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "statusChange",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/payment/paginate",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "payment",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "PaymentController",
                "service": "PaymentController",
                "descriptions": "",
                "functionName": "getPayments",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/payment/add-file-credit",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "payment",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "PaymentController",
                "service": "PaymentController",
                "descriptions": "",
                "functionName": "fileCredit",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/payment/:userId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "payment",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "PaymentController",
                "service": "PaymentController",
                "descriptions": "",
                "functionName": "getPayment",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/transaction/save-transactions",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "saveTransaction",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/transaction/paginate",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "getTransactions",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/releaseNote/add",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "releaseNote",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "ReleaseNotController",
                "service": "ReleaseNotController",
                "descriptions": "",
                "functionName": "addReleaseNote",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/releaseNote/active-deactive",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "releaseNote",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "ReleaseNotController",
                "service": "ReleaseNotController",
                "descriptions": "",
                "functionName": "changeStatus",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/releaseNote/list",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "releaseNote",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "ReleaseNotController",
                "service": "ReleaseNotController",
                "descriptions": "",
                "functionName": "paginate",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/releaseNote/:id",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "releaseNote",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "ReleaseNotController",
                "service": "ReleaseNotController",
                "descriptions": "",
                "functionName": "getReleaseNote",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "patch",
                "api": "/admin/releaseNote/:id",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "releaseNote",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "ReleaseNotController",
                "service": "ReleaseNotController",
                "descriptions": "",
                "functionName": "editReleaseNote",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "delete",
                "api": "/admin/releaseNote/:id",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "releaseNote",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "ReleaseNotController",
                "service": "ReleaseNotController",
                "descriptions": "",
                "functionName": "deleteTeleaseNote",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/errorLogs/",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "errorLog",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "ErrorLogController",
                "service": "ErrorLogController",
                "descriptions": "",
                "functionName": "getErrorLogs",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/admin/permission/paginate",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Permission",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "PermissionController",
                "service": "PermissionController",
                "descriptions": "",
                "functionName": "paginate",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "get",
                "api": "/admin/permission/:permissionId",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Permission",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "PermissionController",
                "service": "PermissionController",
                "descriptions": "",
                "functionName": "getPermission",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "patch",
                "api": "/admin/permission/update",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Permission",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "PermissionController",
                "service": "PermissionController",
                "descriptions": "",
                "functionName": "update",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/admin/permission/create",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Permission",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "PermissionController",
                "service": "PermissionController",
                "descriptions": "",
                "functionName": "create",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "delete",
                "api": "/admin/permission/:permissionId",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Permission",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "PermissionController",
                "service": "PermissionController",
                "descriptions": "",
                "functionName": "delete",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/admin/permission/add-user-permission",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Permission",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "PermissionController",
                "service": "PermissionController",
                "descriptions": "",
                "functionName": "addUserPermission",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/master/add-master",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "master",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MasterController",
                "service": "MasterController",
                "descriptions": "",
                "functionName": "createMaster",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/master/set-master-default",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "master",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MasterController",
                "service": "MasterController",
                "descriptions": "",
                "functionName": "setIsDefault",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/master/:masterId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "master",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MasterController",
                "service": "MasterController",
                "descriptions": "",
                "functionName": "getMaster",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "delete",
                "api": "/admin/master/:masterId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "master",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MasterController",
                "service": "MasterController",
                "descriptions": "",
                "functionName": "deleteMaster",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/master/update-master",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "master",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MasterController",
                "service": "MasterController",
                "descriptions": "",
                "functionName": "updateMaster",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/master/paginate",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "master",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MasterController",
                "service": "MasterController",
                "descriptions": "",
                "functionName": "getMasters",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/master/list-by-code",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "master",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MasterController",
                "service": "MasterController",
                "descriptions": "",
                "functionName": "listByCode",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/marketing/createMarketingMaterial",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "marketing",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MarketingMaterialController",
                "service": "MarketingMaterialController",
                "descriptions": "",
                "functionName": "createMarketingMaterial",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/marketing/getMarketingMaterials",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "marketing",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MarketingMaterialController",
                "service": "MarketingMaterialController",
                "descriptions": "",
                "functionName": "getMarketingMaterials",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/marketing/:marketingMaterialId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "marketing",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MarketingMaterialController",
                "service": "MarketingMaterialController",
                "descriptions": "",
                "functionName": "getMarketingMaterial",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "patch",
                "api": "/admin/marketing/:marketingMaterialId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "marketing",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MarketingMaterialController",
                "service": "MarketingMaterialController",
                "descriptions": "",
                "functionName": "updateMarketingMaterial",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "delete",
                "api": "/admin/marketing/:marketingMaterialId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "marketing",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "MarketingMaterialController",
                "service": "MarketingMaterialController",
                "descriptions": "",
                "functionName": "deleteMarketingMaterial",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/plans/createPlan",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "plans",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "PlansController",
                "service": "PlansController",
                "descriptions": "",
                "functionName": "createPlan",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "post",
                "api": "/admin/plans/getPlans",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "plans",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "PlansController",
                "service": "PlansController",
                "descriptions": "",
                "functionName": "getPlans",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "get",
                "api": "/admin/plans/:planId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "plans",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "PlansController",
                "service": "PlansController",
                "descriptions": "",
                "functionName": "getPlan",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "patch",
                "api": "/admin/plans/:planId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "plans",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "PlansController",
                "service": "PlansController",
                "descriptions": "",
                "functionName": "updatePlan",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Admin",
                "method": "delete",
                "api": "/admin/plans/:planId",
                "routeFilePath": "/src/routes/Admin",
                "routeFileName": "plans",
                "controllerFilePath": "/src/controllers/Admin",
                "controllerFileName": "PlansController",
                "service": "PlansController",
                "descriptions": "",
                "functionName": "deletePlan",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/users/get-end-users",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getUsers",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/users/create-end-user",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "createUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/users/sync-company",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "syncCompany",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/users/:userId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "patch",
                "api": "/users/:userId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "updateUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "patch",
                "api": "/users/playerId/:userId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "updateUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/users/active-deactive-user",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "activeDeActive",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "patch",
                "api": "/users/client/:userId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "updateEndUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/users/get-end-users",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getUsers",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/users/create-end-user",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "createUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/users/sync-company",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "syncCompany",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/users/:userId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "patch",
                "api": "/users/:userId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "updateUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "patch",
                "api": "/users/playerId/:userId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "updateUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/users/active-deactive-user",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "activeDeActive",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "patch",
                "api": "/users/client/:userId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "updateEndUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/dashboard/",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "dashboard",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DashboardController",
                "service": "DashboardController",
                "descriptions": "",
                "functionName": "getDashboard",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/ledger/create",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "ledger",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "LedgerController",
                "service": "LedgerController",
                "descriptions": "",
                "functionName": "createLedger",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/ledger/paginate",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "ledger",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "LedgerController",
                "service": "LedgerController",
                "descriptions": "",
                "functionName": "getLedgers",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "createDocuments",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/paginate",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "getDocuments",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/pending-documents",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "pendingDocuments",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/update-status",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "hookDocument",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/documents/download-document/:documentId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "downloadDocument",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/save-in-tally",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "saveInTally",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/documents/:documentsId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "getDocument",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "delete",
                "api": "/user/documents/:documentsId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "deleteDocument",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/documents/loader-status/:documentsId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "checkLoaderStatus",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/getTransactionKeyData",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "getTransactionKeyData",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/sp-trans",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "uploadSPTransaction",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/sp-trans-map",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "mapSPTransaction",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/sp/save-in-tally",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "saveSalesDocInTally",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "delete",
                "api": "/user/documents/sp/:documentsId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "deleteSalesPurchaesDoc",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/documents/paginate_spData",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "documents",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "DocumentsController",
                "service": "DocumentsController",
                "descriptions": "",
                "functionName": "getSpData",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/files/paginate",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "getFiles",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/files/sync-ledgers/:fileId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "syncLedgers",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "delete",
                "api": "/user/files/:fileId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "deleteFiles",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/files/assign-company",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "assignCompanyToEndUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/files/retain-company",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "retainCompanyToEndUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/files/end-user/paginate",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "getEndUserFiles",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/logs/",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "logs",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "LogsController",
                "service": "LogsController",
                "descriptions": "",
                "functionName": "createLogs",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/logs/",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "logs",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "LogsController",
                "service": "LogsController",
                "descriptions": "",
                "functionName": "getLogs",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/logs/:logsId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "logs",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "LogsController",
                "service": "LogsController",
                "descriptions": "",
                "functionName": "getLogs",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "patch",
                "api": "/user/logs/:logsId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "logs",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "LogsController",
                "service": "LogsController",
                "descriptions": "",
                "functionName": "updateLogs",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "delete",
                "api": "/user/logs/:logsId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "logs",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "LogsController",
                "service": "LogsController",
                "descriptions": "",
                "functionName": "deleteLogs",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/transaction/paginate",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "getTransactions",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/transaction/total",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "AllTotalTransactions",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/transaction/updateLedgers",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "addLeger",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/transaction/saveTransaction/:documentId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "transactionReadyToPush",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/transaction/saveSplitLedgers/:transactionId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "saveSplitLedgers",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "delete",
                "api": "/user/transaction/:transactionId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "deleteTransaction",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/payment/",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "payment",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PaymentController",
                "service": "PaymentController",
                "descriptions": "",
                "functionName": "createPayment",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/payment/list",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "payment",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PaymentController",
                "service": "PaymentController",
                "descriptions": "",
                "functionName": "getPayments",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/payment/total",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "payment",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PaymentController",
                "service": "PaymentController",
                "descriptions": "",
                "functionName": "AllTotalPayment",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "get",
                "api": "/user/zoho/plans-paginate",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "getAllPlans",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "post",
                "api": "/user/zoho/subscribe-plan",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "subscribePlan",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "post",
                "api": "/user/zoho/subscribe-hosted-page",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "subscribeHostedPageForSubscription",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "get",
                "api": "/user/zoho/payment-redirect",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "paymentRedirection",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "get",
                "api": "/user/zoho/confirm-payment/:paymentCode",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "confirmSubscriptionPlan",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "get",
                "api": "/user/zoho/user-subscription",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "getUserSubscription",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "get",
                "api": "/user/zoho/migrate-zoho-customer",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "migrateAllUserToZohoCustomer",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "get",
                "api": "/user/zoho/migrate-zoho-plan",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "migrateExistingUserToPersonal",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "post",
                "api": "/user/zoho/addon-subscribe-page",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "addOnSubscriptionPage",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "get",
                "api": "/user/zoho/addon-purchase-redirect",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "zohoSubscription",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "ZohoSubscriptionController",
                "service": "ZohoSubscriptionController",
                "descriptions": "",
                "functionName": "addOnRedirection",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/releaseNote/active-note",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "releaseNote",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "ReleaseNotController",
                "service": "ReleaseNotController",
                "descriptions": "",
                "functionName": "getNewReleaseNote",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/parentGroup/get",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "parentGroup",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "ParentGroupController",
                "service": "ParentGroupController",
                "descriptions": "",
                "functionName": "getParents",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/purchase/transactions",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "purchase",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PurchaseController",
                "service": "PurchaseController",
                "descriptions": "",
                "functionName": "findAllsales",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const params = req.body;\n    const loggedInUser = req.user;\n    const filter = await CommonService.getFilter(params);\n    filter.where.userId = loggedInUser._id;\n    const result = await Purchase.find(filter.where) // .populate('itemName', { name: 1, __enc_name: 1 })\n    .populate('salesLedger', {\n      name: 1,\n      __enc_name: 1\n    }).populate('cgstLedger', {\n      name: 1,\n      __enc_name: 1\n    }).populate('sgstLedger', {\n      name: 1,\n      __enc_name: 1\n    }).populate('igstLedger', {\n      name: 1,\n      __enc_name: 1\n    }).populate('partyLedger', {\n      name: 1,\n      __enc_name: 1\n    }).skip(filter.skip).limit(filter.limit).exec();\n    const response = {\n      list: result\n    }; // function getArraySum(a){\n    //     var total=0;\n    //     for(var i in a) {\n    //         total += a[i];\n    //     }\n    //     return total;\n    // }\n    // let purchaseResponseAmount = [];\n    // let subData = []\n    // for(let i = 0; i < result.length; i++){\n    //     let data = result[i]\n    //     var extraData = data.toObject();\n    //     // console.log('sum of sales---->', result[i].total)\n    //     purchaseResponseAmount.push(result[i].total)\n    // }\n    // const allSumOfPurcahse = getArraySum(purchaseResponseAmount);\n    // extraData.SumOfPurchase = allSumOfPurcahse.toFixed(2)\n    // subData.push(extraData.SumOfPurchase)\n    // let purchaseResult = [];\n    // for (let index = 0; index < result.length; index++) {\n    //     const element = result[index].toObject();\n    //     if (element['partyName'] && element['gstNum']) {\n    //         let ledger = await Ledger.findOne({ gstNum: element['gstNum'], __enc_name: true});\n    //         element['partyName'] = ledger.name ? ledger.name : element['partyName'];\n    //     } else if (element['partyName']) {\n    //         let ledger = await Ledger.findOne({ name: element['partyName'], __enc_name: true});\n    //         element['gstNum'] = ledger.gstNum ? ledger.gstNum : '';\n    //     } else if (element['gstNum']) {\n    //         let ledger = await Ledger.findOne({ gstNum: element['gstNum'], __enc_name: true});\n    //         element['partyName'] = ledger.name ? ledger.name : '';\n    //     }\n    //     purchaseResult.push(element);\n    // }\n    // const response = { list: purchaseResult };\n    // response.sumOfAllPurchases = subData\n\n    response.count = await Purchase.countDocuments(filter.where).exec();\n    return res.ok(response, message.message.OK);\n  } catch (error) {\n    console.log('findAllsales -> error', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/purchase/total",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "purchase",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PurchaseController",
                "service": "PurchaseController",
                "descriptions": "",
                "functionName": "AllTotalPurchase",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  const loggedInUser = req.user;\n\n  try {\n    // const company = await  Purchase.findOne({ userId: loggedInUser._id }).populate('fileId',{\n    //     name: \"Alex Mart\",\n    //     __enc_name: 1\n    // })\n    // console.log(\"comname--->\",company.fileId)\n    const totalSum = await Purchase.aggregate([{\n      $match: {\n        userId: loggedInUser._id\n      }\n    }, {\n      $group: {\n        _id: \"$userId\",\n        totalAmount: {\n          $sum: \"$total\"\n        },\n        fileId: {\n          $push: \"$fileId\"\n        }\n      }\n    }]);\n    console.log(\"totalSum---->\", totalSum);\n    totalSum.map(async file => {\n      var fileName = await Purchase.find({\n        fileId: file.fileId\n      }).populate('fileId');\n      console.log('fileName-->', fileName);\n      fileName.map(name => {// console.log('fileName--->', name.fileId.name)\n      });\n    });\n    const response = {\n      sumOfAllPurchases: totalSum\n    };\n    return res.ok(response, message.message.OK);\n  } catch (error) {\n    console.log('findAllsales -> error', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "delete",
                "api": "/user/purchase/:id",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "purchase",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PurchaseController",
                "service": "PurchaseController",
                "descriptions": "",
                "functionName": "deletesales",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    if (!req.params.id) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    const sales = Purchase.findById(req.params.id);\n\n    if (!sales) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    await Purchase.deleteOne({\n      _id: req.params.id\n    });\n    return res.ok(null, message.message.TRANSACTION_DELETED);\n  } catch (error) {\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/purchase/update",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "purchase",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PurchaseController",
                "service": "PurchaseController",
                "descriptions": "",
                "functionName": "updateSales",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const params = req.body;\n    const loginUser = req.user;\n    const _id = [];\n\n    for (const key in params.data) {\n      _id.push(key);\n\n      if (key !== null) {\n        const updateObj = {\n          tallyStatus: TALLY_STATUS.SAVED,\n          updatedAt: moment().toISOString(),\n          updatedBy: loginUser._id\n        };\n        Object.keys(params.data[key]).map(updateKey => {\n          updateObj[updateKey] = params.data[key][updateKey];\n\n          if (updateKey === 'quantity' || updateKey === 'rate' || updateKey === 'amount' || updateKey === 'gstAmount' || updateKey === 'gstPer' || updateKey === 'total' || updateKey === 'cgstAmount' || updateKey === 'sgstAmount' || updateKey === 'igstAmount') {\n            updateObj[updateKey] = params.data[key][updateKey] && params.data[key][updateKey].toString().replace(/,/g, '');\n          }\n        });\n\n        if (params.data[key].itemName) {\n          updateObj.itemName = params.data[key].itemName._id;\n          updateObj.itemNameText = params.data[key].itemName.name;\n        }\n\n        if (params.data[key].salesLedger) {\n          updateObj.salesLedger = params.data[key].salesLedger._id;\n          updateObj.salesLedgerText = params.data[key].salesLedger.name;\n        }\n\n        if (params.data[key].cgstLedger) {\n          updateObj.cgstLedger = params.data[key].cgstLedger._id;\n          updateObj.cgstLedgerText = params.data[key].cgstLedger.name;\n        }\n\n        if (params.data[key].sgstLedger) {\n          updateObj.sgstLedger = params.data[key].sgstLedger._id;\n          updateObj.sgstLedgerText = params.data[key].sgstLedger.name;\n        }\n\n        if (params.data[key].igstLedger) {\n          updateObj.igstLedger = params.data[key].igstLedger._id;\n          updateObj.igstLedgerText = params.data[key].igstLedger.name;\n        }\n\n        if (params.data[key].partyLedger) {\n          updateObj.partyLedger = params.data[key].partyLedger._id;\n          updateObj.partyLedgerText = params.data[key].partyLedger.name;\n        }\n\n        if (params.data[key].expenseAccountLedger) {\n          updateObj.expenseAccountLedger = params.data[key].expenseAccountLedger._id;\n          updateObj.expenseAccountLedgerText = params.data[key].expenseAccountLedger.name;\n        }\n\n        const query = {\n          _id: key\n        };\n        const update = {\n          $set: updateObj\n        };\n        const option = {\n          new: true\n        };\n        const updatedTransaction = await Purchase.findOneAndUpdate(query, update, option);\n      }\n    } // await TransactionTrack.insertMany(statusTrack);\n\n\n    return res.ok({}, message.message.TRANSACTION_UPDATED);\n  } catch (error) {\n    console.log('error :>> ', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/purchase/saveTransaction/:documentId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "purchase",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PurchaseController",
                "service": "PurchaseController",
                "descriptions": "",
                "functionName": "transactionReadyToPush",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const loggedInUser = req.user;\n    const {\n      params\n    } = req;\n    const document = await Document.findOne({\n      _id: params.documentId,\n      userId: loggedInUser._id\n    });\n\n    if (!document) {\n      return res.notFound(null, message.message.DOCUMENT_NOT_FOUND);\n    }\n\n    const user = await User.findById({\n      _id: loggedInUser._id\n    });\n\n    if (!user) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    if (user.loaderStatus) {\n      return res.badRequest(null, message.message.PROCESS_RUNNING);\n    }\n\n    const transactionObj = {\n      tallyStatus: TALLY_STATUS.READY_TO_PUSH\n    };\n    console.log(\"document._id------------->\", document._id);\n    console.log(\"loggedInUser._id---------------->\", loggedInUser._id);\n    console.log(\"transactionObj--------------->\", transactionObj);\n    const updatedTransaction = await Purchase.update({\n      documentId: document._id,\n      userId: loggedInUser._id,\n      $and: [{\n        voucherNo: {\n          $nin: [null, '']\n        }\n      }, {\n        date: {\n          $nin: [null, '']\n        }\n      }, {\n        amount: {\n          $nin: [null, '']\n        }\n      }, // { gstAmount: { $nin: [null, ''] } },\n      {\n        total: {\n          $nin: [null, '']\n        }\n      }, // { gstPer: { $nin: [null, ''] } },\n      {\n        salesLedger: {\n          $nin: [null]\n        }\n      }, {\n        partyLedger: {\n          $nin: [null]\n        }\n      }, {\n        tallyStatus: {\n          $in: [TALLY_STATUS.SAVED, TALLY_STATUS.READY_TO_PUSH]\n        }\n      }]\n    }, {\n      $set: transactionObj\n    }, {\n      multi: true\n    });\n    console.log('updatedTransaction :>> ', updatedTransaction);\n\n    if (updatedTransaction && updatedTransaction.n > 0) {\n      const client = req.app.locals.clients[loggedInUser._id];\n      const data = `data: ${JSON.stringify({\n        type: 'purchaseTransactions'\n      })}\\n\\n`;\n      client && client.write(data);\n      const fileUpdated = await Files.findOneAndUpdate({\n        _id: document.fileId,\n        userId: loggedInUser._id\n      }, {\n        $set: {\n          pushPurchaseTransaction: true\n        }\n      }, {\n        new: true\n      });\n      console.log('transactionReadyToPush fileUpdated :------------------>> ', fileUpdated);\n      await Document.findOneAndUpdate({\n        _id: document._id\n      }, {\n        $set: {\n          loaderStatus: true\n        }\n      }, {\n        new: true\n      });\n      const updateUserObj = {\n        syncCompany: true,\n        loaderStatus: true,\n        updatedBy: loggedInUser._id,\n        updatedAt: moment().toISOString()\n      };\n      await User.update({\n        _id: loggedInUser._id\n      }, {\n        $set: updateUserObj\n      }, {\n        new: true\n      });\n\n      if (!client) {\n        return res.ok(updatedTransaction, message.message.CLICK_IN_EXE);\n      }\n\n      return res.ok(updatedTransaction, message.message.OK);\n    }\n\n    return res.ok(updatedTransaction, message.message.NOTHING_TO_PUSH);\n  } catch (error) {\n    console.log('error =======================:>> ', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/sales/transactions",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "sales",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "SalesController",
                "service": "SalesController",
                "descriptions": "",
                "functionName": "findAllsales",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const params = req.body;\n    const loggedInUser = req.user;\n    const filter = await CommonService.getFilter(params);\n    filter.where.userId = loggedInUser._id;\n    const result = await Sales.find(filter.where).populate('itemName', {\n      name: 1,\n      __enc_name: 1\n    }).populate('salesLedger', {\n      name: 1,\n      __enc_name: 1\n    }).populate('cgstLedger', {\n      name: 1,\n      __enc_name: 1\n    }).populate('sgstLedger', {\n      name: 1,\n      __enc_name: 1\n    }).populate('igstLedger', {\n      name: 1,\n      __enc_name: 1\n    }).populate('partyLedger', {\n      name: 1,\n      __enc_name: 1\n    }).skip(filter.skip).limit(filter.limit).exec(); // const response = { list: result };\n    // console.log('response---->', response.list);\n    // function getArraySum(a){\n    //     var total=0;\n    //     for(var i in a) {\n    //         total += a[i];\n    //     }\n    //     return total;\n    // }\n    // let salesResponseAmount = [];\n    // let subData = []\n    // for(let i = 0; i < result.length; i++){\n    //     let data = result[i]\n    //     var extraData = data.toObject();\n    //     // console.log('sum of sales---->', result[i].total)\n    //     salesResponseAmount.push(result[i].total)\n    // }\n    // const allSumOfsales = getArraySum(salesResponseAmount);\n    // extraData.SumOfsales = allSumOfsales.toFixed(2)\n    // subData.push(extraData.SumOfsales)\n    // console.log('allSumOfsales---->', allSumOfsales)\n    // let salesResult = [];\n    // for (let index = 0; index < result.length; index++) {\n    //     const element = result[index].toObject();\n    //     if (element['partyName'] && element['gstNum']) {\n    //         let ledger = await Ledger.findOne({ gstNum: element['gstNum'], __enc_name: true});\n    //         element['partyName'] = ledger.name ? ledger.name : element['partyName'];\n    //     } else if (element['partyName']) {\n    //         let ledger = await Ledger.findOne({ name: element['partyName'], __enc_name: true});\n    //         element['gstNum'] = ledger.gstNum ? ledger.gstNum : '';\n    //     } else if (element['gstNum']) {\n    //         let ledger = await Ledger.findOne({ gstNum: element['gstNum'], __enc_name: true});\n    //         element['partyName'] = ledger.name ? ledger.name : '';\n    //     }\n    //     salesResult.push(element);\n    // }\n    // const response = { list: salesResult };\n\n    const response = {\n      list: result\n    }; // response.sumOfAllSales = totalSum\n\n    response.count = await Sales.countDocuments(filter.where).exec();\n    return res.ok(response, message.message.OK);\n  } catch (error) {\n    console.log('findAllsales -> error', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/sales/total",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "sales",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "SalesController",
                "service": "SalesController",
                "descriptions": "",
                "functionName": "AllTotalSum",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  const loggedInUser = req.user;\n\n  try {\n    const totalSum = await Sales.aggregate([{\n      $match: {\n        userId: loggedInUser._id\n      }\n    }, {\n      $group: {\n        _id: \"$userId\",\n        totalAmount: {\n          $sum: \"$total\"\n        }\n      }\n    }]);\n    console.log(\"totalSum---->\", totalSum);\n    const response = {\n      sumOfAllSales: totalSum\n    };\n    return res.ok(response, message.message.OK);\n  } catch (error) {\n    console.log('findAllsales -> error', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "delete",
                "api": "/user/sales/:id",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "sales",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "SalesController",
                "service": "SalesController",
                "descriptions": "",
                "functionName": "deletesales",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    if (!req.params.id) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    const sales = Sales.findById(req.params.id);\n\n    if (!sales) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    await Sales.deleteOne({\n      _id: req.params.id\n    });\n    return res.ok(null, message.message.TRANSACTION_DELETED);\n  } catch (error) {\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/sales/update",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "sales",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "SalesController",
                "service": "SalesController",
                "descriptions": "",
                "functionName": "updateSales",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const params = req.body;\n    const loginUser = req.user;\n    const _id = [];\n\n    for (const key in params.data) {\n      _id.push(key);\n\n      if (key !== null) {\n        const updateObj = {\n          tallyStatus: TALLY_STATUS.SAVED,\n          updatedAt: moment().toISOString(),\n          updatedBy: loginUser._id\n        };\n        Object.keys(params.data[key]).map(updateKey => {\n          updateObj[updateKey] = params.data[key][updateKey];\n\n          if (updateKey === 'quantity' || updateKey === 'rate' || updateKey === 'amount' || updateKey === 'gstAmount' || updateKey === 'gstPer' || updateKey === 'total' || updateKey === 'cgstAmount' || updateKey === 'sgstAmount' || updateKey === 'igstAmount') {\n            updateObj[updateKey] = params.data[key][updateKey] && params.data[key][updateKey].toString().replace(/,/g, '');\n          }\n        });\n\n        if (params.data[key].itemName) {\n          updateObj.itemName = params.data[key].itemName._id;\n          updateObj.itemNameText = params.data[key].itemName.name;\n        }\n\n        if (params.data[key].salesLedger) {\n          updateObj.salesLedger = params.data[key].salesLedger._id;\n          updateObj.salesLedgerText = params.data[key].salesLedger.name;\n        }\n\n        if (params.data[key].cgstLedger) {\n          updateObj.cgstLedger = params.data[key].cgstLedger._id;\n          updateObj.cgstLedgerText = params.data[key].cgstLedger.name;\n        }\n\n        if (params.data[key].sgstLedger) {\n          updateObj.sgstLedger = params.data[key].sgstLedger._id;\n          updateObj.sgstLedgerText = params.data[key].sgstLedger.name;\n        }\n\n        if (params.data[key].igstLedger) {\n          updateObj.igstLedger = params.data[key].igstLedger._id;\n          updateObj.igstLedgerText = params.data[key].igstLedger.name;\n        }\n\n        if (params.data[key].partyLedger) {\n          updateObj.partyLedger = params.data[key].partyLedger._id;\n          updateObj.partyLedgerText = params.data[key].partyLedger.name;\n        }\n\n        if (params.data[key].expenseAccountLedger) {\n          updateObj.expenseAccountLedger = params.data[key].expenseAccountLedger._id;\n          updateObj.expenseAccountLedgerText = params.data[key].expenseAccountLedger.name;\n        }\n\n        const query = {\n          _id: key\n        };\n        const update = {\n          $set: updateObj\n        };\n        const option = {\n          new: true\n        };\n        const updatedTransaction = await Sales.findOneAndUpdate(query, update, option);\n      }\n    } // await TransactionTrack.insertMany(statusTrack);\n\n\n    return res.ok({}, message.message.TRANSACTION_UPDATED);\n  } catch (error) {\n    console.log('error :>> ', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/user/sales/saveTransaction/:documentId",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "sales",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "SalesController",
                "service": "SalesController",
                "descriptions": "",
                "functionName": "transactionReadyToPush",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const loggedInUser = req.user;\n    const {\n      params\n    } = req; // let documentId = \"610bbba410251e0f1cbd701c\";\n\n    const document = await Document.findOne({\n      _id: params.documentId,\n      userId: loggedInUser._id\n    }); // const document = await Document.findOne({ _id: documentId, userId: loggedInUser._id });\n\n    if (!document) {\n      return res.notFound(null, message.message.DOCUMENT_NOT_FOUND);\n    }\n\n    const user = await User.findById({\n      _id: loggedInUser._id\n    });\n\n    if (!user) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    if (user.loaderStatus) {\n      return res.badRequest(null, message.message.PROCESS_RUNNING);\n    }\n\n    const transactionObj = {\n      tallyStatus: TALLY_STATUS.READY_TO_PUSH\n    };\n    const updatedTransaction = await Sales.update({\n      documentId: document._id,\n      userId: loggedInUser._id,\n      $and: [{\n        voucherNo: {\n          $nin: [null, '']\n        }\n      }, {\n        date: {\n          $nin: [null, '']\n        }\n      }, {\n        amount: {\n          $nin: [null, '']\n        }\n      }, {\n        total: {\n          $nin: [null, '']\n        }\n      }, // { gstAmount: { $nin: [null, ''] } },\n      //{ gstPer: { $nin: [null, ''] } },\n      {\n        salesLedger: {\n          $nin: [null]\n        }\n      }, {\n        partyLedger: {\n          $nin: [null]\n        }\n      }, {\n        tallyStatus: {\n          $in: [TALLY_STATUS.SAVED, TALLY_STATUS.READY_TO_PUSH]\n        }\n      }]\n    }, {\n      $set: transactionObj\n    }, {\n      multi: true\n    });\n    console.log('updatedTransaction :>> ', updatedTransaction);\n\n    if (updatedTransaction && updatedTransaction.n > 0) {\n      const client = req.app.locals.clients[loggedInUser._id];\n      const data = `data: ${JSON.stringify({\n        type: 'salesTransactions'\n      })}\\n\\n`;\n      client && client.write(data);\n      const fileUpdated = await Files.findOneAndUpdate({\n        _id: document.fileId,\n        userId: loggedInUser._id\n      }, {\n        $set: {\n          pushSalesTransaction: true\n        }\n      }, {\n        new: true\n      });\n      console.log('transactionReadyToPush fileUpdated :------------------>> ', fileUpdated);\n      await Document.findOneAndUpdate({\n        _id: document._id\n      }, {\n        $set: {\n          loaderStatus: true\n        }\n      }, {\n        new: true\n      });\n      const updateUserObj = {\n        syncCompany: true,\n        loaderStatus: true,\n        updatedBy: loggedInUser._id,\n        updatedAt: moment().toISOString()\n      };\n      await User.update({\n        _id: loggedInUser._id\n      }, {\n        $set: updateUserObj\n      }, {\n        new: true\n      });\n\n      if (!client) {\n        return res.ok(updatedTransaction, message.message.CLICK_IN_EXE);\n      }\n\n      const pushNotificationRes = await PushNotifications.create({\n        userId: user._id,\n        isSeen: false,\n        message: `Your file ${document.name} has successfully pushed in Tally..`,\n        playerIds: user.playerId || []\n      });\n\n      if (user.playerId.length > 0) {\n        // notification\n        const notifyObj = {\n          message: pushNotificationRes.message,\n          playerId: pushNotificationRes.playerIds,\n          notificationId: pushNotificationRes._id\n        };\n        await NotificationService.sendNotification(notifyObj);\n      }\n\n      return res.ok(updatedTransaction, message.message.OK);\n    }\n\n    return res.ok(updatedTransaction, message.message.NOTHING_TO_PUSH);\n  } catch (error) {\n    console.log('error =======================:>> ', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/items/paginate",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "item",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "ItemController",
                "service": "ItemController",
                "descriptions": "",
                "functionName": "getItems",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/items/addItemManually",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "item",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "ItemController",
                "service": "ItemController",
                "descriptions": "",
                "functionName": "addItemManually",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/items/getItemGroupsAndUnits",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "item",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "ItemController",
                "service": "ItemController",
                "descriptions": "",
                "functionName": "getItemGroupsAndUnits",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/pendingBill/getPendingBillsList",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "pendingBill",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getPendingBillsList",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/pendingBill/updatePendingBillInTransaction",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "pendingBill",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "updatePendingBillInTransaction",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/user/pendingBill/updateTransactionBillArrAndPendingBills",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "pendingBill",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "updateTransactionBillArrAndPendingBills",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Master",
                "method": "post",
                "api": "/distributor/user/get-distributors",
                "routeFilePath": "/src/routes/Master",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Master",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getDistributors",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Master",
                "method": "post",
                "api": "/distributor/user/create",
                "routeFilePath": "/src/routes/Master",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Master",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "createUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Master",
                "method": "get",
                "api": "/distributor/user/:userId",
                "routeFilePath": "/src/routes/Master",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Master",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "getUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Master",
                "method": "patch",
                "api": "/distributor/user/:userId",
                "routeFilePath": "/src/routes/Master",
                "routeFileName": "user",
                "controllerFilePath": "/src/controllers/Master",
                "controllerFileName": "UserController",
                "service": "UserController",
                "descriptions": "",
                "functionName": "updateUser",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Master",
                "method": "post",
                "api": "/distributor/marketing/getMarketingMaterials",
                "routeFilePath": "/src/routes/Master",
                "routeFileName": "marketing",
                "controllerFilePath": "/src/controllers/Master",
                "controllerFileName": "MarketingMaterialController",
                "service": "MarketingMaterialController",
                "descriptions": "",
                "functionName": "getMarketingMaterials",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Master",
                "method": "get",
                "api": "/distributor/marketing/:marketingMaterialId",
                "routeFilePath": "/src/routes/Master",
                "routeFileName": "marketing",
                "controllerFilePath": "/src/controllers/Master",
                "controllerFileName": "MarketingMaterialController",
                "service": "MarketingMaterialController",
                "descriptions": "",
                "functionName": "getMarketingMaterial",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/file/file-upload",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "FileOperator",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "FileOperatorController",
                "service": "FileOperatorController",
                "descriptions": "",
                "functionName": "uploadFiles",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  const loggedInUser = req.user;\n\n  try {\n    let user = loggedInUser;\n\n    if (loggedInUser.role === USER_ROLE.END_USER) {\n      user = await User.findOne({\n        _id: loggedInUser.parentId\n      });\n    }\n\n    const params = req.body;\n\n    if (!utilService.isEmpty(req.files)) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    const uploadedFile = req.files;\n    console.log('uploadedFile :--------------->> ', uploadedFile);\n    const isFileValid = await CommonService.checkFileMimeType(uploadedFile.files.mimetype);\n\n    if (!isFileValid) {\n      return res.badRequest(null, message.message.INVALID_FILE_TYPE);\n    }\n\n    let fileName = uploadedFile.files.name;\n    fileName = fileName.split('.').join('-' + Date.now() + '.'); // eslint-disable-next-line new-cap\n\n    const extension = fileName.split('.').pop();\n\n    if (!utilService.getFileType(extension)) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    const type = utilService.getFileType(extension); // eslint-disable-next-line no-unused-vars\n\n    const filePath = `${user._id}/${params.tallyId}-${params.fileId}/Document/`;\n    const result = await AwsService.uploadFilesToS3(uploadedFile.files.data, `${filePath}${fileName}`);\n\n    if (result && result.ETag) {\n      const fileUrl = `${FILE.S3.baseUrl}${filePath}${fileName}`;\n      const documentObj = {};\n      documentObj.userId = user._id;\n      documentObj.type = type;\n      documentObj.isUpload = true;\n      documentObj.fileId = params.fileId;\n      documentObj.path = fileUrl;\n      documentObj.name = fileName;\n      documentObj.status = DOC_STATUS.PENDING;\n      documentObj.destinationPath = `${user._id}/${params.tallyId}-${params.fileId}/Transaction/`;\n      documentObj.docEntryType = DOC_ENTRY_TYPE.BANK_STATEMENT;\n      const documents = await Document(documentObj).save();\n      await FileService.manageDocumentCount(documents);\n      await AwsService.createAllFolder(`${user._id}/${params.tallyId}-${params.fileId}`);\n\n      if (loggedInUser.role === USER_ROLE.END_USER) {\n        const pushNotificationRes = await PushNotifications.create({\n          userId: user._id,\n          isSeen: false,\n          message: `${loggedInUser.name} has uploaded a new file ${fileName}.`,\n          playerIds: user.playerId || []\n        });\n\n        if (user.playerId.length > 0) {\n          // notification\n          const notifyObj = {\n            message: pushNotificationRes.message,\n            playerId: pushNotificationRes.playerIds,\n            notificationId: pushNotificationRes._id\n          };\n          await NotificationService.sendNotification(notifyObj);\n        }\n      }\n\n      return res.ok(documents, message.message.FILE_UPLOAD_SUCCESS);\n    }\n\n    return res.ok({}, message.message.FILE_UPLOAD_FAIL);\n  } catch (e) {\n    console.log(e);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(e),\n      request: req.body,\n      userId: loggedInUser._id\n    });\n    return res.serverError(e, message.message.SERVER_ERROR);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "get",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "FileOperator",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "FileOperatorController",
                "service": "FileOperatorController",
                "descriptions": "",
                "functionName": "checkCreateFolder",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const userId = req.body._id;\n    const result = await AwsService.createUserFolderToS3(userId);\n    return res.ok(result, message.message.OK);\n  } catch (e) {\n    console.log(e);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(e),\n      request: req.body,\n      userId: req.body._id\n    });\n    return res.serverError(e, message.message.SERVER_ERROR);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "patch",
                "api": "/customer/:userId",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "customer",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "CustomerController",
                "service": "CustomerController",
                "descriptions": "",
                "functionName": "createAppConfiguration",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/notification/paginate",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Notification",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "NotificationController",
                "service": "NotificationController",
                "descriptions": "",
                "functionName": "paginate",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/notification/change-status",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Notification",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "NotificationController",
                "service": "NotificationController",
                "descriptions": "",
                "functionName": "changeStatus",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Common",
                "method": "post",
                "api": "/notification/count",
                "routeFilePath": "/src/routes/Common",
                "routeFileName": "Notification",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "NotificationController",
                "service": "NotificationController",
                "descriptions": "",
                "functionName": "getNotificationCount",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/files/company-info",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "createCompanyInfo",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "get",
                "api": "/v1/files/pull-ledgers",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "pullLedgers",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/ledger/add-ledger",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "ledger",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "LedgerController",
                "service": "LedgerController",
                "descriptions": "",
                "functionName": "createLedger",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/ledger/update-ledger",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "ledger",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "LedgerController",
                "service": "LedgerController",
                "descriptions": "",
                "functionName": "updateLedger",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/transaction/update",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "updateTransactions",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "get",
                "api": "/v1/transaction/transaction-list",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "transaction",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "TransactionController",
                "service": "TransactionController",
                "descriptions": "",
                "functionName": "transactionList",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/errorLogs/create",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "errorLogs",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "ErrorLogsController",
                "service": "ErrorLogsController",
                "descriptions": "",
                "functionName": "create",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/parentGroup/add-group",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "parentGroup",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "ParentGroupController",
                "service": "ParentGroupController",
                "descriptions": "",
                "functionName": "addGroup",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "get",
                "api": "/v1/purchase/paginate",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "purchase",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "PurchaseController",
                "service": "PurchaseController",
                "descriptions": "",
                "functionName": "getTransactions",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const loggedInUser = req.user;\n    const user = await User.findById({\n      _id: loggedInUser._id\n    });\n\n    if (!user) {\n      return res.badRequest(null, message.message.USER_NOT_FOUND);\n    }\n\n    const files = await Files.find({\n      userId: loggedInUser._id,\n      pushPurchaseTransaction: true\n    });\n\n    if (!files || files.length <= 0) {\n      return res.ok([], message.message.FILE_NOT_FOUND);\n    }\n\n    const updateFilesObj = {\n      pushPurchaseTransaction: false,\n      updatedBy: loggedInUser._id,\n      updatedAt: moment().toISOString()\n    };\n    console.log('files ===============:>> ', files.length);\n    let result = [];\n    await Promise.all(files.map(async fileObj => {\n      console.log(\"transactionList -> fileObj\", fileObj);\n      await Files.update({\n        _id: fileObj._id\n      }, {\n        $set: updateFilesObj\n      });\n\n      if (fileObj && fileObj._id) {\n        let obj = {\n          fileId: fileObj._id,\n          $and: [{\n            salesLedger: {\n              $nin: [null]\n            }\n          }, {\n            partyLedger: {\n              $nin: [null]\n            }\n          }],\n          tallyStatus: TALLY_STATUS.READY_TO_PUSH,\n          isSaved: false\n        };\n        let record = await Purchase.find(obj).select(['fileId', 'voucherNo', 'date', 'partyName', 'quantity', 'rate', 'amount', 'gstAmount', 'gstPer', 'narration', 'productNarration', 'cgstAmount', 'sgstAmount', 'igstAmount', 'gstNum', 'transaction_type', 'partyLedger', 'total']).populate(\"salesLedger\").populate(\"cgstLedger\").populate(\"sgstLedger\").populate(\"igstLedger\").populate(\"partyLedger\").populate(\"itemName\"); // let ledgers = await Ledger.find({ fileId: fileObj._id, isSaved: false })\n        //     .select([\n        //         'fileId',\n        //         'parent',\n        //         'name',\n        //         'state',\n        //         'address',\n        //         'pincode',\n        //         '__enc_name',\n        //         '__enc_parent',\n        //     ])\n        //     .populate('fileId', {\n        //         name: 1,\n        //         guid: 1,\n        //         __enc_name: 1,\n        //         tallyId: 1,\n        //     });\n        // console.log(\"transactionList -> ledgers\", ledgers)\n\n        result.push({\n          file: fileObj,\n          transactions: record,\n          ledgers: {}\n        });\n      }\n    }));\n    console.log(\"transactionList -> result\", result);\n    return res.ok(result, message.message.FILE_PUSH_AVAILABLE);\n  } catch (error) {\n    console.log('error :>> ', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError({}, error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/purchase/update",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "purchase",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "PurchaseController",
                "service": "PurchaseController",
                "descriptions": "",
                "functionName": "updateTransactions",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    let body = req.body;\n    const loggedInUser = req.user;\n\n    if (!body.transactionIds) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    await Purchase.update({\n      _id: body.transactionIds\n    }, {\n      $set: {\n        isSaved: true,\n        tallyStatus: TALLY_STATUS.ADD_IN_TALLY\n      }\n    }, {\n      multi: true\n    });\n\n    if (body.transactionIds.length > 0) {\n      // notification\n      const notifyObj = {\n        message: 'Statement successfully added in tally.',\n        playerId: loggedInUser.playerId\n      };\n      await NotificationService.sendNotification(notifyObj);\n    }\n\n    await Document.update({\n      loaderStatus: true,\n      userId: loggedInUser._id\n    }, {\n      $set: {\n        loaderStatus: false\n      }\n    }, {\n      multi: true\n    });\n    await User.update({\n      _id: loggedInUser._id\n    }, {\n      $set: {\n        loaderStatus: false\n      }\n    });\n    return res.ok({}, message.message.OK);\n  } catch (error) {\n    console.log('error :>> ', error);\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "get",
                "api": "/v1/sales/paginate",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "sales",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "SalesController",
                "service": "SalesController",
                "descriptions": "",
                "functionName": "getTransactions",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    const loggedInUser = req.user;\n    const user = await User.findById({\n      _id: loggedInUser._id\n    });\n\n    if (!user) {\n      return res.badRequest(null, message.message.USER_NOT_FOUND);\n    }\n\n    const files = await Files.find({\n      userId: loggedInUser._id,\n      pushSalesTransaction: true\n    });\n\n    if (!files || files.length <= 0) {\n      return res.ok([], message.message.FILE_NOT_FOUND);\n    }\n\n    const updateFilesObj = {\n      pushSalesTransaction: false,\n      updatedBy: loggedInUser._id,\n      updatedAt: moment().toISOString()\n    };\n    console.log('files ===============:>> ', files.length);\n    let result = [];\n    await Promise.all(files.map(async fileObj => {\n      console.log(\"transactionList -> fileObj\", fileObj);\n      await Files.update({\n        _id: fileObj._id\n      }, {\n        $set: updateFilesObj\n      });\n\n      if (fileObj && fileObj._id) {\n        let obj = {\n          fileId: fileObj._id,\n          $and: [{\n            salesLedger: {\n              $nin: [null]\n            }\n          }, {\n            partyLedger: {\n              $nin: [null]\n            }\n          }],\n          tallyStatus: TALLY_STATUS.READY_TO_PUSH,\n          isSaved: false\n        };\n        let record = await Sales.find(obj).select(['fileId', 'voucherNo', 'date', 'partyName', 'quantity', 'rate', 'amount', 'gstAmount', 'gstPer', 'narration', 'productNarration', 'cgstAmount', 'sgstAmount', 'igstAmount', 'gstNum', 'transaction_type', 'partyLedger', 'total']).populate(\"salesLedger\").populate(\"cgstLedger\").populate(\"sgstLedger\").populate(\"igstLedger\").populate(\"partyLedger\").populate(\"itemName\"); // let ledgers = await Ledger.find({ fileId: fileObj._id, isSaved: false })\n        //     .select([\n        //         'fileId',\n        //         'parent',\n        //         'name',\n        //         'state',\n        //         'address',\n        //         'pincode',\n        //         '__enc_name',\n        //         '__enc_parent',\n        //     ])\n        //     .populate('fileId', {\n        //         name: 1,\n        //         guid: 1,\n        //         __enc_name: 1,\n        //         tallyId: 1,\n        //     });\n        // console.log(\"transactionList -> ledgers\", ledgers)\n\n        result.push({\n          file: fileObj,\n          transactions: record,\n          ledgers: {}\n        });\n      }\n    }));\n    console.log(\"transactionList -> result\", result);\n    return res.ok(result, message.message.FILE_PUSH_AVAILABLE);\n  } catch (error) {\n    console.log('error :>> ', error);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(error),\n      request: req.body,\n      userId: req.user._id\n    });\n    return res.serverError({}, error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/sales/update",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "sales",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "SalesController",
                "service": "SalesController",
                "descriptions": "",
                "functionName": "updateTransactions",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  try {\n    let body = req.body;\n    const loggedInUser = req.user;\n\n    if (!body.transactionIds) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    await Sales.update({\n      _id: body.transactionIds\n    }, {\n      $set: {\n        isSaved: true,\n        tallyStatus: TALLY_STATUS.ADD_IN_TALLY\n      }\n    }, {\n      multi: true\n    });\n\n    if (body.transactionIds.length > 0) {\n      // notification\n      const notifyObj = {\n        message: 'Statement successfully added in tally.',\n        playerId: loggedInUser.playerId\n      };\n      await NotificationService.sendNotification(notifyObj);\n    }\n\n    await Document.update({\n      loaderStatus: true,\n      userId: loggedInUser._id\n    }, {\n      $set: {\n        loaderStatus: false\n      }\n    }, {\n      multi: true\n    });\n    await User.update({\n      _id: loggedInUser._id\n    }, {\n      $set: {\n        loaderStatus: false\n      }\n    });\n    return res.ok({}, message.message.OK);\n  } catch (error) {\n    console.log('error :>> ', error);\n    return res.serverError(error);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/items/add-item",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "items",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "ItemController",
                "service": "ItemController",
                "descriptions": "",
                "functionName": "addItem",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Device",
                "method": "post",
                "api": "/v1/items/addStockItemGroup",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "items",
                "controllerFilePath": "/src/controllers/Device",
                "controllerFileName": "ItemController",
                "service": "ItemController",
                "descriptions": "",
                "functionName": "addStockItemGroup",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/syncBills",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "addBill",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/expense",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getVoucherAccordingToPartyExpense",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/totalexpense",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getTotalPartyExpense",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/income",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getVoucherAccordingToPartyIncome",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/totalincome",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getTotalPartyIncome",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/purchases",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getAllPurchase",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/sales",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getAllSales",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/receipt",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getAllReceipt",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/v1/vouchers/payment",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getAllPayment",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/v1/vouchers/getLastSyncDate",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getLastSyncDate",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "get",
                "api": "/v1/vouchers/getSubscribeFileList",
                "routeFilePath": "/src/routes/Device",
                "routeFileName": "voucherInfo",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "BillByBillController",
                "service": "BillByBillController",
                "descriptions": "",
                "functionName": "getSubscribeFileList",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "post",
                "api": "/payment/paytm/generate-checksum",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "paytm",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "PaytmController",
                "service": "PaytmController",
                "descriptions": "",
                "functionName": "generateChecksum",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "post",
                "api": "/payment/paytm/verify-checksum",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "paytm",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "PaytmController",
                "service": "PaytmController",
                "descriptions": "",
                "functionName": "verifyChecksum",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Payment",
                "method": "post",
                "api": "/payment/paytm/webhook-transaction-status-callback/:id",
                "routeFilePath": "/src/routes/Payment",
                "routeFileName": "paytm",
                "controllerFilePath": "/src/controllers/Payment",
                "controllerFileName": "PaytmController",
                "service": "PaytmController",
                "descriptions": "",
                "functionName": "webHookTransactionStatusCallback",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/login",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "login",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/logout",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Common",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "logout",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/refresh-tokens",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "refreshTokens",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/forgot-password",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "forgotPassword",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/reset-password",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resetPassword",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/change-password",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "changePassword",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/reset-password-otp-verify",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resetPasswordOtpVerify",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/verifyOtp",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "verifyOtp",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/resend-login-otp",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resendLoginOtp",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/resend-email-otp",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resendEmailOtp",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/auth/resend-mobile-otp",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "auth",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "AuthController",
                "service": "AuthController",
                "descriptions": "",
                "functionName": "resendMobileOtp",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/files/paginate",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "getFiles",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "get",
                "api": "/end-user/files/get-file/:documentId",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "getFileByDocumentId",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "get",
                "api": "/end-user/files/:fileId",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "file",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "FilesController",
                "service": "FilesController",
                "descriptions": "",
                "functionName": "getFile",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/documents/file-upload",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "document",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "DocumentController",
                "service": "DocumentController",
                "descriptions": "",
                "functionName": "uploadFiles",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": "async (req, res) => {\n  const loggedInUser = req.user;\n\n  try {\n    const params = req.body;\n\n    if (!utilService.isEmpty(req.files)) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    const file = await Files.findOne({\n      _id: params.fileId,\n      isDeleted: false,\n      'assignTo.userId': loggedInUser._id\n    });\n\n    if (!file) {\n      return res.badRequest({}, message.message.COMPANY_NOT_FOUND);\n    }\n\n    const uploadedFile = req.files;\n    console.log('uploadedFile :--------------->> ', uploadedFile);\n    const isFileValid = await CommonService.checkFileMimeType(uploadedFile.files.mimetype);\n\n    if (!isFileValid) {\n      return res.badRequest(null, message.message.INVALID_FILE_TYPE);\n    }\n\n    let fileName = uploadedFile.files.name;\n    fileName = fileName.split('.').join('-' + Date.now() + '.'); // eslint-disable-next-line new-cap\n\n    const extension = fileName.split('.').pop();\n\n    if (!utilService.getFileType(extension)) {\n      return res.badRequest(null, message.message.BAD_REQUEST);\n    }\n\n    const type = utilService.getFileType(extension); // eslint-disable-next-line no-unused-vars\n\n    const filePath = `${loggedInUser.parentId}/${params.tallyId}-${params.fileId}/Document/`;\n    const result = await AwsService.uploadFilesToS3(uploadedFile.files.data, `${filePath}${fileName}`);\n\n    if (result && result.ETag) {\n      const fileUrl = `${FILE.S3.baseUrl}${filePath}${fileName}`;\n      const documentObj = {};\n      documentObj.userId = loggedInUser.parentId;\n      documentObj.type = type;\n      documentObj.isUpload = true;\n      documentObj.fileId = params.fileId;\n      documentObj.path = fileUrl;\n      documentObj.name = fileName;\n      documentObj.status = DOC_STATUS.PENDING;\n      documentObj.destinationPath = `${loggedInUser.parentId}/${params.tallyId}-${params.fileId}/Transaction/`;\n      const documents = await Document(documentObj).save();\n      await FileService.manageDocumentCount(documents);\n      await AwsService.createAllFolder(`${loggedInUser.parentId}/${params.tallyId}-${params.fileId}`);\n      return res.ok(documents, message.message.FILE_UPLOAD_SUCCESS);\n    }\n\n    return res.ok({}, message.message.FILE_UPLOAD_FAIL);\n  } catch (e) {\n    console.log(e);\n    await ErrorLogsService.create({\n      type: ERROR_TYPE.SERVER,\n      message: JSON.stringify(e),\n      request: req.body,\n      userId: loggedInUser._id\n    });\n    return res.serverError(e, message.message.SERVER_ERROR);\n  }\n}"
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "get",
                "api": "/end-user/documents/:documentsId",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "document",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "DocumentController",
                "service": "DocumentController",
                "descriptions": "",
                "functionName": "getDocument",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "Mobile",
                "method": "post",
                "api": "/end-user/documents/paginate",
                "routeFilePath": "/src/routes/Mobile",
                "routeFileName": "document",
                "controllerFilePath": "/src/controllers/Mobile",
                "controllerFileName": "DocumentController",
                "service": "DocumentController",
                "descriptions": "",
                "functionName": "getDocuments",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/report/getList",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "partyReport",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PartyReportController",
                "service": "PartyReportController",
                "descriptions": "",
                "functionName": "getList",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/report/getDetails",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "partyReport",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PartyReportController",
                "service": "PartyReportController",
                "descriptions": "",
                "functionName": "getDetails",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            },
            {
                "policies": [],
                "platform": "User",
                "method": "post",
                "api": "/report/getSummary",
                "routeFilePath": "/src/routes/User",
                "routeFileName": "partyReport",
                "controllerFilePath": "/src/controllers/User",
                "controllerFileName": "PartyReportController",
                "service": "PartyReportController",
                "descriptions": "",
                "functionName": "getSummary",
                "headers": [],
                "queryBuilder": [
                    {
                        "queryMode": "codeBlock",
                        "code": false
                    }
                ]
            }
        ]
    },
    "packages": {
        "dependencies": {
            "asn1": "^0.2.4",
            "aws-sdk": "^2.805.0",
            "axios": "^0.21.1",
            "bcryptjs": "^2.4.3",
            "body-parser": "^1.19.0",
            "compression": "^1.7.4",
            "cors": "^2.8.5",
            "cross-env": "^7.0.0",
            "crypto": "^1.0.1",
            "csvtojson": "^2.0.10",
            "dotenv": "^8.2.0",
            "ejs": "^3.1.5",
            "ejs-lint": "^1.1.0",
            "email-templates": "^8.0.2",
            "exceljs": "^4.2.1",
            "express": "^4.17.1",
            "express-fileupload": "^1.2.0",
            "express-mongo-sanitize": "^2.0.0",
            "express-rate-limit": "^5.0.0",
            "fs": "0.0.1-security",
            "helmet": "^4.1.0",
            "http-status": "^1.4.0",
            "joi": "^17.3.0",
            "jsonwebtoken": "^8.5.1",
            "jwt-decode": "^3.1.2",
            "lodash": "^4.17.20",
            "moment": "^2.24.0",
            "mongoose": "^5.7.7",
            "mongoose-field-encryption": "^4.0.1",
            "morgan": "^1.9.1",
            "multer": "^1.4.2",
            "node-cron": "^2.0.3",
            "nodemailer": "^6.4.17",
            "passport": "^0.4.0",
            "passport-jwt": "^4.0.0",
            "pm2": "^4.1.2",
            "referral-code-generator": "^1.0.8",
            "socket.io": "^3.1.1",
            "swagger-jsdoc": "^4.0.0",
            "swagger-ui-express": "^4.1.4",
            "util": "^0.12.3",
            "uuid": "^8.3.1",
            "validator": "^13.0.0",
            "winston": "^3.2.1",
            "xls-to-json": "^2.1.0",
            "xlsx": "^0.17.0",
            "xss-clean": "^0.1.1"
        },
        "devDependencies": {
            "coveralls": "^3.0.7",
            "eslint": "^7.0.0",
            "eslint-config-airbnb-base": "^14.0.0",
            "eslint-config-prettier": "^6.4.0",
            "eslint-plugin-import": "^2.18.2",
            "eslint-plugin-jest": "^24.0.1",
            "eslint-plugin-prettier": "^3.1.1",
            "eslint-plugin-security": "^1.4.0",
            "faker": "^5.1.0",
            "husky": "^4.2.3",
            "jest": "^26.0.1",
            "lint-staged": "^10.0.7",
            "node-mocks-http": "^1.8.0",
            "nodemon": "^2.0.0",
            "prettier": "^2.0.5",
            "supertest": "^4.0.2"
        },
        "scripts": {
            "start": "pm2 start ecosystem.config.json --no-daemon",
            "dev": "cross-env NODE_ENV=development nodemon src/index.js --ignore ./token.json",
            "test": "jest -i",
            "test:watch": "jest -i --watchAll",
            "coverage": "jest -i --coverage",
            "coverage:coveralls": "jest -i --coverage --coverageReporters=text-lcov | coveralls",
            "lint": "eslint .",
            "lint:fix": "eslint . --fix",
            "prettier": "prettier --check **/*.js",
            "prettier:fix": "prettier --write **/*.js",
            "docker:prod": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up",
            "docker:dev": "docker-compose -f docker-compose.yml -f docker-compose.dev.yml up",
            "docker:test": "docker-compose -f docker-compose.yml -f docker-compose.test.yml up"
        }
    },
    "hooks": {
        "Document": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const documents = this;\n  documents.createdAt = moment().toISOString();\n  documents.date = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "ErrorLogs": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const errorLogs = this;\n  errorLogs.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Files": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const files = this;\n  files.createdAt = moment().toISOString();\n  files.normalizeName = files.name.toLowerCase();\n  return next();\n}"
                }
            ]
        },
        "Items": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const items = this;\n  items.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Ledger": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const ledger = this;\n  ledger.createdAt = moment().toISOString();\n  ledger.normalizeName = ledger.name.toLowerCase();\n  return next();\n}"
                }
            ]
        },
        "MarketingMaterial": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const materials = this;\n  materials.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Master": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const master = this;\n  master.createdAt = moment().toISOString();\n\n  if (master.name) {\n    master.normalizedName = master.name.toLowerCase();\n  }\n\n  return next();\n}"
                }
            ]
        },
        "ParentGroup": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const parentGroup = this;\n  parentGroup.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Payment": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const payment = this;\n  payment.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "PendingBill": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const PendingBill = this;\n  PendingBill.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Permission": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const permissions = this;\n  permissions.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Plans": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const plan = this;\n  plan.createdAt = moment().toISOString();\n  plan.normalizedName = String(plan.planName).toLocaleLowerCase() || \"\";\n  return next();\n}"
                }
            ]
        },
        "ProjectConfig": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const projectConfig = this;\n  projectConfig.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Purchase": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const purchase = this;\n  purchase.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "PushNotifications": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const pushNotification = this;\n  pushNotification.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "ReleaseNote": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const releaseNote = this;\n  releaseNote.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "SPTransaction_Temp": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const sales = this;\n  sales.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Sales": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const sales = this;\n  sales.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "SeriesGenerator": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const payment = this;\n  payment.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "StockItemGodown": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const stockItemGodown = this;\n  stockItemGodown.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "StockItemParentCategory": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const stockItemParentCategory = this;\n  stockItemParentCategory.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "StockItemParentGroup": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const stockItemParentGroup = this;\n  stockItemParentGroup.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "StockItemUnit": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const stockItemUnit = this;\n  stockItemUnit.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "TransactionKeys": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const transactionKey = this;\n  transactionKey.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "TransactionTrack": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const transactionTrack = this;\n  transactionTrack.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "Transactions": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const transactions = this;\n  transactions.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "User": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const user = this;\n\n  if (user.isModified('password')) {\n    user.password = await bcrypt.hash(user.password, 8);\n  }\n\n  user.createdAt = moment().toISOString();\n\n  if (user.name) {\n    user.normalizeName = user.name.toLowerCase();\n  } // if (user.email) {\n  //     await UserService.sendEmailVerificationOtp(user, user.email);\n  // }\n\n\n  // if (user.email) {\n  //     await UserService.sendEmailVerificationOtp(user, user.email);\n  // }\n  return next();\n}"
                }
            ],
            "post": [
                {
                    "operation": "save",
                    "code": "{\n  if (user.role === USER_ROLE.USER) {\n    const promise = new Promise(async (resolve, reject) => {\n      await AwsService.createUserFolderToS3(user._id);\n    });\n  }\n}"
                }
            ]
        },
        "Version": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const version = this;\n  version.createdAt = moment().toISOString();\n  version.normalizeName = version.name.toLowerCase();\n  return next();\n}"
                }
            ]
        },
        "Vouchers": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const voucher = this;\n  voucher.createdAt = moment().toISOString();\n  voucher.updatedAt = voucher.createdAt;\n  return next();\n}"
                }
            ]
        },
        "ZohoSubscriptionHistory": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const ZohoSubscriptionHistory = this;\n  ZohoSubscriptionHistory.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "ZohoSubscriptions": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const zohoSubscription = this;\n  zohoSubscription.createdAt = moment().toISOString();\n  return next();\n}"
                }
            ]
        },
        "user.model": {
            "pre": [
                {
                    "operation": "save",
                    "code": "{\n  const user = this;\n\n  if (user.isModified('password')) {\n    user.password = await bcrypt.hash(user.password, 8);\n  }\n\n  next();\n}"
                }
            ]
        }
    },
    "modelIndexes": {}
}