const express = require('express');
const router = express.Router();
<%_if(SOCIAL_PLATFORMS.length){ _%>
const session = require('express-session');
<%_}_%>
const adaptRequest = require("../../helpers/adaptRequest");
const sendResponse = require("../../helpers/sendResponse");
const authController = require("../../controller/<%-PLATFORM%>/authentication");
const auth = require('../../middleware/auth');
<%_if(typeof LOGIN_RATE_LIMIT === "object" && LOGIN_RATE_LIMIT !== null){ var rate=true;_%>
const rateLimit = require("express-rate-limit");
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: <%=LOGIN_RATE_LIMIT.max%>, // limit each IP to 100 requests per windowMs
  message:{message:"Too many times try to login from this IP, please try again after 15 minutes"}
});
<%_}_%>
router.post("/register",(req,res,next)=>{
  req = adaptRequest(req);
  authController.register({data:req.body}).then((result)=>{
    sendResponse(res,result);
  })
});
router.post('/login',<%_if(rate){_%>limiter,<%_}_%>(req,res,next)=>{
req = adaptRequest(req);
authController.authentication(req).then((result) => {
sendResponse(res,result)
})
.catch((error) => {
sendResponse(res,error);
});
})
router.post("/forgot-password", (req, res, next) => {
req = adaptRequest(req);
authController.forgotPassword(req.body).then((result) => {
sendResponse(res, result)
})
.catch((error) => {
sendResponse(res, error)
});
})
router.post("/validate-otp",(req,res,next)=>{
req = adaptRequest(req);
authController.validateResetPasswordOtp(req.body).then((result) => {
sendResponse(res, result)
})
.catch((error) => {
sendResponse(res, error)
});
})
router.put("/reset-password",(req,res,next)=>{
req = adaptRequest(req);
authController.resetPassword(req.body).then((result) => {
sendResponse(res, result)
})
.catch((error) => {
sendResponse(res, error)
});
})
<%_if(SOCIAL_PLATFORMS.length) { 
  SOCIAL_PLATFORMS.forEach(s=>{ _%>
router.get("/<%-s.toLowerCase()%>",(req,res,next)=>{
req = adaptRequest(req);
req.session.platform = <%=PLATFORM%>
res.redirect(`http://localhost:${process.env.PORT}/auth/<%-s.toLowerCase()%>`);
})
<%_})_%>
<%_}_%>
<%_ returnRole = makePolicyRoutes('logout')_%>
router.post('/logout',auth(...<%=returnRole.LOGOUT_API%>),(req,res,next)=>{
  req = adaptRequest(req);
  authController.logout(req).then((result) => {
  sendResponse(res, result)
  })
  .catch((error) => {
  sendResponse(res, error)
  });
});

module.exports = router;

<%_ function makePolicyRoutes(type){
    try{
        let returnRoles = {}
        returnRoles.LOGOUT_API = []
            for (var [i, v] of Object.entries(LOGIN_ACCESS_PLATFORM)) {
                switch (type) {
                    case 'logout':
                        returnRoles.LOGOUT_API.push(`logoutBy${i}In${MODULE.charAt(0).toUpperCase() + MODULE.slice(1)}Platform`);
                        break;
                    default:
                        break;
                }
            }
       return returnRoles;
    }catch(error){
        throw error;
    }
}_%>
