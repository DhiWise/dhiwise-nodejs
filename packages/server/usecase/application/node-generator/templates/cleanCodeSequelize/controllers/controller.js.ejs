const response = require('../../../utils/response');
const responseHandler = require('../../../utils/response/responseHandler'); 
const {Op} = require("sequelize");
<%_ var methods = [] _%>

<%_for(let i=0;i< SUPPORT_API.length;i++){ _%>
  <%_ if(SUPPORT_API[i].method=="create") {_%>
      <%_methods.push('add'+DB_MODEL_FC) _%> 
      const add<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) => {
          try {
            let dataToCreate = { ...req.body || {} };
            delete dataToCreate.updatedBy
            <%_ if(SUPPORT_API[i].isLogin){ _%>
            dataToCreate.<%-SUPPORT_API[i].addedBy%> = req.user.id.toString();
            <%_ } _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase(dataToCreate);
              <%_if(SUPPORT_API[i].fieldSelection){_%>
              result.data = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result.data);
              <%_}_%>
              return responseHandler(res,result);
            } catch (error) {
               return responseHandler(res,response.internalServerError({message:error.message}));
            }
          };
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="createBulk") {_%>
    <%_methods.push('bulkInsert'+DB_MODEL_FC) _%>
    const bulkInsert<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res)=>{
      try{
        let dataToCreate = req.body && req.body.data ? [...req.body.data] : [];
        <%_ if(SUPPORT_API[i].isLogin){ _%>
        dataToCreate.map((item) => { item.<%-SUPPORT_API[i].addedBy%> = req.user.id; return item });
        <%_ } _%>
        let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase(dataToCreate);
        <%_if(SUPPORT_API[i].fieldSelection){_%>
          if(result.data.length){
            for(let i=0;i< result.data.length; i++){
              result.data[i] = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result.data[i]);
            }
          }
        <%_}_%>
        return responseHandler(res,result);
      }catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
      }
    }
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="partialUpdate") {_%>
    <%_methods.push('partialUpdate'+DB_MODEL_FC) _%>
    const partialUpdate<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) =>  async (req,res) =>{
        try {
          if(!req.params.id){
            return responseHandler(res,response.badRequest());
          }
          let query = { id: req.params.id};
          let dataToUpdate = {...req.body || {}};
          <%_ if(SUPPORT_API[i].isLogin){ _%>
          delete dataToUpdate["addedBy"]
          dataToUpdate.updatedBy=req.user.id
          <%_ } _%> 
          let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({dataToUpdate,query});
          <%_if(SUPPORT_API[i].fieldSelection){_%>
            if(Object.keys(result.data).length){
              result.data = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result.data);
            }
          <%_}_%>
          return responseHandler(res,result);
        } catch (error){
          return responseHandler(res,response.internalServerError({message:error.message}));
        }
      }
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="update") {_%>
    <%_methods.push('update'+DB_MODEL_FC) _%>
    const update<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) =>{
      try {
        if(!req.params.id){
          return responseHandler(res,response.badRequest());
        }
        let dataToUpdate = { ...req.body || {} };
        let query = { id: req.params.id};
        <%_ if(SUPPORT_API[i].isLogin){ _%>
          delete dataToUpdate.addedBy;
          dataToUpdate.updatedBy = req.user.id;
          <%_ } _%>
          
          let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({dataToUpdate,query});
          <%_if(SUPPORT_API[i].fieldSelection){_%>
            if(Object.keys(result.data).length){
              result.data = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result.data);
            }
          <%_}_%>
          return responseHandler(res,result);
        }
        catch (error){
          return responseHandler(res,response.internalServerError({message:error.message}));
        }
      }
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="bulkUpdate") {_%>
    <%_methods.push('bulkUpdate'+DB_MODEL_FC) _%>
    const bulkUpdate<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) =>  async(req,res) =>{
      try{
        let dataToUpdate = { ...req.body.data || {} };
        let query = { ...req.body.filter || {} };
        <%_ if(SUPPORT_API[i].isLogin){ _%>
          delete dataToUpdate.addedBy;
          dataToUpdate.updatedBy=req.user.id
        <%_ } _%>
        <%_         
          nestedCalls={}
          if(SUPPORT_API[i].IS_NESTED_CALL){
              nestedCalls = SUPPORT_API[i].NESTED_CALLS
              if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                  for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                  data.filter = <%=JSON.parse(element.filter)%>                                            
                  <%_}}
              }                
          }
          _%>
          let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({dataToUpdate,query});
          return responseHandler(res,result);
      }catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
      }
    }
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="delete") {_%>
    <%_methods.push('delete'+DB_MODEL_FC) _%>
      const delete<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res)=>{
        try {
          if(!req.params.id){
            return responseHandler(res,response.badRequest());
          }
          let query = {id:req.params.id};
          <%_         
          nestedCalls={}
          if(SUPPORT_API[i].IS_NESTED_CALL){
              nestedCalls = SUPPORT_API[i].NESTED_CALLS
              if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                  for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                      <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>    
                  <%_}}
              }                
          }
          _%>
          return await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,isWarning:req.body.isWarning || false});
        } catch (error) {
          return responseHandler(res,response.internalServerError({message:error.message}));
        }
      }
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="deleteMany") {_%>
      <%_methods.push('deleteMany'+DB_MODEL_FC) _%>
      <%_ if(DELETE_DEPENDENT_MODEL){ _%>
  const deleteMany<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
      try{
        if(!req.body || !req.body.ids){
          return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = {id:{[Op.in]: ids}}

        return await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,isWarning:req.body.isWarning || false,req,res});
        return responseHandler(res,result);
      }
      catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
      }
    }
  <%_ } else { _%>
  const deleteMany<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req, res) => {
      try{
        if(!req.body || !req.body.ids){
          return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = {id:{[Op.in]: ids}};

        let result =  await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query},req,res);
        return responseHandler(res,result);
      }
      catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
      }
  }
  <%_ } _%>
  <%_ } _%>

  <%_ if(SUPPORT_API[i].method=="softDelete") {_%>
    <%_methods.push('softDelete'+DB_MODEL_FC) _%>
    const softDelete<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) =>  async(req,res)=>{
      try{
        if(!req.params.id){
            return responseHandler(res,response.badRequest());
        }
        let query = { id: req.params.id};
        <%_         
            nestedCalls={}          
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        <%-element.existingVariable%> = <%=JSON.parse(element.filter)%> 
                    <%_}}
                }                
            }
        _%>
        let dataToUpdate = {
            isDeleted: true,
            <%_if(SUPPORT_API[i].isAuth){ _%>
            updatedBy: req.user.id,
            <%_}_%>
        }
        let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,dataToUpdate,isWarning:req.body.isWarning || false});
        return responseHandler(res,result);
      }catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
      }
    }
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="softDeleteMany") {_%>
    <%_methods.push('softDeleteMany'+DB_MODEL_FC) _%>
    <%_ if(DELETE_DEPENDENT_MODEL){ _%>
        const softDeleteMany<%-DB_MODEL_FC%> =  (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) => {
            try{
                if(!req.body || !req.body.ids){
                    return responseHandler(res,response.badRequest());
                }
                let ids = req.body.ids;
                let query = {id:{[Op.in]: ids}}
                let dataToUpdate = {
                    isDeleted: true,
                    <%_if(SUPPORT_API[i].isLogin){ _%>
                    updatedBy: req.user.id,
                    <%_}_%>
                }

                if (ids && (Array.isArray(ids) && ids.length > 0)) {
                    <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
                    let query = {}
                    if (loggedInUser){
                        query = {
                            id: {
                                [Op.in]: ids,
                                [Op.ne]: loggedInUser.id
                            }
                        }
                    } else{
                        return response.badRequest();
                    }
                    <%_}else{_%>
                        let query = {id:{[Op.in]: ids,}}
                    <%_}_%>
                    let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,dataToUpdate,isWarning:req.body.isWarning || false},req,res);
                    return responseHandler(res,result);
                }
                return response.badRequest();
            }catch(error){
                return responseHandler(res,response.internalServerError({message:error.message}));
            }
        }
  <%_ } else { _%>
  const softDeleteMany<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) => {
    try{
        if(!req.body || !req.body.ids){
            return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = {id:{[Op.in]: ids}}
        let dataToUpdate = {
            isDeleted: true,
            <%_if(SUPPORT_API[i].isLogin){ _%>
            updatedBy: req.user.id,
            <%_}_%>
        }
        <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query= {...query,...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
        _%>
        let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,dataToUpdate},req,res);
        return responseHandler(res,result);
      }catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
      }
  }
  <%_ } _%>
  <%_ } _%>

  <%_ if(SUPPORT_API[i].method=="findAll") {_%>
    <%_methods.push('findAll'+DB_MODEL_FC) _%>
      const findAll<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) => {
        try {
            let query= req.body && req.body.query ? {...req.body.query} : {};
            let options= req.body && req.body.options ? {...req.body.options} : {};
            <%_if(SUPPORT_API[i].fieldSelection){_%>
            if(options && options.select && options.select.length){
                options.attributes = <%=SUPPORT_API[i].fields%>.filter(Set.prototype.has, new Set(options.select));
            }else{
                options.attributes=<%=SUPPORT_API[i].fields%>
            }
            <%_} else {_%>
            if(options && options.select && options.select.length){
            options.attributes = options.select;
            }
            <%_}_%>
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        <%-element.existingVariable%> = <%=JSON.parse(element.filter)%> 
                    <%_}}
                }                
            }
            _%> 
          let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,options,isCountOnly:req.body.isCountOnly || false});
          return responseHandler(res,result); 
        }
        catch (error){
          return responseHandler(res,response.internalServerError({message:error.message}));
        }
      };
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="findById") {_%>
    <%_methods.push('get'+DB_MODEL_FC) _%>
   const get<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) =>{
      try {
        if(!req.params.id){
            return responseHandler(res,response.badRequest());
        }
        let query = { id: req.params.id};
        let options = {};
        <%_if(SUPPORT_API[i].fieldSelection){_%>
            let fieldSelect = <%=SUPPORT_API[i].fields%>
            options.select = {
                ...options.select,
                ...fieldSelect
            }
        <%_}_%>
        let result =  await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query, options}); 
        return responseHandler(res,result); 
      }
      catch (error){
        return responseHandler(res,response.internalServerError({message:error.message}));
      }
    };
  <%_}_%>
  <%_ if(SUPPORT_API[i].method=="count") {_%>
    <%_methods.push('get'+DB_MODEL_FC+'Count') _%>
    const get<%-DB_MODEL_FC%>Count = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
        try {
          let where = {...req.body.where || {} };
          <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        where=...<%=JSON.parse(element.filter)%>                      
                    <%_}}
                }                
            }
          _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase(where); 
            return responseHandler(res,result);  
        } catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>
<%_}_%>

<%_if(typeof USER_MODEL !== "undefined" && USER_MODEL){_%>
  <%_
  methods.push('changePassword'); 
  methods.push('updateProfile'); 
  methods.push('getLoggedInUserInfo');  _%>
   
   const changePassword = (changePasswordUsecase) => async (req,res) => {
        try{
            let result = await changePasswordUsecase(req.body);
            return responseHandler(res,result);
        }catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }   
    const updateProfile = (updateProfileUsecase) => async (req,res) => {
        try{
            let result = await updateProfileUsecase(req.body,req.user.id);
            return responseHandler(res,result);
        }catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }   
    }

    const getLoggedInUserInfo = (get<%-DB_MODEL_FC%>Usecase) => async (req,res) =>{
        try {
            if(!req.user){
                return responseHandler(res,response.badRequest());
            }
            const query = {
                id : req.user.id,
                isDeleted: false,
                isActive:true
            };
            let result = await get<%-DB_MODEL_FC%>Usecase({query,options:{}});
            return responseHandler(res,result);
        } catch (error) {
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    };
  
<%_}_%>

<%_if(CUSTOM_ROUTES){_%>
  <%_CUSTOM_ROUTES.forEach((v,i)=>{ methods.push(v.functionName)_%>

  <%_if(typeof(v.descriptions)!=='undefined'){_%>
    /* 
    * <%-v.descriptions%>
    */
  <%_}_%>
  const <%-v.functionName%> = (<%-v.functionName%>Usecase) => async(req,res) =>{
    try{
      return await <%-v.functionName%>Usecase(req,res);
    }catch(error){
      return responseHandler(res,response.internalServerError({message:error.message}));
    }
  }
  <%_});_%>
<%_}_%>

module.exports = {
    <%-methods.join()%>
}

