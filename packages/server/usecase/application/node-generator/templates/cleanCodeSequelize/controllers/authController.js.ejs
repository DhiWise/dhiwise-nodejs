const dayjs = require("dayjs");
const { Op } = require('sequelize');

const message = require("../../../utils/messages");

function makeAuthController({authService,makeUniqueValidation,<%-USER_MODEL%>Service,userAuthSettingService,userTokenService,make<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%><%_if(NOTIFICATION_TYPE==="EMAIL"){_%>,sendEmail<%_}else if(NOTIFICATION_TYPE==="SMS"){_%>,sendSMS<%_}_%>}){
    
    const register = async ({ data }) => {
        try {
            const originalData = data;
            const user = make<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>(originalData, "insertUserValidator");
            let unique = await makeUniqueValidation.uniqueValidation(user);
            if (!unique){
                return message.inValidParam({message:'User Registration Failed, Duplicate data found'});
            }
            const result = await <%-USER_MODEL%>Service.createOne(user);
            <%_if(NOTIFICATION_TYPE==="SMS"){_%>
            // send sms to user for successfully registered.
            let renderData = {
                <%_if(typeof REGISTER_TEMPLATE_ATTRIBUTE === "object"){_%>
                <%_for(let i in REGISTER_TEMPLATE_ATTRIBUTE){_%>
                <%-i%>:result.<%-REGISTER_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
                <%_}_%>
                <%_}else{_%>
                ...result
                <%_}_%>
            }
            const msg = await ejs.renderFile(`${__basedir}/views/<%-REGISTER_TEMPLATE_NAME%>/html.ejs`, renderData);
            let smsObj = {
                to:result.<%-MOBILE_FIELD%>,
                message:msg
            }
            await sendSMS(smsObj);
            <%_}else if(NOTIFICATION_TYPE==="EMAIL"){_%>
            // send email to user for successfully registered.
            let mailObj = {
                subject: "Register User",
                to: result.<%-EMAIL_FIELD%>,
                <%_if(typeof REGISTER_TEMPLATE_ATTRIBUTE === "object"){_%>
                template: "/views/<%-REGISTER_TEMPLATE_NAME%>",
                data:{
                    <%_for(let i in REGISTER_TEMPLATE_ATTRIBUTE){_%>
                    <%-i%>:result.<%-REGISTER_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
                    <%_}_%>
                }
                <%_}else if(!REGISTER_TEMPLATE_ATTRIBUTE){_%>
                template: "/views/<%-REGISTER_TEMPLATE_NAME%>",
                data:result
                <%_}_%>
            };
            await sendEmail(mailObj);
            <%_}_%>
            return message.successResponse({data:result});
        }
        catch (error) {
            if(error.name==="ValidationError"){
          return message.inValidParam({message:error.message});
        }
        return message.failureResponse();
        }
    }

    const forgotPassword = async (params) => {
        try {
            if (!params.email) {
                return message.insufficientParameters();
            }
            let where = { <%-EMAIL_FIELD%>: params.email };
            params.email = params.email.toString().toLowerCase();
            let user = await <%-USER_MODEL%>Service.findOne(where)
            if (user) {
                let { resultOfEmail, resultOfSMS } = await authService.sendResetPasswordNotification(user);
                if (resultOfEmail && resultOfSMS) {
                    return message.requestValidated({message :"otp successfully send."});
    
                } else if (resultOfEmail && !resultOfSMS) {
                    return message.requestValidated({message :"otp successfully send to your email."});
    
                } else if (!resultOfEmail && resultOfSMS) {
                    return message.requestValidated({message :"otp successfully send to your mobile number."});
                } else {
                    return message.failureResponse();
                }
            } else {
                return message.recordNotFound()
            }
        } catch (error) {
            return message.failureResponse();
        }
    }
    
    const validateResetPasswordOtp = async (params) => {
        try {
            if (!params || !params.otp) {
                return message.insufficientParameters();
            }
            let user = await userAuthSettingService.findOne({ resetPasswordCode: params.otp });
            if (!user || !user.resetPasswordCode) {
                return message.invalidRequest({message :"Invalid OTP"});
            }
            // link expire
            if (dayjs(new Date()).isAfter(dayjs(user.expiredTimeOfResetPasswordCode))) {
                return message.invalidRequest({message :"Your reset password link is expired."});
            }
            return message.requestValidated({message :'OTP Validated'});    
        } catch (error) {
            return message.failureResponse();
        }
    }
    
    const resetPassword = async (params) => {
        try {
            if (!params.code || !params.newPassword) {
                return message.insufficientParameters();
            }
            let user = await userAuthSettingService.findOne({ resetPasswordCode: params.code });
            if (user && user.expiredTimeOfResetPasswordCode) {
                if (dayjs(new Date()).isAfter(dayjs(user.expiredTimeOfResetPasswordCode))) {// link expire
                    return message.invalidRequest({message:"Your reset password link is expired."});
                }
            } else {
                // invalid Code
                return message.invalidRequest({message :"Invalid Code"});
            }
            let response = await authService.resetPassword(user.userId, params.newPassword);
            if (response && !response.flag) {
                 return message.requestValidated({message :response.data});
            } 
            return message.invalidRequest({message :response.data});
        } catch (error) {
            return message.failureResponse();
        }
    }

    const authentication = async (data)=>{
        try {
            let username = data.body.username;
            let password = data.body.password;
            let url = data.url;
            if(username && password){
                <%_if(ROLE_PERMISSION){_%>
                let roleAccess = false;
                if (data.body.includeRoleAccess){
                    roleAccess = data.body.includeRoleAccess;
                }
                let result = await authService.loginUser(username, password, url, roleAccess);
                <%_} else {_%>
                let result = await authService.loginUser(username, password, url);
                <%_}_%>
                if(!result.flag){
                    return message.loginSuccess({data:result.data});
                }
                return message.loginFailed({message :result.data}); 
            }
            return message.insufficientParameters();
        } catch (error) {
            return message.failureResponse();
        }
    }
    const logout = async (req) => {
        try {
            if (req.user) {
              let userTokens = await userTokenService.findOne({ token: (req.headers.authorization).replace('Bearer ', ''),userId:req.user.id });
              userTokens.isTokenExpired = true;
              let id = userTokens.id;
              delete userTokens.id;
              await userTokenService.updateByPk(id, userTokens.toJSON());
              return message.requestValidated({message :"Logged out Successfully"});
            }
            return message.badRequest();
        } catch (error) {
            return message.failureResponse();
        }
    }

    return Object.freeze({
        register,
        authentication,
        forgotPassword,
        resetPassword,
        validateResetPasswordOtp,
        logout,
    })
}

module.exports = makeAuthController