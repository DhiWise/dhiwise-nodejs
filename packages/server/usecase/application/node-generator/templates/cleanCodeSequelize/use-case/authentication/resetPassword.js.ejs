const dayjs = require("dayjs");
const bcrypt = require('bcrypt');
const response = require('../../utils/response');
const emailService = require('../../services/email/emailService');

const resetPassword = ({ <%-USER_MODEL-%>Db,userAuthSettingsDb }) => async (params) => {
    if (!params.code || !params.newPassword) {
        return response.badRequest()
    }
    let user = await userAuthSettingsDb.findOne({ resetPasswordCode: params.code });

    if (user && user.expiredTimeOfResetPasswordCode) {
        if (dayjs(new Date()).isAfter(dayjs(user.expiredTimeOfResetPasswordCode))) { // link expire
        return response.badRequest({ message: 'Your reset password link is expired.' });
        }
    } else {
        // invalid Code
        return response.badRequest({ message: 'Invalid Code' });
    }

    let where = { id: user.userId };    
    const dbUser = await <%-USER_MODEL%>Db.findOne(where);

    if (!dbUser) {
        return response.badRequest({message :  "User not found"});
    }
    let newPassword = await bcrypt.hash(params.newPassword, 8);

    let updatedUser = await <%-USER_MODEL%>Db.updateOne({id :user.userId}, {
        <%-PASSWORD_FIELD%>: newPassword
    });

     await userAuthSettingsDb.updateMany({userId:user.userId}, { resetPasswordCode: '', expiredTimeOfResetPasswordCode: null, <%-LOGIN_RETRY_LIMIT.key%>: 0 })

    let mailObj = {
        subject: 'Reset Password',
        to: user.<%-EMAIL_FIELD%>,
        template: '/views/successfullyResetPassword',
        data: {
            isWidth: true,
            email: user.<%-EMAIL_FIELD%> || '-',
            message: "Password Successfully Reset"
        }
    };
    await emailService.sendMail(mailObj);
    return response.success({message :"Password reset successfully"});
}
module.exports = resetPassword;