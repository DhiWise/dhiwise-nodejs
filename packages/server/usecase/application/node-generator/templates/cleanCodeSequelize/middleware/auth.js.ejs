/**
 * auth.js
 * @description :: middleware that checks authentication and authorization of user
 */

const { LOGIN_ACCESS,PLATFORM
<%_if(CUSTOM_ROUTES){_%><%_ for(let platform in CUSTOM_ROUTES){ _%>
,<%-platform.toUpperCase()%>_CUSTOM_ROUTES  
<%_ } _%>
<%_}_%>
} = require('../constants/authConstant');
const responseHandler = require('../utils/response/responseHandler');
const { unAuthorized } = require('../utils/response');


const verifyCallback = (userTokensDb, req, resolve, reject, platform) => async (error, user, info) => {
    if (error || info || !user) {
        return reject("Unauthorized User");
    }
    req.user = user;
    if (!user.isActive) {
        return reject("User is deactivated");
    }
    let userToken = await userTokensDb.findOne({token:(req.headers.authorization).replace('Bearer ',''),userId:user.id});
    if (!userToken){
        return reject('Token not found');
    }
    if (userToken.isTokenExpired){
        return reject('Token is Expired');
    }
    if (user.role) {
        let allowedPlatforms = LOGIN_ACCESS[user.role] ? LOGIN_ACCESS[user.role] : [];
        if (!allowedPlatforms.includes(platform)) {
            return reject('Unauthorized user');
        }
    }
    resolve();
};

const auth = ({passport, userTokensDb}) => (platform) => async (req, res, next) => {
<% var c = 0; %>
    <% PLATFORM.forEach((v)=>{ c++;  %>
        <%_ if(c===1){ _%>
            if(platform == PLATFORM.<%- v.toUpperCase() %>){
                return new Promise((resolve, reject) => {
                    passport.authenticate('<%-v.toLowerCase()%>-rule', { session: false }, verifyCallback(userTokensDb,req, resolve, reject, platform))(
                        req,
                        res,
                        next
                    );
                })
                .then(() => next())
                .catch((err) => {
                    responseHandler(res,unAuthorized());
                 });
            }
        <%_ }else{ _%>
            else if(platform == PLATFORM.<%- v.toUpperCase() %>){
                return new Promise((resolve, reject) => {
                    passport.authenticate('<%-v.toLowerCase()%>-rule', { session: false }, verifyCallback(userTokensDb,req, resolve, reject, platform))(
                        req,
                        res,
                        next
                    );
                })
                .then(() => next())
                .catch((error) => {
                    responseHandler(res,unAuthorized())
                 });
            }
        <%_ } _%> 
    <%  }) %>
   
};

module.exports = auth;
