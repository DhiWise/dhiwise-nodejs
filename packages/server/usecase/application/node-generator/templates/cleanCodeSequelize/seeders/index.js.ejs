<%_if(IS_AUTH){_%>
  const bcrypt = require('bcrypt') 
  const <%-AUTH_MODEL%>DbService = require('../data-access/<%-AUTH_MODEL%>Db');
  <%_if(SHOULD_ADD_ROLE_PERMISSION){_%>
    const authConstant=require('../constants/authConstant');
    const userRoleDbService = require('../data-access/userRoleDb');
    const routeRoleDbService = require('../data-access/routeRoleDb');
    const projectRouteDbService = require('../data-access/projectRouteDb');
    const roleDbService = require('../data-access/roleDb');
    const replaceAll = require('../utils/replaceAll')
  <%_}_%>
<%_}_%>
<%_if(IS_AUTH){_%>
    async function seedUser() {
      try{
        let userToBeInserted = {}
        <%_for(let i in USER_EXIST_CONDITION){_%>
          userToBeInserted = await <%-AUTH_MODEL%>DbService.findOne(<%-JSON.stringify(USER_EXIST_CONDITION[i])%>);
          <%_var finalStr = new String();
            USER[i].role=`@@authConstant.USER_ROLE.${ROLE_NAME[i]}@@`;
            finalStr = JSON.stringify(USER[i]);
            finalStr = finalStr.replace(/@@"/g, "").replace(/"@@/g, "");
          _%>
          if (!userToBeInserted) {  
            userToBeInserted = <%-finalStr%>
            await <%-AUTH_MODEL%>DbService.create(userToBeInserted);
          }else{
            userToBeInserted = <%-finalStr%>
            userToBeInserted.password = await bcrypt.hash(userToBeInserted.password, 8)
            await <%-AUTH_MODEL%>DbService.updateByQuery(<%-JSON.stringify(USER_EXIST_CONDITION[i])%>, userToBeInserted);
          }
        <%_}_%>
        console.info('User model seeded üç∫');
      }catch(error){
        console.log('User seeder failed due to ', error.message)
      }   
    }

  <%_if(SHOULD_ADD_ROLE_PERMISSION){_%>
    async function seedRole() {
      try {
        const roles = <%=ROLES%>;
        const insertedRoles = await roleDbService.findMany({ code: { '$in': roles.map(role => role.toUpperCase()) } });
        const rolesToInsert = [];
        roles.forEach(role => {
          if (!insertedRoles.find(insertedRole => insertedRole.code === role.toUpperCase())) {
            rolesToInsert.push({
              name: role,
              code: role.toUpperCase(),
              weight: 1
            });
          }
        });
        if (rolesToInsert.length) {
          const result = await roleDbService.createMany(rolesToInsert);
          if (result) console.log('Role seeded üç∫');
          else console.log('Role seeder failed!');
        } else {
          console.log('Role is up to date üç∫');
        }
      } catch (error) {
        console.log('Role seeder failed due to ', error.message);
      }
    }
  
    async function seedProjectRoutes (routes) {
      try {
        if (routes) {
          let routeName = '';
          const dbRoutes = await projectRouteDbService.findMany({});
          let routeArr = [];
          let routeObj = {};
          routes.forEach(route => {
            routeName = `${replaceAll((route.path).toLowerCase(), '/', '_')}`;
            route.methods.forEach(method => {
              routeObj = dbRoutes.find(dbRoute => dbRoute.route_name === routeName && dbRoute.method === method);
              if (!routeObj) {
                routeArr.push({
                  'uri': route.path.toLowerCase(),
                  'method': method,
                  'route_name': routeName,
                });
              }
            });
          });
          if (routeArr.length) {
            const result = await projectRouteDbService.createMany(routeArr);
            if (result) console.info('ProjectRoute model seeded üç∫');
            else console.info('ProjectRoute seeder failed.');
          } else {
            console.info('ProjectRoute is up to date üç∫');
          }
        }
      } catch (error) {
        console.log('ProjectRoute seeder failed due to ', error.message);
      }
    }
  

    async function seedRouteRole() {
      try{
        const routeRoles =[ 
          <%_for(let i=0;i < ROUTE_ROLE_ARRAY.length;i++){_%>
          <%=ROUTE_ROLE_ARRAY[i]%>,
          <%_}_%>

        ];
        if (routeRoles && routeRoles.length) {
          const routes = [...new Set(routeRoles.map(routeRole => routeRole.route.toLowerCase()))];
          const routeMethods = [...new Set(routeRoles.map(routeRole => routeRole.method))];
          const roles = <%=ROLES%>;
          const insertedProjectRoute = await projectRouteDbService.findMany({
            uri: { '$in': routes },
            method: { '$in': routeMethods },
            'isActive': true,
            'isDeleted': false
          });
          const insertedRoles = await roleDbService.findMany({
            code: { '$in': roles.map(role => role.toUpperCase()) },
            'isActive': true,
            'isDeleted': false
          });
          let projectRouteId = '';
          let roleId = '';
          let createRouteRoles = routeRoles.map(routeRole => {
            projectRouteId = insertedProjectRoute.find(pr => pr.uri === routeRole.route.toLowerCase() && pr.method === routeRole.method);
            roleId = insertedRoles.find(r => r.code === routeRole.role.toUpperCase());
            if (projectRouteId && roleId) {
              return {
                roleId: roleId.id,
                routeId: projectRouteId.id
              };
            }
          });
          createRouteRoles = createRouteRoles.filter(Boolean);
          const routeRolesToBeInserted = [];
          let routeRoleObj = {};
    
          await Promise.all(
            createRouteRoles.map(async routeRole => {
              routeRoleObj = await routeRoleDbService.findOne({
                routeId: routeRole.routeId,
                roleId: routeRole.roleId,
              });
              if (!routeRoleObj) {
                routeRolesToBeInserted.push({
                  routeId: routeRole.routeId,
                  roleId: routeRole.roleId,
                });
              }
            })
          );
          if (routeRolesToBeInserted.length) {
            const result = await routeRoleDbService.createMany(routeRolesToBeInserted);
            if (result) console.log('RouteRole seeded üç∫');
            else console.log('RouteRole seeder failed!');
          } else {
            console.log('RouteRole is up to date üç∫');
          }
        }
      }catch(error){
        console.log('RouteRole seeder failed due to ', error.message)
      }
    }
  
    async function seedUserRole (){
      try{
        const userRoles = <%-JSON.stringify(USER_ROLE_ARRAY)%>;
        const defaultRole = await roleDbService.findOne({ code: <%=DEFAULT_ROLE%> });
        const insertedUsers = await <%-AUTH_MODEL%>DbService.findMany({ username: { '$in': userRoles.map(userRole => userRole.username) } });
        let user = {};
        const userRolesArr = [];
        userRoles.map(userRole => {
          user = insertedUsers.find(user => user.username === userRole.username && user.isPasswordMatch(userRole.password) && user.isActive && !user.isDeleted);
          if (user) {
            userRolesArr.push({
              userId: user.id,
              roleId: defaultRole.id
            });
          }
        });
        let userRoleObj = {};
        const userRolesToBeInserted = [];
        if (userRolesArr.length) {
          await Promise.all(
            userRolesArr.map(async userRole => {
              userRoleObj = await userRoleDbService.findOne({
                userId: userRole.userId,
                roleId: userRole.roleId
              });
              if (!userRoleObj) {
                userRolesToBeInserted.push({
                  userId: userRole.userId,
                  roleId: userRole.roleId
                });
              }
            })
          );
          if (userRolesToBeInserted.length) {
            const result = await userRoleDbService.createMany(userRolesToBeInserted);
            if (result) console.log('UserRole seeded üç∫');
            else console.log('UserRole seeder failed');
          } else {
            console.log('UserRole is up to date üç∫');
          }
        }
      }catch(error){
        console.log('UserRole seeder failed due to ', error.message)
      }
    }
  <%_}_%>
<%_}_%>

async function seedData(<%_if(IS_AUTH && SHOULD_ADD_ROLE_PERMISSION){_%>allRegisterRoutes<%_}_%>){
<%_if(IS_AUTH){_%>
  await seedUser();
  <%_if(SHOULD_ADD_ROLE_PERMISSION){_%>
    await seedRole();
    await seedProjectRoutes(allRegisterRoutes);
    await seedRouteRole();
    await seedUserRole();
  <%_}_%>
<%_}_%>
};
module.exports = seedData;
