# NodeJS, Mongoose, Express Project in Clean-Code Architecture

**supported version of nodejs > 12**,
**supported version of mongoose-4.0**

- This is a Web application, developed using MVC pattern with Node.js, ExpressJS, and Mongoose ODM. 
- Basic boilerplate for web applications, built on Express.js using the clean-code architecture
- A MongoDB database is used for data storage, with object modeling provided by Mongoose.

## Initial
- Configure a basic server in app.js.
- Organize the routes with Express Router.
- Use the mainRoutes in app as middleware.
- Set a final use after the routes, to display a 404 message for the unhandled requests.
1. Install needed Node.js modules:
     ```$ npm install```
2. execute server:
     ```$ npm start```
	<%_if(IS_AUTH){_%>
3. When the app will run successfully,
<%_if(ROLE_WISE_CREDENTIALS){_%>
<%_for (let i in ROLE_WISE_CREDENTIALS){_%>
       
	   - One user with <%-i%> role,
		# Default <%-i%> credentials
		**username** : <%-ROLE_WISE_CREDENTIALS[i][USER_FIELD]%>
		**password** : <%-ROLE_WISE_CREDENTIALS[i][PASSWORD_FIELD]%>
		
<%_}_%> 
<%_}_%>	 
<%_}_%>


## Default Folder structure:

	--project_folder
		--config
		--constants
		--controller
		--entity
		--helpers
		--logs
		--middleware
		--model
		--postman
		--public
		--routes
		--services
		--utils
		--validation
		--views
		--app.js
		--.env
		--.gitignore
		--.eslintrc.js
## app.js
- Entry point of application.

## config
- Passport strategy for all platforms.
- Based on Auth Model - authentication files has been generated.
- Used .env file and configure the db connection string to use in the project.

## constants
- Contains files of constants

## controller
- Includes controller files per model
- Controllers are separated per Platform

     	  -controller
     	        -admin
     	            -model
     	                -index.js
     	                -controller.js
     	        -device
     	          -model
     	                -index.js
     	                -controller.js
     	        -desktop
     	          -model
     	                -index.js
     	                -controller.js
     	        -client
     	          -model
     	                -index.js
     	                -controller.js

## entity
- These are the business objects of your application. These should not be affected by any change external to them, and these should be the most stable code within your application. These can be POJOs, objects with methods, or even data structures.

## helper
- a helper function is used to assist in providing some functionality, which isn't the main goal of the application or class in which it is used.

## logs
- Log file

## middleware
- User authentication Middleware based on Roles and permission for Routes' access
- Custom Policy files

## model
- Mongoose Models, as per user defined schema 

## postman
- Postman collection File for Platform based APIs that are generated.
- Import this JSON in Postman to test the APIs.

## public 
- You can add static files like like images, pdf etc.

## routes
- Based on platform,separate folder is generated,within those folders model wise route files are that has model crud APIs' routes.
- index.js file, main file which includes all platform routes.
- Added index files in app.js to access the routes of the application.

## services
     	-auth.js
       		-Logic for JWT Tokenization for user to login into Application using username and password along with otp if required.
       	-mongoDbService.js
       	    - Database related operations
       	     -common Database functionalities
     	  	 -getAllDocuments(find all documents)
     	  	 -updateDocuments(update single documents in db)
     	  	 -deleteDocuments(delete single documents in db)
     	  	 -createDocuments(create single documents in db)
     	  	 -getDocumentByQuery(find single document)
			 -getSingleDocumentById(find by id)
     	  	 -softDelete
     	  	 -findExistData
     	  	 -bulkInsert(insert multiple documents in db)
     	  	 -bulkUpdate(update multiple documents in db)
     	  	 -countDocument
			 -Aggregation
       	    
## utils
     	-common.js
       		-converted object to enum function.
     	-messages.js
  		    -static messages that are sent with response - contains status and Data
	    -responseCode.js
  		    -codes for responses
	    -validateRequest.js
  		    -validate schema based on joi validation

## validation
- Joi validations files.
- Files are separated by models.

## views
- Add ejs files

