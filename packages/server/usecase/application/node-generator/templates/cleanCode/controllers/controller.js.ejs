const response = require('../../../utils/response');
const responseHandler = require('../../../utils/response/responseHandler'); 

<%_ var methods = [] _%>
<%_for(let i=0;i< SUPPORT_API.length;i++){_%>
<%_ if(SUPPORT_API[i].method=="create") {_%>
    <%_methods.push('add'+DB_MODEL_FC) _%> 
    const add<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
        try{
            let dataToCreate = {...req.body || {} };
            <%_ if(SUPPORT_API[i].isLogin){ _%>
            dataToCreate.<%-SUPPORT_API[i].addedBy%> = req.user.id;
            <%_ } _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase(dataToCreate);
            <%_if(SUPPORT_API[i].fieldSelection){_%>
            <%_SUPPORT_API[i].fields.push("id")_%>
            result.data = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result.data);
            <%_}_%>
            return responseHandler(res,result);
        }catch(error){
          return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="createBulk") {_%>
    <%_methods.push('bulkInsert'+DB_MODEL_FC) _%>
    const bulkInsert<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
        try{
            let dataToCreate = req.body && req.body.data ? [...req.body.data] : [];
            <%_ if(SUPPORT_API[i].isLogin){ _%>
            dataToCreate.map((item) => { item.<%-SUPPORT_API[i].addedBy%> = req.user.id; return item });
            <%_ } _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase(dataToCreate);
            <%_if(SUPPORT_API[i].fieldSelection){_%>
            if(result.data.length){
                for(let i=0;i< result.data.length; i++){
                result.data[i] = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result.data[i]);
                }
            }
            <%_}_%>
            return responseHandler(res,result);
        }catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="update") {_%>
    <%_methods.push('update'+DB_MODEL_FC) _%>
    const update<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) =>{
        try{
            if(!req.params.id){
                return responseHandler(res,response.badRequest());
            }
            let dataToUpdate = { ...req.body || {} };
            let query = { _id: req.params.id};
            <%_ if(SUPPORT_API[i].isLogin){ _%>
            delete dataToUpdate.addedBy;
            dataToUpdate.<%-SUPPORT_API[i].updatedBy%>=req.user.id
            <%_ } _%>
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query = { ...query, ...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
            _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({dataToUpdate,query});
            <%_if(SUPPORT_API[i].fieldSelection){_%>
            if(Object.keys(result.data).length){
                result.data = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result.data);
            }
            <%_}_%>
            return responseHandler(res,result);
        } catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="bulkUpdate") {_%>
    <%_methods.push('bulkUpdate'+DB_MODEL_FC) _%>
    const bulkUpdate<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
        try{
            let dataToUpdate = { ...req.body.data || {} };
            let query = { ...req.body.filter || {} };
            <%_ if(SUPPORT_API[i].isLogin){ _%>
            delete dataToUpdate.<%-SUPPORT_API[i].addedBy%>;
            dataToUpdate.<%-SUPPORT_API[i].updatedBy%>=req.user.id
            <%_ } _%>
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query = { ...query, ...<%=JSON.parse(element.filter)%>}           
                    <%_}}
                }                
            }
            _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({dataToUpdate,query});
            return responseHandler(res,result);
        }catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="findAll") {_%>
    <%_methods.push('findAll'+DB_MODEL_FC) _%>
    const findAll<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
        try{
            let query= req.body && req.body.query ? {...req.body.query} : {};
            let options= req.body && req.body.options ? {...req.body.options} : {};
            <%_         
                nestedCalls={}
                if(SUPPORT_API[i].IS_NESTED_CALL){
                    nestedCalls = SUPPORT_API[i].NESTED_CALLS
                    if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                        for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                            query = { ...query, ...<%=JSON.parse(element.filter)%>}
                        <%_}}
                    }                
                }
            _%>
            <%_if(typeof VIRTUAL !== "undefined"){
            let populate = [];
            for(let v of VIRTUAL){
                populate.push({
                    path:v.fieldName
                })
            }
            _%>
            if (!options.populate) options.populate = [];
            options.populate = options.populate.concat(<%= populate %>);
            <%_}_%>
            <%_if(SUPPORT_API[i].fieldSelection){_%>
            if(options.select && options.select.length){
                options.select = <%=SUPPORT_API[i].fields%>.concat(options.select);
            }else{
                options.select=<%=SUPPORT_API[i].fields%>
            }
            <%_}_%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,options,isCountOnly:req.body.isCountOnly || false});
            return responseHandler(res,result);
        } catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="partialUpdate") {_%>
    <%_methods.push('partialUpdate'+DB_MODEL_FC) _%>
const partialUpdate<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) => {
    try {
        if(!req.params.id){
            return responseHandler(res,response.badRequest());
        }
        let query = { _id: req.params.id};
        let dataToUpdate = {...req.body || {}};
        <%_ if(SUPPORT_API[i].isLogin){ _%>
        delete dataToUpdate["addedBy"]
        dataToUpdate.<%-SUPPORT_API[i].updatedBy%>=req.user.id
        <%_ } _%> 
        let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({dataToUpdate,query});
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        if(Object.keys(result.data).length){
            result.data = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result.data);
        }
        <%_}_%>
        return responseHandler(res,result);
    } catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="findById") {_%>
    <%_methods.push('get'+DB_MODEL_FC) _%>
    const get<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) =>{
        try{
            if(!req.params.id){
                return responseHandler(res,response.badRequest());
            }
            let query = { _id: req.params.id};
            let options = {};
            <%_if(SUPPORT_API[i].fieldSelection){_%>
            options.select = getSelectObject(<%=SUPPORT_API[i].fields%>)
            <%_}_%>
            <%_if(typeof VIRTUAL !== "undefined"){
                let populate = [];
                for(let v of VIRTUAL){
                    populate.push({
                        path:v.fieldName
                    })
                }
                _%>
                options.populate = <%-JSON.stringify(populate)%>;
            <%_}_%>
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query = {...query,...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
            _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query, options});
            return responseHandler(res,result);
        } catch(error){
          return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%> 
<%_ if(SUPPORT_API[i].method=="count") {_%>
    <%_methods.push('get'+DB_MODEL_FC+'Count') _%>
    const get<%-DB_MODEL_FC%>Count = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
        try {
            let where = {...req.body.where || {} };
            <%_         
                nestedCalls={}
                if(SUPPORT_API[i].IS_NESTED_CALL){
                    nestedCalls = SUPPORT_API[i].NESTED_CALLS
                    if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                        for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                            where= {...where,...<%=JSON.parse(element.filter)%>}                      
                        <%_}}
                    }                
                }
                _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase(where); 
            return responseHandler(res,result); 
        } catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="delete") {_%>
    <%_methods.push('delete'+DB_MODEL_FC) _%>
<%_ if(DELETE_DEPENDENT_MODEL){ _%>
    const delete<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
        try{
            if(!req.params.id){
                return responseHandler(res,response.badRequest());
            }
            let query = {_id:req.params.id};
            <%_         
                nestedCalls={}
                if(SUPPORT_API[i].IS_NESTED_CALL){
                    nestedCalls = SUPPORT_API[i].NESTED_CALLS
                    if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                        for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                            query= {...query,...<%=JSON.parse(element.filter)%>}
                        <%_}}
                    }                
                }
                _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,isWarning:req.body.isWarning || false});
            return responseHandler(res,result);
        } catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } else { _%>
    const delete<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
        try{
            if(!req.params.id){
                return responseHandler(res,response.badRequest());
            }
            let query = {_id:req.params.id};
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query= {...query,...<%=JSON.parse(element.filter)%>};
                    <%_}}
                }                
            }
            _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query});
            return responseHandler(res,result);
        }catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>  
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="deleteMany") {_%>
    <%_methods.push('deleteMany'+DB_MODEL_FC) _%>
    <%_ if(DELETE_DEPENDENT_MODEL){ _%>
const deleteMany<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
    try{
        if(!req.body || !req.body.ids){
            return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = { _id : { $in:ids } };
        <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query= {...query,...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
        _%>
        let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({ query,isWarning:req.body.isWarning || false},req,res);
        return responseHandler(res,result);
    } catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
    }
}
<%_ } else { _%>
const deleteMany<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res) => {
    try{
        if(!req.body || !req.body.ids){
            return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = { _id : { $in:ids } };
        <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query= {...query,...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
        _%>
        let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query},req,res);
        return responseHandler(res,result);
    } catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
    }
}
<%_ } _%>
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="softDelete") {_%>
    <%_methods.push('softDelete'+DB_MODEL_FC) _%>
<%_ if(DELETE_DEPENDENT_MODEL){ _%>
    const softDelete<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) => {
        try{
            if(!req.params.id){
                return responseHandler(res,response.badRequest());
            }
            let query = { _id: req.params.id};
            let dataToUpdate = {
                isDeleted: true,
                <%_if(SUPPORT_API[i].isAuth){ _%>
                <%-SUPPORT_API[i].updatedBy%>: req.user.id,
                <%_}_%>
            }
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query= {...query,...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
            _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,dataToUpdate,isWarning:req.body.isWarning || false},req,res);
            return responseHandler(res,result);
        } catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
    <%_ } else { _%>
    const softDelete<%-DB_MODEL_FC%> =  (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async(req,res)=>{
        try{
            if(!req.params.id){
                return responseHandler(res,response.badRequest());
            }
            let query = { _id: req.params.id};
            let dataToUpdate = {
                isDeleted: true,
                <%_if(SUPPORT_API[i].isAuth){ _%>
                <%-SUPPORT_API[i].updatedBy%>: req.user.id,
                <%_}_%>
            }
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query= {...query,...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
            _%>
            let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,dataToUpdate},req,res);
            return responseHandler(res,result);
        }catch(error){
             return responseHandler(res,response.internalServerError({message:error.message}));
        }
    }
<%_ } _%>
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="softDeleteMany") {_%>
    <%_methods.push('softDeleteMany'+DB_MODEL_FC) _%>
<%_ if(DELETE_DEPENDENT_MODEL){ _%>
const softDeleteMany<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) => {
    try{
        if(!req.body || !req.body.ids){
            return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = { _id : { $in:ids } };
        let dataToUpdate = {
            isDeleted: true,
            <%_if(SUPPORT_API[i].isLogin){ _%>
            <%-SUPPORT_API[i].updatedBy%>: req.user.id,
            <%_}_%>
        }
        <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query= {...query,...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
        _%>
        let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,dataToUpdate,isWarning:req.body.isWarning || false},req,res);
        return responseHandler(res,result);
    }catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
    }
}
<%_ } else { _%>
const softDeleteMany<%-DB_MODEL_FC%> = (<%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase) => async (req,res) => {
    try{
        if(!req.body || !req.body.ids){
            return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = { _id : { $in:ids } };
        let dataToUpdate = {
            isDeleted: true,
            <%_if(SUPPORT_API[i].isLogin){ _%>
            <%-SUPPORT_API[i].updatedBy%>: req.user.id,
            <%_}_%>
        }
        <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query= {...query,...<%=JSON.parse(element.filter)%>}
                    <%_}}
                }                
            }
        _%>
        let result = await <%-SUPPORT_API[i].method + DB_MODEL_FC %>Usecase({query,dataToUpdate},req,res);
        return responseHandler(res,result);
    }catch(error){
        return responseHandler(res,response.internalServerError({message:error.message}));
    }
}
<%_ } _%>
<%_ } _%>
<%_ } _%>
<%_if(typeof USER_MODEL !== "undefined" && USER_MODEL){_%>
<%_methods.push('changePassword') _%>
<%_methods.push('updateProfile') _%>
<%_methods.push('getLoggedInUserInfo') _%>
    const changePassword = (changePasswordUsecase) => async (req,res) => {
        try{
            let result = await changePasswordUsecase(req.body);
            return responseHandler(res,result);
        }catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    };

    const updateProfile = (updateProfileUsecase) => async (req,res) => {
        try{
            let result = await updateProfileUsecase(req.body,req.params.id);
            return responseHandler(res,result);
        }catch(error){
            return responseHandler(res,response.internalServerError({message:error.message}));
        }   
    };

    const getLoggedInUserInfo = (get<%-DB_MODEL_FC%>Usecase) => async (req,res) =>{
        try {
            if(!req.user){
                return responseHandler(res,response.badRequest());
            }
            const query = {
                _id : req.user.id,
                isDeleted: false,
                isActive:true
            };
            let result = await get<%-DB_MODEL_FC%>Usecase({query,options:{}});
            return responseHandler(res,result);
        } catch (error) {
            return responseHandler(res,response.internalServerError({message:error.message}));
        }
    };

<%_}_%>

<%_if(CUSTOM_ROUTES){_%>
  <%_CUSTOM_ROUTES.forEach((v,i)=>{ methods.push(v.functionName)_%>
  const <%-v.functionName%> = (<%-v.functionName%>Usecase) => async(req,res) =>{
    try{
      let result = await <%-v.functionName%>Usecase(req,res);
      return responseHandler(res,result);
    }catch(error){
      return responseHandler(res,response.internalServerError({message:error.message}));
    }
  }
  <%_});_%>
<%_}_%>

module.exports = {
   <%-methods.join()%>
}

