const dayjs = require('dayjs');
const uuid = require("uuid").v4;
const {
FORGOT_PASSWORD_WITH
} = require('../../constants/authConstant');
const response = require('../../utils/response');

const {sendMail} = require('../../services/email/emailService');
const {sendSMS} = require('../../services/sms/smsService');
const generateRandomNumber = require('../../utils/generateRandomNumber');

const sendResetPasswordNotification = ({<%-USER_MODEL%>Db}) => async (user) => {
  let resultOfEmail = false;
  let resultOfSMS = false;
  <%_if(FORGOT_WITH_LINK){_%>
    let token = uuid();
    let expires = dayjs();
    expires = expires.add(FORGOT_PASSWORD_WITH.EXPIRETIME, "minute").toISOString();
    await <%-USER_MODEL%>Db.updateOne({_id :user.id }, { resetPasswordLink: { code: token, expireTime: expires } });
    if(FORGOT_PASSWORD_WITH.LINK.email){
        <%_if(RESET_PASSWORD_TEMPLATE_NAME &&  RESET_PASSWORD_NOTIFICATION_TYPE==='EMAIL'){_%> 
          let updatedUser= await <%-USER_MODEL%>Db.findOne({_id:user.id});
        <%_}_%>

        let mailObj = {
          subject: "Reset Password",
          to: user.<%-EMAIL_FIELD%>,
        };
        <%_if(typeof RESET_PASSWORD_TEMPLATE_ATTRIBUTE === "object" && Object.keys(RESET_PASSWORD_TEMPLATE_ATTRIBUTE).length > 0 && RESET_PASSWORD_NOTIFICATION_TYPE==='EMAIL'){_%>
          mailObj.template = "/views/<%-RESET_PASSWORD_TEMPLATE_NAME%>";
          mailObj.data = {
            <%_for(let i in RESET_PASSWORD_TEMPLATE_ATTRIBUTE){_%>
            <%-i%>:updatedUser.<%-RESET_PASSWORD_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
            <%_}_%>
          }
        <%_}else if(!RESET_PASSWORD_TEMPLATE_ATTRIBUTE && RESET_PASSWORD_TEMPLATE_NAME && RESET_PASSWORD_NOTIFICATION_TYPE==='EMAIL'){_%>
        mailObj.template =  "/views/<%-RESET_PASSWORD_TEMPLATE_NAME%>";
        mailObj.data = updatedUser;
        <%_}else{_%>
          let viewType = "/reset-password/";
          let msg = "Click on the link below to reset your password.";
          mailObj.template = "/views/resetPassword";
          mailObj.data = {
              link: `http://localhost:${process.env.PORT}` + viewType + token,
              linkText: "Reset Password",
              message:msg
          }
        <%_}_%>
        try {
            await sendMail(mailObj);
            resultOfEmail = true;
        } catch (error) {
            console.log(error);
        }
    }
    if(FORGOT_PASSWORD_WITH.LINK.sms){
      <%_if(RESET_PASSWORD_NOTIFICATION_TYPE ==='SMS' && RESET_PASSWORD_TEMPLATE_NAME){_%>
          let updatedUser= await <%-USER_MODEL%>Db.findOne({_id:user.id});
          let renderData = {
              <%_if(typeof RESET_PASSWORD_TEMPLATE_ATTRIBUTE === "object" && Object.keys(RESET_PASSWORD_TEMPLATE_ATTRIBUTE).length > 0){_%>
                <%_for(let i in RESET_PASSWORD_TEMPLATE_ATTRIBUTE){_%>
                  <%-i%>:updatedUser.<%-RESET_PASSWORD_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
                <%_}_%>
              <%_}else{_%>
                ...updatedUser
              <%_}_%>
          }
          const msg = await ejs.renderFile(`${__basedir}/views/<%-RESET_PASSWORD_TEMPLATE_NAME%>/html.ejs`, renderData);
          let smsObj = {
            to:updatedUser.<%-MOBILE_FIELD%>,
            message:msg
          }
          try{
            await sendSMS(smsObj);
            resultOfSMS = true;
          }catch(error){
            console.log(error)
          }

      <%_}else{_%>
        let viewType = "/reset-password/";
        let msg = `Click on the link to reset your password. http://localhost:${process.env.PORT}${viewType + token}`;
        let smsObj = {
          to:user.<%-MOBILE_FIELD%>,
          message:msg
        }
        try{
          await sendSMS(smsObj);
          resultOfSMS = true;
        }catch(error){
          console.log(error)
        }
      <%_}_%>
    }
  <%_}_%>
  <%_if(FORGOT_WITH_OTP){_%>
    let otp = generateRandomNumber();
    let expires = dayjs();
    expires = expires.add(FORGOT_PASSWORD_WITH.EXPIRETIME, "minute").toISOString();
    await <%-USER_MODEL%>Db.updateOne({_id :user.id}, { resetPasswordLink: { code: otp, expireTime: expires } });
    if(FORGOT_PASSWORD_WITH.OTP.email){
      <%_if(RESET_PASSWORD_TEMPLATE_NAME && RESET_PASSWORD_NOTIFICATION_TYPE==='EMAIL'){_%> 
        let updatedUser= await <%-MODEL%>Service.getSingleDocumentByQuery({_id:user.id});
      <%_}_%>
        let mailObj = {
          subject: 'OTP to reset your password',
          to: user.<%-EMAIL_FIELD%>
        }
      <%_if(typeof RESET_PASSWORD_TEMPLATE_ATTRIBUTE === "object" && Object.keys(RESET_PASSWORD_TEMPLATE_ATTRIBUTE).length > 0 && RESET_PASSWORD_NOTIFICATION_TYPE==='EMAIL'){_%>
        mailObj.template =  '/views/<%- RESET_PASSWORD_TEMPLATE_NAME _%>';    
        mailObj.data = {
            <%_for(let i in RESET_PASSWORD_TEMPLATE_ATTRIBUTE){_%>
              <%-i%>:updatedUser.<%-RESET_PASSWORD_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
            <%_}_%>
        }
      <%_}else if(!RESET_PASSWORD_TEMPLATE_ATTRIBUTE && RESET_PASSWORD_TEMPLATE_NAME && RESET_PASSWORD_NOTIFICATION_TYPE==='EMAIL'){_%>
        mailObj.template = '/views/<%-RESET_PASSWORD_TEMPLATE_NAME%>';
        mailObj.data = updatedUser;
      <%_}else{_%>
        mailObj.template = '/views/resetPassword';
        mailObj.data: {
          isWidth: true,
          name: "username",
          email: user.<%-EMAIL_FIELD%> || '-',
          message: otpMsg,
          otp: otp
        }
      <%_}_%>
      try {
          await sendMail(mailObj);
          resultOfEmail = true;
      } catch (error) {
          console.log(error);
      }
    }
    if(FORGOT_PASSWORD_WITH.OTP.sms){
      <%_if(RESET_PASSWORD_NOTIFICATION_TYPE==='SMS' && RESET_PASSWORD_TEMPLATE_NAME){_%>
        let updatedUser= await <%-USER_MODEL%>Db.findOne({_id:user.id});
        let renderData = {
          <%_if(typeof RESET_PASSWORD_TEMPLATE_ATTRIBUTE === "object" && Object.keys(RESET_PASSWORD_TEMPLATE_ATTRIBUTE).length > 0){_%>
            <%_for(let i in RESET_PASSWORD_TEMPLATE_ATTRIBUTE){_%>
              <%-i%>:updatedUser.<%-RESET_PASSWORD_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
            <%_}_%>
          <%_}else{_%>
          ...updatedUser
          <%_}_%>
        }
        const msg = await ejs.renderFile(`${__basedir}/views/<%-RESET_PASSWORD_TEMPLATE_NAME%>/html.ejs`, renderData);
        let smsObj = {
          to:updatedUser.<%-MOBILE_FIELD%>,
          message:msg
        }
        try{
          await sendSMS(smsObj);
          resultOfSMS = true;
        }catch(error){
          console.log(error)
        }

      <%_}else{_%>
        let message = `OTP code for Reset password`;
        let otpMsg = `${message}: ${otp}`;
        let smsObj = {
          message: otpMsg,
          to: user.<%-MOBILE_FIELD%>,
        };
        try{
          await sendSMS(smsObj);
          resultOfSMS = true;
        }catch(error){
          console.log(error)
        }
      <%_}_%> 
    }
  <%_}_%> 
  return response.success({ data :{ resultOfEmail, resultOfSMS } });
};
module.exports = sendResetPasswordNotification;