const dayjs = require("dayjs");
const bcrypt = require('bcrypt');
const response = require('../../utils/response');
const emailService = require('../../services/email/emailService');

const resetPassword = ({ <%-USER_MODEL-%>Db }) => async (params) => {
    if (!params.code || !params.newPassword) {
        return response.badRequest()
    }
    let user = await <%-USER_MODEL-%>Db.findOne({ 'resetPasswordLink.code': params.code });

    if (!user || !user.resetPasswordLink.expireTime) {
        return response.badRequest({message :"Invalid Code"});
    }
    
    if (dayjs(new Date()).isAfter(dayjs(user.resetPasswordLink.expireTime))) {
        return response.badRequest({message:"Your reset password link is expired."});
    }
    
    let newPassword = await bcrypt.hash(params.newPassword, 8);
    await <%-USER_MODEL%>Db.updateOne({_id : user.id}, {
        <%-PASSWORD_FIELD%>: newPassword,
        resetPasswordLink: null,
        <%_if(LOGIN_RETRY_LIMIT){_%>
        <%-LOGIN_RETRY_LIMIT.key%>:0
        <%_}_%>
    });
    let mailObj = {
        subject: 'Reset Password',
        to: user.<%-EMAIL_FIELD%>,
        template: '/views/successfullyResetPassword',
        data: {
            isWidth: true,
            email: user.<%-EMAIL_FIELD%> || '-',
            message: "Password Successfully Reset"
        }
    };
    await emailService.sendMail(mailObj);
    return response.success({message :"Password reset successfully"});
}
module.exports = resetPassword;