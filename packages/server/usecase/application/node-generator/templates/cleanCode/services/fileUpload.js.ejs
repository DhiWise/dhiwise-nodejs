const fs = require('fs');
const path = require('path');
<%_if(S3_UPLOAD){_%>
  const AWS = require('aws-sdk');
  <%_if(S3_UPLOAD_PRIVATE){_%>
    const AmazonS3URI = require('amazon-s3-uri');
  <%_}_%> 
<%_}_%>
const makeDirectory = require('../../utils/makeDirectory');

<%_if(S3_UPLOAD){_%>
  let S3Config = {
    AWS_S3_ACCESS_KEY_ID: process.env.AWS_S3_ACCESS_KEY_ID,
    AWS_S3_SECRET_ACCESS_KEY: process.env.AWS_S3_SECRET_ACCESS_KEY,
    AWS_S3_REGION: process.env.AWS_S3_REGION,
    AWS_S3_BUCKET_NAME: process.env.AWS_S3_BUCKET_NAME,
  };
<%_}_%>
<%_if(LOCAL_UPLOAD){_%>
  /**
  * 
  * Function used to upload file in local storage.
  * 
  * @param   {object}    file
  * @param   {object}    fields
  * @param   {integer}   fileCount
  * @param   {array}     allowedFileTypes
  * @param   {integer}   maxFileSize
  * @param   {string}    defaultDirectory
  * @returns {object}    { status, message, data}
  * 
  */
  async function uploadFilesOnLocalServer(file, fields, fileCount, allowedFileTypes, maxFileSize, defaultDirectory) {

    let tempPath = file.path;

    let extension = path.extname(file.name);
    extension = extension.split('.').pop();

    fileType = file.type; uploadFilesOnLocalServer;

    //Check allowed extension;
    if (allowedFileTypes.length) {
      if (!allowedFileTypes.includes(extension)) {
        return {
          status: false,
          message: 'Filetype not allowed.'
        };
      }
    }

    //Check File Size
    const fileSize = ((file.size / 1024) / 1024);
    if (maxFileSize < fileSize) {
      return {
        status: false,
        message: `Allow file size upto ${maxFileSize} MB.`
      };
    }

    //Create Directory if not exist.
    await makeDirectory(defaultDirectory);

    //Create New path
    let newPath = defaultDirectory + '/' + new Date().getTime() + path.extname(file.name);

    //Create requested directory,if given in request parameter.
    if (fields && fields.folderName) {
      let newDir = defaultDirectory + '/' + fields.folderName;

      await makeDirectory(newDir);

      if (fields.fileName) {
        newPath = newDir + '/' + fields.fileName + '-' + fileCount + path.extname(file.name);
        fileName = fields.fileName;
      }
    } else if (fields && fields.fileName) {
      newPath = defaultDirectory + '/' + fields.fileName + '-' + fileCount + path.extname(file.name);
      fileName = fields.fileName;
    }

    let data = fs.readFileSync(tempPath);
    fs.writeFileSync(newPath, data);
    fs.unlinkSync(tempPath);

    return {
      status: true,
      message: 'File upload successfully.',
      data: '/' + newPath
    };
  }
<%_}_%>
<%_if(S3_UPLOAD){_%>
  async function uploadFilesOnS3(file, fields, fileCount, allowedFileTypes, maxFileSize) {
    let extension = path.extname(file.name);
    extension = extension.split('.').pop();

    fileType = file.type;

    if (allowedFileTypes.length) {
      //Check allowed extension;
      if (!allowedFileTypes.includes(extension)) {
        return {
          status: false,
          message: 'Filetype not allowed.'
        };
      }
    }

    // Check File Size
    const fileSize = ((file.size / 1024) / 1024);
    if (maxFileSize < fileSize) {
      return {
        status: false,
        message: `Allow file size upto ${maxFileSize} MB.`
      };
    }

    let fileName = file.name;
    //Create Requested Directory,if given in request parameter.
    if (fields && fields.folderName) {
      fileName = fields.folderName + '/' + fileName;
    }
    else if (fields && fields.fileName) {
      fileName = fields.fileName + '-' + fileCount + path.extname(file.name);
    }

    const s3 = new AWS.S3({
      region: S3Config.AWS_S3_REGION,
      accessKeyId: S3Config.AWS_S3_ACCESS_KEY_ID,
      secretAccessKey: S3Config.AWS_S3_SECRET_ACCESS_KEY
    });

    let params = {
      Bucket: S3Config.AWS_S3_BUCKET_NAME,
      Body: fs.createReadStream(file.path),
      Key: fileName,
    };

    const response = await new Promise(async (resolve, reject) => {
      s3.putObject(params, function (error, data) {
        if (error) {
          resolve({
            status: false,
            message: error.message
          });
        } else {
          resolve({
            status: true,
            data: 'https://' + process.env.AWS_S3_BUCKET_NAME + '.s3.' + S3Config.AWS_S3_REGION + '.amazonaws.com/' + fileName
          });
        }
      });
    });

    return response;
  }
<%_}_%>

<%_if(S3_UPLOAD && S3_UPLOAD_PRIVATE){_%>
  async function generatePreSignedURL (uri){
    if (uri){
      const s3 = new AWS.S3({
        region: S3Config.AWS_S3_REGION,
        accessKeyId: S3Config.AWS_S3_ACCESS_KEY_ID,
        secretAccessKey: S3Config.AWS_S3_SECRET_ACCESS_KEY
      });

      const {
        region, bucket, key 
      } = AmazonS3URI(uri);

      let options = {
        Bucket: bucket,
        Key: key,
        Expires: 1 * 60 * 60, // 1 hour
      };

      let response = await new Promise(async (resolve,reject)=>{
        await s3.getSignedUrl('getObject', options, (error, url) => {
          if (error) {
            resolve({
              status: false,
              error: error,
            });
          } else {
            resolve({
              status: true,
              path: url,
            });
          }
        });
      });
      return response;
    }
    else {
      return {
        status:false,
        error:'Please send Url'
      };
    }
  }
<%_}_%>  

module.exports = {
  <%_if(LOCAL_UPLOAD){_%>
    uploadFilesOnLocalServer,
  <%_}_%> 
  <%_if(S3_UPLOAD){_%>
    uploadFilesOnS3,
    <%_if(S3_UPLOAD_PRIVATE){_%>
      generatePreSignedURL
    <%_}_%>
  <%_}_%> 
}