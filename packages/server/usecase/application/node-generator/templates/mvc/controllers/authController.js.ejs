/**
 * authController.js
 * @description :: exports authentication methods
 */

const authService =  require("../../services/auth")
const <%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%> = require("../../model/<%-USER_MODEL%>");
const dbService = require("../../utils/dbService");
const userTokens = require("../../model/userTokens");
const dayjs = require("dayjs");
const <%-USER_MODEL %>SchemaKey = require("../../utils/validation/<%-USER_MODEL%>Validation");
const validation = require("../../utils/validateRequest");
<%_if(NOTIFICATION_TYPE==="EMAIL"){_%>
const emailService = require("../../services/email/emailService")
<%_}else if(NOTIFICATION_TYPE==="SMS"){_%>
const sendSMS = require("../../services/sms/smsService");
const ejs = require("ejs")
<%_}_%>
const { uniqueValidation } = require('../../utils/common');
const { PLATFORM } = require("../../constants/authConstant");

/**
 * @description : user registration 
 * @param {object} req : request for register
 * @param {object} res : response for register
 * @return {object} : response for register {status, message, data}
 */
const register = async(req, res) => {
    try {
        let validateRequest = validation.validateParamsWithJoi(
            req.body,
            <%-USER_MODEL %>SchemaKey.schemaKeys
        );
        if (!validateRequest.isValid) {
            return res.validationError({message :  `Invalid values in parameters, ${validateRequest.message}`});
        } 
        const data = new <%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>({
            ...req.body
        });
        let unique = await uniqueValidation(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>,req.body);   
        if (!unique){ 
            return res.validationError({message:'User Registration Failed, Duplicate Data found'});
        } 
        const result = await dbService.createDocument(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>,data);
        <%_if(NOTIFICATION_TYPE==="SMS"){_%>
        // send sms to user for successfully registered.
        let renderData = {
            <%_if(typeof REGISTER_TEMPLATE_ATTRIBUTE === "object"){_%>
            <%_for(let i in REGISTER_TEMPLATE_ATTRIBUTE){_%>
            <%-i%>:result.<%-REGISTER_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
            <%_}_%>
            <%_}else{_%>
            ...result
            <%_}_%>
        }
        const msg = await ejs.renderFile(`${__basedir}/views/<%-REGISTER_TEMPLATE_NAME%>/html.ejs`, renderData);
        let smsObj = {
            to:result.<%=MOBILE_FIELD%>,
            message:msg
        }
        await sendSMS(smsObj);
        <%_}else if(NOTIFICATION_TYPE==="EMAIL"){_%>
        // send email to user for successfully registered.
        let mailObj = {
            subject: "Register User",
            to: result.<%-EMAIL_FIELD%>,
            <%_if(typeof REGISTER_TEMPLATE_ATTRIBUTE === "object"){_%>
            template: "/views/<%-REGISTER_TEMPLATE_NAME%>",
            data:{
                <%_for(let i in REGISTER_TEMPLATE_ATTRIBUTE){_%>
                <%-i%>:result.<%-REGISTER_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
                <%_}_%>
            }
            <%_}else if(!REGISTER_TEMPLATE_ATTRIBUTE){_%>
            template: "/views/<%-REGISTER_TEMPLATE_NAME%>",
            data:result
            <%_}_%>
        };
        await emailService.sendEmail(mailObj);
        <%_}_%>
        return res.success({data:result});
    } catch (error) {
        if(error.name === "ValidationError"){
            return res.validationError({message:error.message});
        }
        if(error.code && error.code == 11000){
            return res.validationError({message:error.message});
        }
        return res.internalServerError();
    }  
}

/**
 * @description : send email or sms to user with OTP on forgot password
 * @param {object} req : request for forgotPassword
 * @param {object} res : response for forgotPassword
 * @return {object} : response for forgotPassword {status, message, data}
 */ 
const forgotPassword = async (req, res) => {
    const params = {...req.body};
    try {
        if (!params.email) {
            return res.badRequest();
        }
        let where = {<%-EMAIL_FIELD%>: params.email};
        params.email = params.email.toString().toLowerCase();
        let found = await dbService.getDocumentByQuery(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>,where);
        if (!found) {
            return res.recordNotFound();
        }
        let {resultOfEmail,resultOfSMS} = await authService.sendResetPasswordNotification(found);
        if(resultOfEmail && resultOfSMS){
            return res.success({message:"otp successfully send."});
        }else if(resultOfEmail && !resultOfSMS) {
            return res.success({message:"otp successfully send to your email."});
        } else if (!resultOfEmail && resultOfSMS) { 
            return res.success({message:"otp successfully send to your mobile number."});
        }else{
            return res.internalServerError({message:"otp can not be sent due to some issue try again later"});
        }
    } catch (error) {
        return res.internalServerError();
    }
}

/**
 * @description : validate OTP
 * @param {object} req : request for validateResetPasswordOtp
 * @param {object} res : response for validateResetPasswordOtp
 * @return {object} : response for validateResetPasswordOtp  {status, message, data}
 */
const validateResetPasswordOtp = async (req, res) => {
    const params = req.body;
    try {
        if (!params || !params.otp) {
            return res.badRequest();
        }
        let found = await dbService.getDocumentByQuery(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>, { 'resetPasswordLink.code': params.otp });
        if (!found || !found.resetPasswordLink.expireTime) {
            return res.failure({message:"Invalid OTP"});
        }
        if (dayjs(new Date()).isAfter(dayjs(found.resetPasswordLink.expireTime))) {
            return res.failure({message:"Your reset password link is expired or invalid"});
        }
        await dbService.updateDocument(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>, found.id, { resetPasswordLink: {} })
        return res.success({message:'Otp verified'});
    } catch (error) {
        return res.internalServerError();
    }
}

/**
 * @description : reset password with code and new password
 * @param {object} req : request for resetPassword
 * @param {object} res : response for resetPassword
 * @return {object} : response for resetPassword {status, message, data}
 */ 
const resetPassword = async (req, res) => {
    const params = req.body;
    try {
        if (!params.code || !params.newPassword) {
            return res.badRequest();
        }
        let found = await dbService.getDocumentByQuery(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>, { 'resetPasswordLink.code': params.code });
        if (!found || !found.resetPasswordLink.expireTime) {
            return res.failure({message:"Invalid Code"});
        }
        if (dayjs(new Date()).isAfter(dayjs(found.resetPasswordLink.expireTime))) {// link expire
            return res.failure({message:"Your reset password link is expired or invalid"});
        }
        let result = await authService.resetPassword(found, params.newPassword);
        if(result.flag){
            return res.failure({message:result.data});
        }
        return res.success({message:result.data});
        
    } catch (error) {
        return res.internalServerError();
    }
}

/**
 * @description : login with username and password
 * @param {object} req : request for login 
 * @param {object} res : response for login
 * @return {object} : response for login {status, message, data}
 */
const login = async(req,res)=>{
    try {
        let {username,password} = req.body;
        if(!username || !password){
            return res.badRequest();
        }
            <%_if(ROLE_PERMISSION){_%>
            let roleAccess = false;
            if (req.body.includeRoleAccess){
                roleAccess = req.body.includeRoleAccess;
            }
            let result = await authService.loginUser(username, password,PLATFORM.<%-PLATFORM_NAME.toUpperCase()%>, roleAccess);
            <%_} else {_%>
            let result = await authService.loginUser(username,password,PLATFORM.<%-PLATFORM_NAME.toUpperCase()%>); 
            <%_}_%>
            if(result.flag){
                return res.badRequest({message:result.data});
            }
            return res.success({data:result.data,message:result.message});
    } catch (error) {
        return res.internalServerError();
    }
}

/**
 * @description : logout user
 * @param {object} req : request for logout
 * @param {object} res : response for logout
 * @return {object} : response for logout {status, message, data}
 */
const logout = async (req, res) => {
    try {
        let userToken = await dbService.getDocumentByQuery(userTokens, { token: (req.headers.authorization).replace('Bearer ', '') ,userId:req.user.id});
        let updatedDocument = {
            isTokenExpired: true
        }
        await dbService.updateDocument(userTokens,userToken.id, updatedDocument);
        return res.success({message:'Logged Out Successfully'});
    } catch (error) {
        return res.internalServerError();
    }
}

module.exports = {
    register,
    forgotPassword,
    validateResetPasswordOtp,
    resetPassword,
    login,
    logout
}
    
