const authService =  require("../../services/auth")
const <%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%> = require("../../model/<%-USER_MODEL%>");
const dbService = require("../../utils/dbService");
const userTokens = require("../../model/userTokens");
const dayjs = require("dayjs");
const <%-USER_MODEL %>SchemaKey = require("../../utils/validation/<%-USER_MODEL%>Validation");
const validation = require("../../utils/validateRequest");
<%_if(NOTIFICATION_TYPE==="EMAIL"){_%>
const emailService = require("../../services/email/emailService")
<%_}else if(NOTIFICATION_TYPE==="SMS"){_%>
const sendSMS = require("../../services/sms/smsService");
const ejs = require("ejs")
<%_}_%>
const { uniqueValidation } = require('../../utils/common');

module.exports = {
    /*
     * api: user register 
     * description : first time user registration.
     */
    register : async(req, res) => {
        try {
            let isValid = validation.validateParamsWithJoi(
                req.body,
                <%-USER_MODEL %>SchemaKey.schemaKeys
            );
            if (isValid.error) {
               return res.inValidParam(isValid.error);
            } 
            const data = new <%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>({
                ...req.body
            });
            let unique = await uniqueValidation(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>,req.body);   
            if (!unique){ 
                return res.inValidParam('User Registration Failed, Duplicate Data found');
            } 
            const result = await dbService.createDocument(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>,data);
            <%_if(NOTIFICATION_TYPE==="SMS"){_%>
            // send sms to user for successfully registered.
            let renderData = {
                <%_if(typeof REGISTER_TEMPLATE_ATTRIBUTE === "object"){_%>
                <%_for(let i in REGISTER_TEMPLATE_ATTRIBUTE){_%>
                <%-i%>:result.<%-REGISTER_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
                <%_}_%>
                <%_}else{_%>
                ...result
                <%_}_%>
            }
            const msg = await ejs.renderFile(`${__basedir}/views/<%-REGISTER_TEMPLATE_NAME%>/html.ejs`, renderData);
            let smsObj = {
                to:result.<%=MOBILE_FIELD%>,
                message:msg
            }
            await sendSMS(smsObj);
            <%_}else if(NOTIFICATION_TYPE==="EMAIL"){_%>
            // send email to user for successfully registered.
            let mailObj = {
                subject: "Register User",
                to: result.<%-EMAIL_FIELD%>,
                <%_if(typeof REGISTER_TEMPLATE_ATTRIBUTE === "object"){_%>
                template: "/views/<%-REGISTER_TEMPLATE_NAME%>",
                data:{
                    <%_for(let i in REGISTER_TEMPLATE_ATTRIBUTE){_%>
                    <%-i%>:result.<%-REGISTER_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
                    <%_}_%>
                }
                <%_}else if(!REGISTER_TEMPLATE_ATTRIBUTE){_%>
                template: "/views/<%-REGISTER_TEMPLATE_NAME%>",
                data:result
                <%_}_%>
            };
            await emailService.sendEmail(mailObj);
            <%_}_%>
            return res.ok(result);
        } catch (error) {
            if(error.name === "ValidationError"){
                return res.validationError(error.message);
            }
            if(error.code && error.code == 11000){
                return res.isDuplicate(error.message);
            }
            return res.failureResponse(error.message);
        }  
    },
    /*
     * api : forgot password
     * description : send email or sms to user for forgot password.
     */
    forgotPassword: async (req, res) => {
        const params = req.body;
        try {
            if (!params.email) {
                return res.insufficientParameters();
            }
            let where = {<%-EMAIL_FIELD%>: params.email};
            params.email = params.email.toString().toLowerCase();
            let isUser = await dbService.getDocumentByQuery(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>,where);
            if (isUser) {
                let {resultOfEmail,resultOfSMS} = await authService.sendResetPasswordNotification(isUser);
                if(resultOfEmail && resultOfSMS){
                    return res.requestValidated("otp successfully send.");
                }else if(resultOfEmail && !resultOfSMS) {
                    return res.requestValidated("otp successfully send to your email.");
                } else if (!resultOfEmail && resultOfSMS) { 
                    return res.requestValidated("otp successfully send to your mobile number.");
                }else{
                    return res.failureResponse("otp can not be sent due to some issue try again later");
                }
            } else {
                return res.recordNotFound({});
            }
        } catch (error) {
            return res.failureResponse(error);
        }
    },
    /*
     * api : validate forgot password otp 
     * description : after successfully sent mail or sms for forgot password validate otp
     */
    validateResetPasswordOtp: async (req, res) => {
        const params = req.body;
        try {
            if (!params || !params.otp) {
                return res.insufficientParameters();
            }
            let isUser = await dbService.getDocumentByQuery(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>, { 'resetPasswordLink.code': params.otp });
            if (!isUser || !isUser.resetPasswordLink.expireTime) {
                return res.invalidRequest("Invalid OTP");
            }
            // link expire
            if (dayjs(new Date()).isAfter(dayjs(isUser.resetPasswordLink.expireTime))) {
                return res.invalidRequest("Your reset password link is expired or invalid");
            }
            await dbService.updateDocument(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>, isUser.id, { resetPasswordLink: {} })
            return res.requestValidated('Otp verified');
        } catch (error) {
            return res.failureResponse(error.message);
        }
    },
    /*
     * api : reset password
     * description : after successfully sent email or sms for forgot password,
     *                validate otp or link and reset password
     */
    resetPassword : async (req, res) => {
        const params = req.body;
        try {
            if (!params.code || !params.newPassword) {
                return res.insufficientParameters();
            }
            let isUser = await dbService.getDocumentByQuery(<%-USER_MODEL.charAt(0).toUpperCase() + USER_MODEL.slice(1);%>, { 'resetPasswordLink.code': params.code });
            if (isUser && isUser.resetPasswordLink.expireTime) {
                if (dayjs(new Date()).isAfter(dayjs(isUser.resetPasswordLink.expireTime))) {// link expire
                    return res.invalidRequest("Your reset password link is expired or invalid");
                }
            } else {
                // invalid code
                return res.invalidRequest("Invalid Code");
            }
            let response = await authService.resetPassword(isUser, params.newPassword);
            if(response && !response.flag){
                return res.requestValidated(response.data);
            }
            return res.invalidRequest(response.data);
        } catch (error) {
            return res.failureResponse(error.message);
        }
    },
    /*
     * api :  authentication
     * description : login user
     */
    login:async(req,res)=>{
        try {
            let {username,password} = req.body;
            let url = req.originalUrl
            if(username && password){
                <%_if(ROLE_PERMISSION){_%>
                let roleAccess = false;
                if (req.body.includeRoleAccess){
                    roleAccess = req.body.includeRoleAccess;
                }
                let result = await authService.loginUser(username, password, url, roleAccess);
                <%_} else {_%>
                let result = await authService.loginUser(username,password,url); 
                <%_}_%>
                if(!result.flag){
                    return res.loginSuccess(result.data);
                }
                return res.loginFailed(result.data);
            }else{
                return res.insufficientParameters();
            }
        } catch (error) {
            return res.failureResponse(error.message);
        }
    },
    /*
    * api : logout
    * description : Logout User
    */
    logout: async (req, res) => {
        try {
            if (req.user) {
              let userToken = await dbService.getDocumentByQuery(userTokens, { token: (req.headers.authorization).replace('Bearer ', '') ,userId:req.user.id});
              let updatedDocument = {
                  isTokenExpired: true
              }
              await dbService.updateDocument(userTokens,userToken.id, updatedDocument);
              return res.requestValidated('Logged Out Successfully');
            }
            return res.badRequest({});
          } catch (error) {
            return res.failureResponse(error.message);
          }
    },
}
    
