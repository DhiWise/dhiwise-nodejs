<%_if(FILE_UPLOAD){_%>
<%_if(S3_UPLOAD){_%>
const fs = require('fs');
const path = require('path');
const formidable = require('formidable');
const AWS = require('aws-sdk');
<%_if(S3_UPLOAD_PRIVATE){_%>
const AmazonS3URI = require('amazon-s3-uri');
<%_}_%>
<%_} else {_%>
const fs = require('fs');
const path = require('path');
const formidable = require('formidable');
const validUrl = require('valid-url');
<%_}_%>
<%_}_%>
const <%-DB_MODEL_FC%> = require("../../model/<%-DB_MODEL%>")
const <%-DB_MODEL %>SchemaKey = require("../../utils/validation/<%-DB_MODEL%>Validation");
const validation = require("../../utils/validateRequest");
const dbService = require("../../utils/dbService");
<%_ if(IS_AUTH){ _%>
const auth = require("../../services/auth");
<%_ } _%>
<%_ if(DELETE_DEPENDENT_MODEL){ _%>
const deleteDependentService = require("../../utils/deleteDependent");
<%_ } _%>
<%_ var methods = [] _%>
<%_
if(typeof(UNIQ_TASK_MODELS)!== 'undefined'){
let models = UNIQ_TASK_MODELS
for(const model of models){
    if(model!==DB_MODEL){
_%>
const <%-model%> = require("../../model/<%-model%>")
const <%-model%>SchemaKey = require("../../utils/validation/<%-model%>Validation");
<%_ } } } _%>
<%_if(IS_CQ){_%>
const customQueryService = require("../../services/customQueryService")
<%_}_%>
<%_ if(SERVICES_TO_IMPORT && SERVICES_TO_IMPORT.length){ _%>
<%_ for(let i=0;i < SERVICES_TO_IMPORT.length;i++){ 
    if(SERVICES_TO_IMPORT[i] != DB_MODEL){ _%>
const <%-SERVICES_TO_IMPORT[i]-%>Service = require('../../services/<%-MODULE%>/<%-SERVICES_TO_IMPORT[i]-%>Service');
<%_ }else{ _%>
const <%-SERVICES_TO_IMPORT[i]-%>Service1 = require('../../services/<%-MODULE%>/<%-SERVICES_TO_IMPORT[i]-%>Service');
<%_} }_%>  
<%_ } _%> 
<%_for(let i=0;i< SUPPORT_API.length;i++){_%>
<%_ if(SUPPORT_API[i].method=="create") {_%>
    <%_methods.push('add'+DB_MODEL_FC+',') _%> 
const add<%-DB_MODEL_FC%> = async(req, res) => {
    try {
        let validateRequest = validation.validateParamsWithJoi(req.body,<%-DB_MODEL %>SchemaKey.schemaKeys);
        if (!validateRequest.isValid) {
            return res.inValidParam({message : `Invalid values in parameters, ${validateRequest.message}`});
        }
        let data = new <%-DB_MODEL_FC%>({
            ...req.body
            <%_if(SUPPORT_API[i].isLogin){_%>
            ,<%-SUPPORT_API[i].addedBy%>:req.user.id
            <%_}_%>  
        })
        let result = await dbService.createDocument(<%-DB_MODEL_FC %>,data);
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        result = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result);
        <%_}_%>
        return  res.ok({data:result});
    } catch (error) {
        if(error.name === "ValidationError"){
            return res.validationError({message:error.message});
        }
        if(error.code && error.code == 11000){
            return res.isDuplicate({message:error.message});
        }
        return res.failureResponse(); 
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="createBulk") {_%>
    <%_methods.push('bulkInsert'+DB_MODEL_FC+',') _%>
const bulkInsert<%-DB_MODEL_FC %> = async(req,res)=>{
    try{
        let data;   
        if(req.body.data !== undefined && req.body.data.length){
            data = req.body.data;
            <%_if(SUPPORT_API[i].isLogin){_%>
            if(req.user.id){
                for(let i=0;i< data.length;i++){
                    data[i].<%-SUPPORT_API[i].addedBy%> = req.user.id
                }
            }
            <%_}_%>
            let result =await dbService.bulkInsert(<%-DB_MODEL_FC %>,data);
            return  res.ok({data:result});
        }else{
            return res.badRequest()
        }  
    }catch(error){
        if(error.name === "ValidationError"){
            return res.validationError({message:error.message});
        }
        if(error.code && error.code == 11000){
            return res.isDuplicate({message:error.message});
        }
        return res.failureResponse(); 
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="update") {_%>
    <%_methods.push('update'+DB_MODEL_FC+',') _%>
const update<%-DB_MODEL_FC%> = async(req,res) => {
    try {
        delete req.body["addedBy"]
        delete req.body["updatedBy"]
        let data = {
            ...req.body
            <%_if(SUPPORT_API[i].isLogin){_%>
                ,updatedBy:req.user.id
            <%_}_%>
        }
        let validateRequest = validation.validateParamsWithJoi(
            data,
            <%-DB_MODEL%>SchemaKey.updateSchemaKeys
        );
        if (!validateRequest.isValid) {
            return res.inValidParam({message :  `Invalid values in parameters, ${validateRequest.message}`});
        }
        <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
        let query = {}
        if (req.user){
            query = {
                "_id": {
                    "$eq": req.params.id,
                    "$ne": req.user.id
                }
            }
        }else{
            return res.badRequest();
        }
        <%_}else{_%>
        let query = {_id:req.params.id}
        <%_}_%>
        <%_         
        let nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){
            nestedCalls = SUPPORT_API[i].NESTED_CALLS
            if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                    <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>  
                <%_}}
            }                
        }
        _%>
        let result = await dbService.findOneAndUpdateDocument(<%-DB_MODEL_FC%>,query,data,{new:true});
        if(!result){
            return res.recordNotFound();
        }
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        result = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result);
        <%_}_%>
        return  res.ok({data:result});
    }
    catch(error){
        if(error.name === "ValidationError"){
            return res.validationError({message:error.message});
        }
        if(error.code && error.code == 11000){
            return res.isDuplicate({message:error.message});
        }
        return res.failureResponse(); 
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="bulkUpdate") {_%>
    <%_methods.push('bulkUpdate'+DB_MODEL_FC+',') _%>
const bulkUpdate<%-DB_MODEL_FC%>=async(req,res)=>{
    try {
        let filter={};
        let data;
        if(req.body && typeof req.body.filter === 'object' && req.body.filter !== null){
            filter = req.body.filter
        }
        if(req.body && typeof req.body.data === 'object' && req.body.data !== null){
            data = req.body.data;
            delete data["addedBy"]
            delete data["updatedBy"]
            <%_if(SUPPORT_API[i].isLogin){_%>
                data.updatedBy=req.user.id
            <%_}_%>
            <%_         
                nestedCalls={}
                if(SUPPORT_API[i].IS_NESTED_CALL){
                    nestedCalls = SUPPORT_API[i].NESTED_CALLS
                    if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                        for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                            filter = <%=JSON.parse(element.filter)%>                 
                        <%_}}
                    }                
                }
            _%>   
            let result = await dbService.bulkUpdate(<%-DB_MODEL_FC%>,filter,data);
            if(!result){
                return res.recordNotFound();
            }
            return  res.ok({data:result});
        }
        else{
            return res.badRequest()
        }
    }
    catch(error){
        return res.failureResponse(); 
    }
}
<%_}_%>
<%_ if(SUPPORT_API[i].method=="partialUpdate") {_%>
    <%_methods.push('partialUpdate'+DB_MODEL_FC+',') _%>
const partialUpdate<%-DB_MODEL_FC%> = async(req,res) => {
    try {
        delete req.body["addedBy"]
        delete req.body["updatedBy"]
        let data = {
            ...req.body,
        }
        let validateRequest = validation.validateParamsWithJoi(
            data,
            <%-DB_MODEL%>SchemaKey.updateSchemaKeys
        );
        if (!validateRequest.isValid) {
            return res.inValidParam({message : `Invalid values in parameters, ${validateRequest.message}`});
        }
        <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
        let query = {}
        if (req.user){
            query = {
                "_id": {
                    "$eq": req.params.id,
                    "$ne": req.user.id
                }
            }
        }else{
            return res.badRequest();
        } 
        <%_}else{_%>
        let query = {_id:req.params.id}
        <%_}_%>
        let result = await dbService.findOneAndUpdateDocument(<%-DB_MODEL_FC%>, query, data,{new:true});
        if (!result) {
            return res.recordNotFound();
        }     
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        let select = <%=SUPPORT_API[i].fields%>
        result = await dbService.getSingleDocumentById(<%-DB_MODEL_FC%>,req.params.id,select);
        <%_}_%>
        return res.ok({data:result});
    }
    catch(error){
        return res.failureResponse()
    }
}
<%_}_%>
<%_ if(SUPPORT_API[i].method=="findAll") {_%>
    <%_methods.push('findAll'+DB_MODEL_FC+',') _%>
const findAll<%-DB_MODEL_FC%> = async(req,res) => {
    try {
        let options = {}
        let query={}
        let result;
        if (req.body.query !== undefined) {
            query = { ...req.body.query }
        }
        <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
        if (req.user){
            query = {
                ...query,
                ...{ '_id': { $ne: req.user.id } } 
            };
            if (req.body.query && req.body.query._id) {
                Object.assign(query._id, { $in: [req.body.query._id] })
            }
        }else{
            return res.badRequest();
        }
        <%_}_%>
        if(req.body.isCountOnly){
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                       <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>                         
                    <%_}}
                }                
            }
            _%>
            result = await dbService.countDocument(<%-DB_MODEL_FC%>, query);
            return res.ok({data:result});
        }
        else {
            if (req.body.options !== undefined) {
                options = { ...req.body.options };
            }
            <%_if(typeof VIRTUAL !== "undefined"){
                let populate = [];
                for(let v of VIRTUAL){
                    populate.push({
                        path:v.fieldName
                    })
                }
                _%>
            if (!options.populate) options.populate = [];
            options.populate = options.populate.concat(<%= populate %>);
            <%_}_%>
            <%_if(SUPPORT_API[i].fieldSelection){_%>
                if(options.select && options.select.length){
                    options.select = <%=SUPPORT_API[i].fields%>.filter(Set.prototype.has, new Set(options.select));
                    if (!options.select.length) options.select.push('_id');
                }else{
                    options.select=<%=SUPPORT_API[i].fields%>
                }
            <%_}_%>
            <%_         
                nestedCalls={}
                if(SUPPORT_API[i].IS_NESTED_CALL){
                    nestedCalls = SUPPORT_API[i].NESTED_CALLS
                    if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>
                        <%_if(element.skip){ %>
                            options.skip = <%-JSON.stringify(element.skip)_%>;
                            <%_}_%>
                            <%_if(element.limit){ %>
                            options.limit = <%-JSON.stringify(element.limit)_%>;
                            <%_}_%>
                            <%_if(element.populate && element.populate.length>0){ %>
                            options.populate = <%-JSON.stringify(element.populate)_%>;
                            <%_}_%>
                            <%_if(element.sort){ %>
                            options.sort = <%-JSON.stringify(element.sort)_%>;
                            <%_}_%>
                            <%_if(element.select){ %>
                            options.select = <%-JSON.stringify(element.select)_%>;
                            <%_}_%>
                    <%_}}
            }}_%>
            result = await dbService.getAllDocuments( <%-DB_MODEL_FC%>,query,options);
            if (result && result.data && result.data.length){
                return res.ok({data:result});   
            }
            return res.recordNotFound();
        }
    }
    catch(error){
        return res.failureResponse();
    }
}
<%_}_%>
<%_ if(SUPPORT_API[i].method=="findById") {_%>
    <%_methods.push('get'+DB_MODEL_FC+',') _%>
const get<%-DB_MODEL_FC%> = async(req,res) => {
    try {
        let query={};
        query._id = req.params.id;
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        let select = <%=SUPPORT_API[i].fields%>
        <%_}_%>
        <%_ 
        nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){
            nestedCalls = SUPPORT_API[i].NESTED_CALLS
        }
        _%>
        <%_
         let isSelectForNewNestedCall=false
        if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){
            for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>      
                    <%_if(element.select){ 
                    isSelectForNewNestedCall=true
                    %>
                    select = <%-JSON.stringify(element.select)_%>;
                    <%_}_%>
            <%_}}
        }
        _%>    
        let result = await dbService.getDocumentByQuery(<%-DB_MODEL_FC%>,query<%_if(SUPPORT_API[i].fieldSelection){_%>,select<%_}_%>);
        if(result){
            <%_if(typeof VIRTUAL !== "undefined"){
                let populate = [];
                for(let v of VIRTUAL){
                    populate.push({
                        path:v.fieldName
                    })
                }
                _%>
            result = await result.populate(<%-JSON.stringify(populate)%>).execPopulate();
            <%_}_%>
            return  res.ok({data:result});
        }
        return res.recordNotFound();
    }
    catch(error){
        return res.failureResponse()
    }
}
<%_}_%>
<%_ if(SUPPORT_API[i].method=="count") {_%>
    <%_methods.push('get'+DB_MODEL_FC+'Count,') _%>
const get<%-DB_MODEL_FC%>Count = async(req,res) => {
    try {
        let where ={};
        if(req.body.where){
            where = req.body.where;
        }
        <%_ 
        nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){
            nestedCalls = SUPPORT_API[i].NESTED_CALLS
            if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
            for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>   
                where = <%=JSON.parse(element.filter)%>                                     
            <%_}}
        }}
        _%> 
        let result = await dbService.countDocument(<%-DB_MODEL_FC%>,where);
        if(result){
            result = {totalRecords:result}
            return res.ok({data:result});
        }
        return res.recordNotFound();
    }
    catch(error){
        return res.failureResponse();
    }
}
<%_}_%>
<%_ if(SUPPORT_API[i].method=="delete") {_%>
    <%_methods.push('delete'+DB_MODEL_FC+',') _%>
    <%_ if(DELETE_DEPENDENT_MODEL){_%>
const delete<%-DB_MODEL_FC%> =async(req,res) => {
    try{
        if(req.params.id){
        <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
        let query = {}
        if (req.user){
            query = {
                "_id": {
                    "$eq": req.params.id,
                    "$ne": req.user.id
                }
            }
        } 
        else{
            return res.badRequest();
        } 
        <%_}else{_%>
        let query = {_id:req.params.id}
        <%_}_%>
        if (req.body.isWarning) {
            <%_
                nestedCalls={}
                if(SUPPORT_API[i].IS_NESTED_CALL){  
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
                        for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                            <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>                 
                        <%_}}
                    }
                }
            _%>
            let result = await deleteDependentService.count<%-DB_MODEL_FC%>(query);
            if(result){
                return res.ok({data:result});
            }
            return res.recordNotFound();
        } else {
            <%_
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){  
            nestedCalls = SUPPORT_API[i].NESTED_CALLS
            if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>                 
                    <%_}}
                }
            }
            _%> 
            let result = await deleteDependentService.delete<%-DB_MODEL_FC%>(query);
            if(!result){
                return res.recordNotFound();
            }
            return  res.ok({data:result}); 
        }
        }else {
            return res.badRequest();
        }
    }
    catch(error){
        return res.failureResponse(); 
    }
}
<%_} else {_%>
const delete<%-DB_MODEL_FC%> =async(req,res) => {
    try {
        <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
            if (req.user){
                let query = {
                    "_id": {
                        "$eq": req.params.id,
                        "$ne": req.user.id
                    }
                }
            } 
            else{
                return res.badRequest();
            } 
            <%_}else{_%>
            let query = {_id:req.params.id}
            <%_}_%>
            <%_
                nestedCalls={}
                if(SUPPORT_API[i].IS_NESTED_CALL){  
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
                        for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                            <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>              
                        <%_}}
                    }
                }
             _%>
            const result = await dbService.findOneAndDeleteDocument(<%-DB_MODEL_FC%>, query);
            if(result){
                return res.ok({data:result});
            }
            return res.recordNotFound();
    }
    catch(error){
        return res.failureResponse();
    }
}
<%_}_%>
<%_}_%>
<%_ if(SUPPORT_API[i].method=="deleteMany") {_%>
    <%_methods.push('deleteMany'+DB_MODEL_FC+',') _%>
    <%_ if(DELETE_DEPENDENT_MODEL){_%>
const deleteMany<%-DB_MODEL_FC%> =async(req, res) => {
    try{
        let ids = req.body.ids; 
        if(!ids || !Array.isArray(ids) || ids.length < 1){
            <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
            let query = {}
            if (req.user){
                query = {
                    "_id": {
                        "$in": ids,
                        "$ne": req.user.id
                    }
                }
            } 
            else{
                return res.badRequest();
            } 
            <%_}else{_%>
            let query = {_id:{"$in":ids}}
            <%_}_%>
            if (req.body.isWarning) {
                let result = await deleteDependentService.count<%-DB_MODEL_FC%>(query);
                if(result){
                    return res.ok({data:result}); 
                }
                return res.recordNotFound();
            }
            else{
                let result = await deleteDependentService.delete<%-DB_MODEL_FC%>(query);
                if(result){
                    return res.ok({data:result}); 
                }
                return res.recordNotFound();
            }
        }
        return res.badRequest(); 
    }
    catch(error){
        return res.failureResponse(); 
    }
}
<%_} else {_%>
const deleteMany<%-DB_MODEL_FC%> =async(req, res) => {
    try{
        let ids = req.body.ids; 
        if(!ids || !Array.isArray(ids) || ids.length < 1){
            <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
            let query = {}
            if (req.user){
                query = {
                    "_id": {
                        "$in": ids,
                        "$ne": req.user.id
                    }
                }
            } 
            <%_}else{_%>
            let query = {"_id":{"$in":ids}}
            <%_}_%>
            let result = await dbService.deleteMany(<%-DB_MODEL_FC%>,query);
            if(result){
                return res.ok({data:result}); 
            }
            return res.recordNotFound();
        }
        return res.badRequest(); 
    }
    catch(error){
        return res.failureResponse(); 
    }
}
<%_}_%>
<%_}_%>
<%_ if(SUPPORT_API[i].method=="softDelete") {_%>
    <%_methods.push('softDelete'+DB_MODEL_FC+',') _%>
    <%_ if(DELETE_DEPENDENT_MODEL){_%>
const softDelete<%-DB_MODEL_FC%> = async(req,res) => {
    try{
        <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
        let query = {}
        if (req.user){
            query = {
                "_id": {
                    "$eq": req.params.id,
                    "$ne": req.user.id
                }
            }
        } 
        <%_}else{_%>
        let query = {_id:req.params.id}
        <%_}_%>
        <%_
        nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){  
        nestedCalls = SUPPORT_API[i].NESTED_CALLS
        if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
            for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>                           
            <%_}}
            }
        }
        _%>
        let result = await deleteDependentService.softDelete<%-DB_MODEL_FC%>(query<%_if(SUPPORT_API[i].isLogin){_%>,req.user<%_}_%>);
        if(!result){
            return res.recordNotFound();
        }
        return  res.ok({data:result});
    }catch(error){
        return res.failureResponse(); 
    }
}
<%_} else {_%>
const softDelete<%-DB_MODEL_FC%> = async(req,res) => {
    try{
        <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
        let query = {}
        if (req.user){
            query = {
                "_id": {
                    "$eq": req.params.id,
                    "$ne": req.user.id
                }
            }
        } 
        <%_}else{_%>
        let query = {_id:req.params.id}
        <%_}_%>
        <%_
        nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){  
        nestedCalls = SUPPORT_API[i].NESTED_CALLS
        if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
                for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                    <%-element.existingVariable%> = <%=JSON.parse(element.filter)%>                    
                <%_}}
            }
        }
        _%>
        let result = await dbService.findOneAndUpdateDocument(<%-DB_MODEL_FC%>, query,{ isDeleted: true<%_if(SUPPORT_API[i].isLogin){_%>,updatedBy:req.user.id<%_}_%> },{new:true});
        if(!result){
            return res.recordNotFound();
        }
        return  res.ok({data:result});
    }catch(error){
        return res.failureResponse(); 
    }
}
<%_}_%>
<%_}_%>
<%_ if(SUPPORT_API[i].method=="softDeleteMany") {_%>
    <%_methods.push('softDeleteMany'+DB_MODEL_FC+',') _%>
    <%_ if(DELETE_DEPENDENT_MODEL){_%>
const softDeleteMany<%-DB_MODEL_FC%> = async(req,res) => {
    try{
        let ids = req.body.ids;
        if(!ids || !Array.isArray(ids) || ids.length < 1){
            <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
            let query = {}
            if (req.user){
                query = {
                    "_id": {
                        "$in": ids,
                        "$ne": req.user.id
                    }
                }
            } 
            <%_}else{_%>
            let query = {_id:{$in:ids}}
            <%_}_%>
            let result = await deleteDependentService.softDelete<%-DB_MODEL_FC%>(query<%_if(SUPPORT_API[i].isLogin){_%>,req.user<%_}_%>);
            if (!result) {
                return res.recordNotFound();
            }
            return  res.ok({data:result});
        }
        return res.badRequest();
    }catch(error){
        return res.failureResponse(); 
    }
}
<%_} else {_%>
const softDeleteMany<%-DB_MODEL_FC%> = async(req,res) => {
    try{
        let ids = req.body.ids;
        if(!ids || !Array.isArray(ids) || ids.length < 1){
            <%_if(typeof USER_MODEL !== "undefined" && USER_MODEL && SUPPORT_API[i].isAuth){ _%>
            let query = {}
            if (req.user){
                query = {
                    "_id": {
                        "$in": ids,
                        "$ne": req.user.id
                    }
                }
            } 
            <%_}else{_%>
            let query = {_id:{$in:ids}}
            <%_}_%>
            let data = await dbService.bulkUpdate(<%-DB_MODEL_FC%>,query, { isDeleted: true<%_if(SUPPORT_API[i].isLogin){_%>,updatedBy:req.user.id<%_}_%> });
            if (!data) {
                return res.recordNotFound();
            }
            return res.ok({data});
        }
        return res.badRequest();
    }catch(error){
        return res.failureResponse(); 
    }
}
<%_}_%>
<%_}_%>
<%_}_%>
<%_if(typeof USER_MODEL !== "undefined" && USER_MODEL){
    methods.push('changePassword,')
    methods.push('updateProfile,')%>
    const changePassword = async(req, res) => {
        try {
            let params = req.body;
            if(!req.user.id){
                return res.badRequest();
            }
            if (!params.newPassword || !params.oldPassword) {
                return res.inValidParam({message:'Please Provide new Password and Old password'});
            }
            let result = await auth.changePassword({...params,userId:req.user.id});
            if(result.flag){
                return res.invalidRequest({message:result.data});
            }
            return res.requestValidated({message:result.data});
        } catch (error) {
            return res.failureResponse();
        }
    }

const updateProfile = async(req, res) => {
    try {
        if(!req.body || !req.user.id){
            return res.badRequest();
        }
        let data = {
            ...req.body
        };
        let validateRequest = validation.validateParamsWithJoi(
            data,
            <%-DB_MODEL %>SchemaKey.updateSchemaKeys
        );
        if (!validateRequest.isValid) {
            return res.inValidParam({message :  `Invalid values in parameters, ${validateRequest.message}`});
        }
        delete data.password;
        delete data.createdAt;
        delete data.updatedAt;
        delete data.id;
        let result = await dbService.findOneAndUpdateDocument(<%-DB_MODEL_FC%>,{ _id:req.user.id },data,{ new:true });
        if (!result){
            return res.recordNotFound();
        }            
        return  res.ok({data:result});
    }
    catch (error){
        if (error.name === 'ValidationError'){
            return res.isDuplicate({message:error.message});
        }
        if (error.code && error.code == 11000){
            return res.isDuplicate({message:error.message});
        }
        return res.failureResponse();
    }
};
<%_}_%>


<%_if(CUSTOM_ROUTES){_%>
<%_CUSTOM_ROUTES.forEach((v,i)=>{ 
    methods.push(v.functionName+',')
_%>
<%_ if(v.isUploadedCodeBlock){ _%>
const <%-v.functionName%> = <%-v.queryBuilder[0].code%>
<%_}else{_%>
<%_if(typeof(v.descriptions)!=='undefined'){_%>
/* 
* <%-v.descriptions%>
*/
<%_}_%>
const <%-v.functionName%>=async(req,res)=>{
try {
    <%_if(typeof(v.queryBuilder) !== "undefined" && v.queryBuilder.length > 0){_%>
    // let result =  <%_if(v.service==DB_MODEL){_%><%-v.service%>Service1<%_}else{_%><%-v.service%>Service<%_}_%>.<%-v.functionName%>();
        
    let combinedOutput={};    
    <%_
        const elements=v.queryBuilder;
        for(const element of elements){      
            let elementModel_FC=""
            if(element.queryMode !== 'codeBlock' && element.model){ 
                elementModel_FC=(element.model).charAt(0).toUpperCase() + (element.model).slice(1);
            }      
        
        if(["findOneAndDelete","deleteMany"].includes(element.queryMode)){ _%>

        let <%-element.outputVariable%>=await customQueryService.<%-element.queryMode%>(<%-elementModel_FC%>,<%-JSON.stringify(JSON.parse(element.filter))%>,<%-JSON.stringify(element.option)%>);
        <%_if(typeof element.outputSelect !== "undefined" && element.outputSelect.length){ element.outputSelect.push("id") _%>
        <%-element.outputVariable%> = (({<%_element.outputSelect.forEach((item,index)=>{_%><%-item%><%_if(element.outputSelect.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_element.outputSelect.forEach((item,index)=>{_%><%-item%><%_if(element.outputSelect.length-1 !== index){_%>,<%_}_%><%_})_%>}))(<%-element.outputVariable%>);
        <%_}_%>
        combinedOutput.<%-element.outputVariable%> = <%-element.outputVariable%>
        <%_ }
        else if(["findOneAndUpdate","updateMany"].includes(element.queryMode)){ _%>
        validateRequest = validation.validateParamsWithJoi(<%-JSON.stringify(element.data)%>,<%-element.model%>SchemaKey.schemaKeys);
        if (!validateRequest.isValid) {
            return res.inValidParam({message :  `Invalid values in parameters, ${validateRequest.message}`});
        }
        let <%-element.outputVariable%>=await customQueryService.<%-element.queryMode%>(<%-elementModel_FC%>,<%-JSON.stringify(JSON.parse(element.filter))%>,<%-JSON.stringify(element.data)%>,<%-JSON.stringify(element.option)%>);
        <%_if(typeof element.outputSelect !== "undefined" && element.outputSelect.length){ element.outputSelect.push("id") _%>
        <%-element.outputVariable%> = (({<%_element.outputSelect.forEach((item,index)=>{_%><%-item%><%_if(element.outputSelect.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_element.outputSelect.forEach((item,index)=>{_%><%-item%><%_if(element.outputSelect.length-1 !== index){_%>,<%_}_%><%_})_%>}))(<%-element.outputVariable%>);
        <%_}_%>
        combinedOutput.<%-element.outputVariable%> = <%-element.outputVariable%>
        <%_
        }        
        else if(element.queryMode=="create"){ _%>            
        validateRequest = validation.validateParamsWithJoi(<%-JSON.stringify(element.data)%>,<%-element.model%>SchemaKey.schemaKeys);
        if (!validateRequest.isValid) {
            return res.inValidParam({message :  `Invalid values in parameters, ${validateRequest.message}`});
        } 
        let <%-element.outputVariable%>=await customQueryService.<%-element.queryMode%>(<%-elementModel_FC%>,<%-JSON.stringify(element.data)%>,<%-JSON.stringify(element.option)%>);
            <%_if(typeof element.outputSelect !== "undefined" && element.outputSelect.length){ element.outputSelect.push("id") _%>
        <%-element.outputVariable%> = (({<%_element.outputSelect.forEach((item,index)=>{_%><%-item%><%_if(element.outputSelect.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_element.outputSelect.forEach((item,index)=>{_%><%-item%><%_if(element.outputSelect.length-1 !== index){_%>,<%_}_%><%_})_%>}))(<%-element.outputVariable%>);
        <%_}_%>
            combinedOutput.<%-element.outputVariable%> = <%-element.outputVariable%>
        <%_ }
        else if(element.queryMode=="find" && element.model){ _%>          
        const <%-element.queryVarName%> = {}<%_if(element.filter){ %>
        <%-element.queryVarName%>.filter =<%-JSON.stringify(JSON.parse(element.filter))%>
        <%_}_%>
        <%_if(element.skip){ %>
        <%-element.queryVarName%>.skip = <%-JSON.stringify(element.skip)_%>
        <%_}_%>
        <%_if(element.limit){ %>
        <%-element.queryVarName%>.limit = <%-JSON.stringify(element.limit)_%>
        <%_}_%>
        <%_if(element.populate && element.populate.length>0){ %>
        <%-element.queryVarName%>.populate = <%-JSON.stringify(element.populate)_%>
        <%_}_%>
        <%_if(element.sort){ %>
        <%-element.queryVarName%>.sort = <%-JSON.stringify(element.sort)_%>
        <%_}_%>
        <%_if(element.select){ %>
        <%-element.queryVarName%>.select = <%-JSON.stringify(element.select)_%>
        <%_}_%>
        
        let <%-element.outputVariable%> = await customQueryService.<%-element.queryMode%>(<%-elementModel_FC%>,<%-element.queryVarName%>)
        combinedOutput.<%-element.outputVariable%> = <%-element.outputVariable%>
        <%_ }else if(element.queryMode === 'codeBlock'){ _%>
        <%-element.code%>
        <%_}else if(element.queryMode === 'aggregate'){ _%>
        combinedOutput.<%-element.outputVariable%> = await customQueryService.<%-element.queryMode%>(<%-elementModel_FC%>,<%-JSON.stringify(element.pipes)%>)
        <%_} else if(element.queryMode.toLowerCase() === 'fileupload'){_%>
        <%_if(S3_UPLOAD){_%>

            let allowedFileTypes = <%=element.validationType%>;<%_var max_size = element.maxSize ? element.maxSize : 5%>
            let maxFileSize = <%=max_size%>; //In Megabyte

            // Setting up formidable options.
            const form = new formidable.IncomingForm();
            form.multiples = true;
            form.maxFileSize = 300 * 1024 * 1024; //300 MB
            form.maxFieldsSize = 100 * 1024 * 1024; //50 MB

            const uploadFileRes = await new Promise(async (resolve, reject) => {
            form.parse(req, async function (err, fields, files) { 

                let filePaths = [];
                let fileCount = 1;

                let fileArr = [];
                if (!files['file[]'] || files['file[]'].size == 0) {
                resolve({
                    'err': 'Please Select any one File',
                    'status': false
                });
                }
                if (!Array.isArray(files['file[]'])) {
                fileArr.push(files['file[]']);
                files['file[]'] = fileArr;
                }

                for (let file of files['file[]']) {
                let response = await uploadFiles(file,fields,fileCount++,allowedFileTypes, maxFileSize);
                if (response.status == false) {
                    filePaths.push({
                    'name': file.name,
                    'err': response.message,
                    'status': false
                    });
                } else {
                    filePaths.push({
                    'path': response.data,
                    'status': true
                    });
                }
                
                }
                resolve(filePaths);

            });
            });
            <%_if(S3_UPLOAD_PRIVATE){_%>
            let finalResponse = [];
            if (Array.isArray(uploadFileRes) && uploadFileRes.length){
                uploadFileRes = await new Promise(async (resolve, reject) => {
                    for (let u of uploadFileRes){
                    if (u.status && u.path) {
                        u = await generatePreSignedURL(u.path);
                        finalResponse.push(u);
                    }
                    }
                    resolve(finalResponse);
                });
            }
            <%_}_%>
        <%_} else {_%>

            let defaultDirectory = 'public/assets'
            let allowedFileTypes = <%=element.validationType%>;<%_ var max_size = element.maxSize ? element.maxSize : 5 _%>
            let maxFileSize = <%=max_size%>; //In Megabyte

            // Create Directory if not exist.
            await makeDirectory(defaultDirectory);

            // Setting up formidable options.
            const form = new formidable.IncomingForm();
            form.multiples = true;
            form.maxFileSize = 300 * 1024 * 1024; //300 MB
            form.maxFieldsSize = 100 * 1024 * 1024; //50 MB

            //Upload File one by one
            const uploadFileRes = await new Promise(async (resolve, reject) => {

            form.parse(req, async function (err, fields, files) {

                let filePaths = [];
                let fileCount = 1;

                let fileArr = [];
                if (!files['file[]'] || files['file[]'].size == 0) {
                resolve({
                    'err': 'Please Select any one File',
                    'status': false
                });
                }
                if (!Array.isArray(files['file[]'])) {
                fileArr.push(files['file[]']);
                files['file[]'] = fileArr;
                }

                for (let file of files['file[]']) {

                let response = await uploadFiles(file, fields, fileCount++,allowedFileTypes, maxFileSize, defaultDirectory);

                if (response.status == false) {
                    filePaths.push({
                    'name': file.name,
                    'err': response.message,
                    'status': false
                    });
                } else {
                    let url = response.data;
                    if (!validUrl.isUri(response.data)) {
                    response.data = response.data.replace('/public', '');
                    url =`${response.data}`;
                    }
                    filePaths.push({
                    'path': url,
                    'status': true
                    });
                }
                }
                resolve(filePaths);
            });
        });
        <%_}_%>
        combinedOutput.uploadFileRes = uploadFileRes;
        <%_}
        } _%>  
    <%_}_%>
    <%_if(typeof(v.queryBuilder) !== "undefined" && v.queryBuilder.length > 0){_%>
        if(combinedOutput){
            return res.ok({data:combinedOutput});
        }
    <%_}else{_%>
        let result = <%_if(v.service==DB_MODEL){_%><%-v.service%>Service1<%_}else{_%><%-v.service%>Service<%_}_%>.<%-v.functionName%>();
        if(result){
            return res.ok({data:result});
        }
    <%_}_%>
    } catch (error) {
        return res.failureResponse();
    }
}    
<%_}_%>
<%_ })_%>
<%_}_%>

<%_if(FILE_UPLOAD){_%>
<%_if(S3_UPLOAD){_%>
async function uploadFiles (file,fields,fileCount,allowedFileTypes, maxFileSize){

  let extension = path.extname(file.name);
  extension = extension.split('.').pop();

  fileType = file.type;

  if (allowedFileTypes.length) {
    //Check allowed extension;
    if (!allowedFileTypes.includes(extension)) {
      return {
        status: false,
        message: 'Filetype not allowed.'
      };
    }
  }

  // Check File Size
  const fileSize = ((file.size / 1024) / 1024);
  if (maxFileSize < fileSize) {
    return {
      status: false,
      message: `Allow file size upto ${maxFileSize} MB.`
    };
  }

  let fileName = file.name;
  //Create Requested Directory,if given in request parameter.
  if (fields && fields.folderName) {
    fileName = fields.folderName + '/' + fileName;
  }
  else if (fields && fields.fileName) {
    fileName = fields.fileName + '-' + fileCount + path.extname(file.name);
  }

  const response = await new Promise(async (resolve, reject) => {
    resolve(await uploadToS3(file,fileName));
  });

  return response;

}

async function uploadToS3 (file, fileName){
  let S3Config = {
    AWS_S3_ACCESS_KEY_ID: process.env.AWS_S3_ACCESS_KEY_ID,
    AWS_S3_SECRET_ACCESS_KEY: process.env.AWS_S3_SECRET_ACCESS_KEY,
    AWS_S3_REGION: process.env.AWS_S3_REGION,
    AWS_S3_BUCKET_NAME: process.env.AWS_S3_BUCKET_NAME,
  };

  const s3 = new AWS.S3({
    region: S3Config.AWS_S3_REGION,
    accessKeyId: S3Config.AWS_S3_ACCESS_KEY_ID,
    secretAccessKey: S3Config.AWS_S3_SECRET_ACCESS_KEY
  });

  let params = {
    Bucket: S3Config.AWS_S3_BUCKET_NAME,
    Body: fs.createReadStream(file.path),
    Key: fileName,
  };

  const response = await new Promise(async (resolve, reject) => {
    s3.putObject(params, function (err, data) {
      if (err) {
        resolve({
          status: false,
          message: err.message
        });
      } else {
        resolve({
          status: true,
          data: 'https://' + process.env.AWS_S3_BUCKET_NAME + '.s3.' + S3Config.AWS_S3_REGION + '.amazonaws.com/' + fileName
        });
      }
    });
  });

  return response;
}
<%_if(S3_UPLOAD_PRIVATE){_%>
async function generatePreSignedURL (uri){
  if (uri){
    let S3Config = {
      AWS_S3_ACCESS_KEY_ID: process.env.AWS_S3_ACCESS_KEY_ID,
      AWS_S3_SECRET_ACCESS_KEY: process.env.AWS_S3_SECRET_ACCESS_KEY,
      AWS_S3_REGION: process.env.AWS_S3_REGION,
      AWS_S3_BUCKET_NAME: process.env.AWS_S3_BUCKET_NAME,
    };

    const s3 = new AWS.S3({
      region: S3Config.AWS_S3_REGION,
      accessKeyId: S3Config.AWS_S3_ACCESS_KEY_ID,
      secretAccessKey: S3Config.AWS_S3_SECRET_ACCESS_KEY
    });

    const {
      region, bucket, key 
    } = AmazonS3URI(uri);

    let options = {
      Bucket: bucket,
      Key: key,
      Expires: 1 * 60 * 60, // 1 hour
    };

    let response = await new Promise(async (resolve,reject)=>{
      await s3.getSignedUrl('getObject', options, (err, url) => {
        if (err) {
          resolve({
            status: false,
            err: err,
          });
        } else {
          resolve({
            status: true,
            path: url,
          });
        }
      });
    });
    return response;
  }
  else {
    return {
      status:false,
      err:'Please send Url'
    };
  }
}
<%_}_%>
<%_} else {_%>
/**
 * 
 * Function used to create directory.
 * 
 * @param  {} dirPath
 */
const makeDirectory = async (directoryPath) => {

  if (!fs.existsSync(directoryPath)) {
    fs.promises.mkdir(directoryPath, { recursive: true }, (err) => {
      if (err) {
        return false;
      };
      return true;
    });
  }
  return true;
};

/**
 * 
 * Function used to upload file
 * 
 * @param  {} files
 * @param  {} fields
 */
async function uploadFiles (file, fields, fileCount,allowedFileTypes, maxFileSize, defaultDirectory) {

  let tempPath = file.path;
  let unlink;
  let fileName = file.name;

  let extension = path.extname(file.name);
  extension = extension.split('.').pop();

  fileType = file.type;

  if (allowedFileTypes.length) {
    //Check allowed extension;
    if (!allowedFileTypes.includes(extension)) {
      return {
        status: false,
        message: 'Filetype not allowed.'
      };
    }
  }

  // Check File Size
  const fileSize = ((file.size / 1024) / 1024);
  if (maxFileSize < fileSize) {
    return {
      status: false,
      message: `Allow file size upto ${maxFileSize} MB.`
    };
  }

  //Create New path
  let newPath = defaultDirectory + '/' + new Date().getTime() + path.extname(file.name);

  //Create Requested Directory,if given in request parameter.
  if (fields && fields.folderName) {
    let newDir = defaultDirectory + '/' + fields.folderName;
    const createDir = await makeDirectory(newDir);
    if (createDir) {
      if (fields.fileName) {
        newPath = newDir + '/' + fields.fileName + '-' + fileCount + path.extname(file.name);
        fileName = fields.fileName;
      }
    }
  }
  else if (fields && fields.fileName) {
    newPath = defaultDirectory + '/' + fields.fileName + '-' + fileCount + path.extname(file.name);
    fileName = fields.fileName;
  }
  
  const response = await new Promise(async (resolve, reject) => {
    fs.readFile(tempPath, function (err, data) {
      fs.writeFile(newPath, data, async function (err) {
  
        //Remove file from temp
        unlink = await unlinkFile(tempPath);
  
        if (unlink.status == false) {
          reject(unlink);
        } else {
          resolve({
            status: true,
            message: 'File upload successfully.',
            data: '/' + newPath
          });
        }
      });
    });
  });

  return response;
}

/**
 * 
 * Function used to unlink file.
 * 
 * @param  {} path
 */
async function unlinkFile (path) {

  fs.unlink(path, function (err) {
    if (err) {
      return {
        status: false,
        message: err.message
      };
    }
  });

  return { status: true };
}
<%_}_%>
<%_}_%>

module.exports = {
    <%_methods.forEach(v=> {_%>
    <%-v%>
    <%_})_%>
}
