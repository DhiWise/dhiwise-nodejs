/**
 * customQueryService.js
 * @description :: exports functions used in manipulating data from database
 */

/**
 * @description : uses model instance and other parameters to find the desire data from collection
 * @param {object} model : mongoose model instance of collection
 * @param {object} : filter,populate,skip,limit,select and sort to be applied with query
 * @return {object} : found document(s).
 */   
const find = async (model, { filter = {}, populate, skip, limit, select, sort }) => {
    let query = model.find(filter)
    if (select) {
        query = query.select(select)
    }
    if (populate) {
        query = query.populate(populate)
    }
    if (skip) {
        query = query.skip(skip)
    }
    if (limit) {
        query = query.limit(limit)
    }
    if (sort) {
        query = query.sort(sort)
    }
    return await query.exec()
}

/**
 * @description : create a new document into the collection
 * @param {object} model : mongoose model instance of collection
 * @param {object} data  : data to be created
 * @param {object} option : mongoose options used with create method
 * @return {object} : created document(s)
 */  
const create = async(model,data,options={})=>{
    try {
        if(data && data.length){
            return await model.create(data,options)
        }else{
            return await model.create([data],options)
        }
    } catch (error) {
        throw new Error(error.message)
    }
}

/**
 * @description : find and update the document of collection
 * @param {object} model  : mongoose model instance of collection
 * @param {object} filter : filter to find the data 
 * @param {object} data   : data to update
 * @param {object} option : mongoose options used with findOneAndUpdate method
 * @return {object} : updated document.
 */ 
const findOneAndUpdate = async(model,filter,data,options={new:true})=>{
    try {
        return await model.findOneAndUpdate(filter,data,options)        
    } catch (error) {
        throw new Error(error.message)
    }
}

/**
 * @description : find and remove the document from collection
 * @param {object} model  : mongoose model instance of collection
 * @param {object} filter : filter to find the document 
 * @param {object} option : mongoose options used with findOneAndDelete method
 * @return {object} : removed document.
 */ 
const findOneAndDelete = async(model,filter,options={})=>{
    try {
        return await model.findOneAndDelete(filter,options)        
    } catch (error) {
        throw new Error(error.message)
    }
}

/**
 * @description : find and update multiple documents into the collection
 * @param {object} model  : mongoose model instance of collection
 * @param {object} filter : filter to find the document to be updated
 * @param {object} data   : data to update
 * @param {object} option : mongoose options used with updateMany method
 * @return {array} : updated document(s).
 */ 
const updateMany = async(model,filter,data,options={})=>{
    try {
        const documentsToBeUpdated =  await model.find(filter);
        await model.updateMany(filter,data,options);
        return documentsToBeUpdated;
    } catch (error) {
        throw new Error(error.message)
    }
}

/**
 * @description : removes multiple documents from collection
 * @param {object} model  : mongoose model instance of collection
 * @param {object} filter : filter to find the document 
 * @param {object} option : mongoose options used with deleteMany method
 * @return {array} : removed document(s).
 */ 
const deleteMany = async(model,filter,options={})=>{
    try {
        const documentsToBeDeleted = await model.find(filter);
        await model.deleteMany(filter,options);
        return documentsToBeDeleted;
    } catch (error) {
        throw new Error(error.message)
    }
}

/**
 * @description : find the aggregate data of collection
 * @param {object} model  : mongoose model instance of collection
 * @param {array} queries : pipeline to be applied for aggregation 
 * @return {array} : found document(s).
 */ 
const aggregate = async(model, queries)=>{
    try {
        return await model.aggregate(queries)
    } catch (error) {
        throw new Error(error.message)
    }
}

module.exports = {
    find,
    create,
    findOneAndUpdate,
    findOneAndDelete,
    updateMany,
    deleteMany,
    aggregate
}
