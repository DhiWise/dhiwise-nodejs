/**
 * <%- STRATEGY %>PassportStrategy.js
 */

const { Strategy, ExtractJwt } = require("passport-jwt")
const { JWT } = require("../constants/authConstant")
const model = require("../model/index");
const dbService = require('../utils/dbService');

/**
 * @description : exports authentication strategy for <%-STRATEGY.toLowerCase()%> using passport.js
 * @params {obj} passport : passport object for authentication
 * @return {callback} : returns callback to be used in middleware
 */
module.exports = {
    <%- STRATEGY.toLowerCase() %>PassportStrategy: passport => {
        const options = {};
        options.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();
        options.secretOrKey = JWT.<%- STRATEGY.toUpperCase() %>_SECRET;
        passport.use('<%- STRATEGY.toLowerCase() %>-rule',
            new Strategy(options, (payload, done) => {
                dbService.findOne(model.<%-MODEL%>,{id: payload.id}).then((user)=>{
                    if (user) {
                      return done(null, { ...user.toJSON() });
                    }
                    return done('No User Found', {});
                  }).catch(err => done(err, false))
            })
        );
    }
}