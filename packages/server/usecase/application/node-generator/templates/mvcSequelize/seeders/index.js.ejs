
/**
 * seeder.js
 * @description :: functions that seeds mock data to run the application
 */

const model = require('../model')
const dbService = require('../utils/dbService');
const authConstant=require('../constants/authConstant');
<%_if(SHOULD_ADD_ROLE_PERMISSION){_%>
const { replaceAll } = require('../utils/common');
/* seeds roles */
async function seedRole() {
  try{
    const roles = <%=ROLES%>;
    for(let i=0; i < roles.length; i++) {
      let result = await dbService.findOne(model.role,{ name: roles[i], isActive: true, isDeleted: false });
      if (!result) {
        await dbService.createOne( model.role,{
          name: roles[i],
          code: roles[i].toUpperCase(),
          weight: 1
        });
      }
    };
    console.info('Role model seeded üç∫');
  }catch(error){
    console.log('Role seeder failed.')
  }
}
/* seeds routes of project */
async function seedProjectRoutes(routes) {
  try{
    if (routes && routes.length) {
      for (let i = 0; i < routes.length; i++) {
        const routeMethods = routes[i].methods
        for (let j = 0; j < routeMethods.length; j++) {
          const routeObj = {
            uri: routes[i].path.toLowerCase(),
            method: routeMethods[j],
            route_name: `${replaceAll((routes[i].path).toLowerCase().substring(1), '/', '_')}`,
            isActive: true, 
            isDeleted: false
          }
          if(routeObj.route_name){
            let result = await dbService.findOne(model.projectRoute,routeObj);
            if (!result) {
              await dbService.createOne(model.projectRoute,routeObj);
            }
          }
        }
      }
      console.info('ProjectRoute model seeded üç∫');
    }
  }catch(error){
    console.log('ProjectRoute seeder failed.')
  }
}
/* seeds role for routes */
async function seedRouteRole() {
  try{
    const routeRoles =[ 
      <%_for(let i=0;i < ROUTE_ROLE_ARRAY.length;i++){_%>
      <%=ROUTE_ROLE_ARRAY[i]%>,
      <%_}_%>

    ];
    if (routeRoles && routeRoles.length) {
      for (let i = 0; i < routeRoles.length; i++) {
        let route = await dbService.findOne(model.projectRoute,{ uri: routeRoles[i].route.toLowerCase(), method: routeRoles[i].method, isActive: true, isDeleted: false }, { attributes: ["id"] });
        let role = await dbService.findOne(model.role,{ code: (routeRoles[i].role).toUpperCase(), isActive: true, isDeleted: false }, { attributes: ["id"] });
        if (route && route.id && role && role.id) {
          let routeRoleObj = await dbService.findOne(model.routeRole,{
            roleId: role.id,
            routeId: route.id,
            isActive: true, 
            isDeleted: false
          });
          if (!routeRoleObj) {
            await dbService.createOne(model.routeRole,{
              roleId: role.id,
              routeId: route.id
            });
          }
        }
      };
      console.info('RouteRole model seeded üç∫');
    }
  }catch(error){
    console.log('RouteRole seeder failed.')
  }
}
/* seeds roles for users */
async function seedUserRole (){
  try{
    <%_for(let i in USER_EXIST_CONDITION){_%>
    let <%-ROLE_NAME[i].toLowerCase()%> = await dbService.findOne(model.<%-MODEL%>,<%-JSON.stringify(USER_EXIST_CONDITION[i])%>);
    let <%-ROLE_NAME[i].toLowerCase()%>Role = await dbService.findOne(model.role,{ code: <%=DEFAULT_ROLE%>, isActive: true, isDeleted: false}, { attributes: ["id"] });
    if (<%-ROLE_NAME[i].toLowerCase()%> && <%-ROLE_NAME[i].toLowerCase()%>.isPasswordMatch(<%=USER_PASSWORD[i]%>) && <%-ROLE_NAME[i].toLowerCase()%>Role){
      let count = await dbService.count(model.userRole, {
        userId: <%-ROLE_NAME[i].toLowerCase()%>.id,
        roleId: <%-ROLE_NAME[i].toLowerCase()%>Role.id,
        isActive: true, 
        isDeleted: false
      });
      if (count == 0) {
        await dbService.createOne(model.userRole, {
          userId: <%-ROLE_NAME[i].toLowerCase()%>.id,
          roleId: <%-ROLE_NAME[i].toLowerCase()%>Role.id
        });
        console.info('<%-ROLE_NAME[i].toLowerCase()%> seeded üç∫');
      }
    }
    <%_}_%>
  }catch(error){
    console.log('UserRole seeder failed.')
  }
}
<%_}_%>
/* seeds default users */
async function seedUser() {
  try{
    <%_for(let i in USER_EXIST_CONDITION){_%>
      let <%-ROLE_NAME[i].toLowerCase()%>= await dbService.findOne(model.<%-MODEL%>,<%-JSON.stringify(USER_EXIST_CONDITION[i])%>);
      if (!<%-ROLE_NAME[i].toLowerCase()%> || !<%-ROLE_NAME[i].toLowerCase()%>.isPasswordMatch(<%=USER_PASSWORD[i]%>) ) {
        <%_var finalStr = new String();
        USER[i].role=`@@authConstant.USER_ROLE.${ROLE_NAME[i]}@@`;
        finalStr = JSON.stringify(USER[i]);
        finalStr = finalStr.replace(/@@"/g, "").replace(/"@@/g, "");
        _%>
        let <%-ROLE_NAME[i].toLowerCase()%> = <%-finalStr%>
          await dbService.createOne(model.<%-MODEL%>,<%-ROLE_NAME[i].toLowerCase()%>);
      }
    <%_}_%>
    console.info('User model seeded üç∫');
  }catch(error){
    console.log('User seeder failed.')
  }
}
/* calls of functions to seed mock data into multiple collections */
<%_if(SHOULD_ADD_ROLE_PERMISSION){_%>
async function seedData(allRegisterRoutes){
    await seedUser();
    await seedRole();
    await seedProjectRoutes(allRegisterRoutes);
    await seedRouteRole();
    await seedUserRole();
}     
<%_}else{_%>
async function seedData(){
    await seedUser()    
}   
<%_}_%>

module.exports = seedData;