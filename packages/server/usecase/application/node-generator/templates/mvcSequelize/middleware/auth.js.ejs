/**
 * auth.js
 * @description :: middleware that checks authentication and authorization of user
 */
const passport = require('passport');
const { USER_ROLE} = require('../constants/authConstant');
const model = require('../model');
const dbService = require('../utils/dbService');

/**
 * @description : returns callback that verifies required rights and access
 * @param {object} req : request of route.
 * @param {callback} resolve : resolve callback for succeeding method.
 * @param {callback} reject : reject callback for error.
 * @param {Array} requiredRights : array of rights for logged-in user.
 */
const verifyCallback = (req, resolve, reject, requiredRights) => async (err, user, info) => {
    if (err || info || !user) {
        return reject("Unauthorized User");
    }
    req.user = user;
    if (!user.isActive) {
        return reject("User is deactivated");
    }
    let userToken = await dbService.findOne(model.userTokens,{token:(req.headers.authorization).replace('Bearer ',''),userId:user.id});
    if (!userToken){
        return reject('Token not found');
    }
    if (userToken.isTokenExpired){
        return reject('Token is Expired');
    }
    if (requiredRights.length) {
        for(role in USER_ROLE){
            if(USER_ROLE[role]===user.role){
                const userRights = ROLE_RIGHTS[user.role];
                const hasRequiredRights = requiredRights.some((requiredRight) => userRights.includes(requiredRight));
                if (!hasRequiredRights || !user.id) {
                    return reject('Unauthorized user');
                }
            }
        }
    }
    resolve();
};

/**
 * @description : authentication middleware for request.
 * @param {object} req : request of route.
 * @param {object} res : response of route.
 * @param {callback} next : executes the next middleware succeeding the current middleware.
 * @param {Array} requiredRights : array of rights for particular user.
 */
const auth = (...requiredRights) => async (req, res, next) => {
<% var c = 0; %>
let url =req.originalUrl;
<%_ PLATFORM.forEach((v)=>{ c++; _%>
    <%_ if(c===1){ _%>
    <%_ if(CUSTOM_ROUTES && CUSTOM_ROUTES.hasOwnProperty(v)){ _%>
    if(url.includes(<%= v.toLowerCase() %>) || <%-v.toUpperCase()%>_CUSTOM_ROUTES.includes(url)){    
    <%_}else{_%>
    if(url.includes(<%= v.toLowerCase() %>)){
    <%_}_%>
        return new Promise((resolve, reject) => {
            passport.authenticate('<%-v.toLowerCase()%>-rule', { session: false }, verifyCallback(req, resolve, reject, requiredRights))(
                req,
                res,
                next
            );
        })
        .then(() => next())
        .catch((err) => {
            return res.unAuthorized();
        });
    }
    <%_ }else{ _%>
    <%_ if(CUSTOM_ROUTES && CUSTOM_ROUTES.hasOwnProperty(v)){ _%>
    else if(url.includes(<%= v.toLowerCase() %>) || <%-v.toUpperCase()%>_CUSTOM_ROUTES.includes(url)){    
    <%_}else{_%>
    else if(url.includes(<%= v.toLowerCase() %>)){
    <%_}_%>
        return new Promise((resolve, reject) => {
            passport.authenticate('<%-v.toLowerCase()%>-rule', { session: false }, verifyCallback(req, resolve, reject, requiredRights))(
                req,
                res,
                next
            );
        })
        .then(() => next())
        .catch((err) => {
            return res.unAuthorized();
        });
    }
    <%_ } _%> 
<%_ }) _%>
};

module.exports = auth;
