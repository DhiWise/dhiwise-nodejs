/**
 * <%-DB_MODEL%>Routes.js
 * @description :: CRUD API routes for <%-DB_MODEL%>
 */
 
const express = require('express');
const router = express.Router();
const <%-DB_MODEL%>Controller = require("../../controller/<%-PLATFORM%>/<%-DB_MODEL%>Controller")
<%_ if(IS_AUTH){ _%>
const { PLATFORM } =  require("../../constants/authConstant");
const auth = require("../../middleware/auth");
<%_ } _%>
<%_ if(CUSTOM_POLICY && CUSTOM_POLICY.length){ 
    if(CUSTOM_POLICY.includes('auth')){ let arrayIndex = CUSTOM_POLICY.indexOf('auth'); delete CUSTOM_POLICY[arrayIndex]; CUSTOM_POLICY=CUSTOM_POLICY.filter(Boolean);}
    _%>
<%_ for(let i=0;i < CUSTOM_POLICY.length;i++){ _%>
const <%-CUSTOM_POLICY[i]-%> = require('../../middleware/<%-CUSTOM_POLICY[i]-%>');
<%_ } _%>  
<%_ } _%>  
<%_ if(CONTROLLERS_TO_IMPORT && CONTROLLERS_TO_IMPORT.length){ _%>
<%_ for(let i=0;i < CONTROLLERS_TO_IMPORT.length;i++){ 
    if(CONTROLLERS_TO_IMPORT[i] != DB_MODEL){ _%>
const <%-CONTROLLERS_TO_IMPORT[i]-%>Controller = require('../../controller/<%-PLATFORM%>/<%-CONTROLLERS_TO_IMPORT[i]-%>Controller');
<%_ } }_%>  
<%_ } _%> 

<%_ for(let i=0;i < SUPPORT_API.length;i++){ _%>
<%_ if(SUPPORT_API[i].method=="create"){ _%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/create").post(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%>
<%-DB_MODEL%>Controller.add<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/create").post(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.add<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ } _%><%_ } _%>
<%_ if(SUPPORT_API[i].method=="createBulk") {_%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/addBulk").post(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.bulkInsert<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/addBulk").post(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.bulkInsert<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ } _%><%_ } _%>
<%_ if(SUPPORT_API[i].method=="findAll"){ _%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/list").post(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.findAll<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/list").post(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.findAll<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ } _%><%_ } _%>
<%_ if(SUPPORT_API[i].method=="findById"){ _%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/:id").get(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.get<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/:id").get(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.get<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ } _%><%_ } _%>
<%_ if(SUPPORT_API[i].method=="count"){ _%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/count").post(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.get<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>Count);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/count").post(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%>
<%-DB_MODEL%>Controller.get<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>Count);
<%_ } _%><%_ } _%>
<%_if(SUPPORT_API[i].method=="update"){_%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/update/:id").put(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.update<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);    
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/update/:id").put(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.update<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);    
<%_}_%><%_}_%>
<%_if(SUPPORT_API[i].method=="bulkUpdate"){_%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/updateBulk").put(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.bulkUpdate<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/updateBulk").put(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.bulkUpdate<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_}_%><%_}_%>
<%_if(SUPPORT_API[i].method=="partialUpdate"){_%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/partial-update/:id").put(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.partialUpdate<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/partial-update/:id").put(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.partialUpdate<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_}_%><%_}_%>
<%_if(SUPPORT_API[i].method=="delete"){_%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/delete/:id").delete(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.delete<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/delete/:id").delete(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.delete<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_}_%><%_}_%>
<%_if(SUPPORT_API[i].method=="deleteMany"){_%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/deleteMany").delete(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.deleteMany<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/deleteMany").delete(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.deleteMany<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_}_%><%_}_%>
<%_if(SUPPORT_API[i].method=="softDelete"){_%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/softDelete/:id").put(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.softDelete<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/softDelete/:id").put(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.softDelete<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_}_%><%_}_%>
<%_if(SUPPORT_API[i].method=="softDeleteMany"){_%>
<%_ if(SUPPORT_API[i].isAuth){ _%>
router.route("/<%-ROUTE_PREFIX%>/softDeleteMany").put(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>), <%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.softDeleteMany<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_ }else{ _%>
router.route("/<%-ROUTE_PREFIX%>/softDeleteMany").put(<%_ if(SUPPORT_API[i].policy.length) { _%><%_ for(let j=0;j < SUPPORT_API[i].policy.length;j++){ _%><%-SUPPORT_API[i].policy[j]%>,<%_ } _%><%_ } _%><%-DB_MODEL%>Controller.softDeleteMany<%-DB_MODEL.charAt(0).toUpperCase() + DB_MODEL.slice(1);%>);
<%_}_%><%_}_%>
<%_}_%>
<%_ if(USER_MODEL){ _%>
<%_ if(typeof IS_AUTH !== "undefined" && IS_AUTH){_%>
router.route("/<%-ROUTE_PREFIX%>/me").get(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>),<%-DB_MODEL%>Controller.getLoggedInUserInfo);
router.route("/<%-ROUTE_PREFIX%>/change-password").put(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>),<%-DB_MODEL%>Controller.changePassword);
router.route("/<%-ROUTE_PREFIX%>/update-profile").put(auth(PLATFORM.<%-PLATFORM.toUpperCase()%>),<%-DB_MODEL%>Controller.updateProfile); 
<%_ } _%> 
<%_ } _%>
<%_if(CUSTOM_ROUTES && CUSTOM_ROUTES.length){_%>
<%_ CUSTOM_ROUTES.forEach((v,i)=> {_%>
router.route("<%-v.api%>").<%-v.method%>(<%_if(v.policies && v.policies.length){_%>
<%_v.policies.forEach((policy)=>{_%>
<%_if(policy==='auth'){_%>auth(PLATFORM.<%-PLATFORM.toUpperCase()%>),
<%_}else{_%>
<%-policy%>,<%_}_%>
<%_})_%>
<%_}_%><%-v.controller%>Controller.<%-v.functionName%>)
<%_})_%> 
<%_}%>

module.exports = router;
