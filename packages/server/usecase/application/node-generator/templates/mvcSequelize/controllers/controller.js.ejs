/**
* <%-DB_MODEL%>Controller.js
* @description :: exports action methods for <%-DB_MODEL%>.
*/

const {Op} = require('sequelize')
const <%- DB_MODEL_FC %> = require("../../model/<%-DB_MODEL%>")
const <%-DB_MODEL %>SchemaKey = require("../../utils/validation/<%-DB_MODEL%>Validation");
const validation = require("../../utils/validateRequest");
const dbService = require("../../utils/dbService");
<%_ if(IS_AUTH){ _%>
const auth = require("../../services/auth");
<%_ } _%>
const models = require("../../model");
<%_ if(DELETE_DEPENDENT_MODEL){ _%>
const deleteDependentService = require("../../utils/deleteDependent");
<%_ } _%>
<%_ var methods = [] _%>
<%_
if(typeof(UNIQ_TASK_MODELS)!== 'undefined'){
let models = UNIQ_TASK_MODELS
for(let model of models){
    if(model!==DB_MODEL){
        model = model.charAt(0).toUpperCase() + model.slice(1);
_%>
const <%-model%> = require("../../model/<%-model%>")
<%_ } } } _%>
<%_if(IS_CQ){_%>
const customQueryService = require("../../services/customQueryService")
<%_}_%>
<%_for(let i=0;i< SUPPORT_API.length;i++){ _%>
<%_ if(SUPPORT_API[i].method=="create") {_%>
    <%_ methods.push('add'+DB_MODEL_FC) _%> 
/**
* @description : create record of <%-DB_MODEL_FC%> in SQL table.
* @param {object} req : request including body for creating record.
* @param {object} res : response of created record.
* @return {object} : created <%-DB_MODEL_FC%>. {status, message, data}
*/
const add<%-DB_MODEL_FC%> = async(req, res) => {
    try {
        let dataToCreate = {...req.body || {} };
        delete dataToCreate["addedBy"]
        delete dataToCreate["updatedBy"]
        let validateRequest = validation.validateParamsWithJoi(
            dataToCreate,
            <%-DB_MODEL %>SchemaKey.schemaKeys
        );
        if (!validateRequest.isValid) {
            return res.validationError({message : `Invalid values in parameters, ${validateRequest.message}`});
        }   
        <%_ if(SUPPORT_API[i].isLogin){ _%>
        dataToCreate.<%-SUPPORT_API[i].addedBy%> = req.user.id.toString();
        <%_ } _%>
        let result = await dbService.createOne(<%-DB_MODEL_FC %>,dataToCreate);
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        result = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result);
        <%_}_%>
        return res.success({data:result});
    } catch (error) {
        return res.internalServerError({ message:error.message }); 
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="createBulk") {_%>
    <%_ methods.push('bulkInsert'+DB_MODEL_FC) _%>
/**
* @description : create multiple records of <%-DB_MODEL_FC%> in SQL table.
* @param {object} req : request including body for creating records.
* @param {object} res : response of created records.
* @return {object} : created <%-DB_MODEL_FC%>s. {status, message, data}
*/
const bulkInsert<%-DB_MODEL_FC %> = async(req, res)=>{
    try{
        let dataToCreate = req.body && req.body.data ? [...req.body.data] : [];
        dataToCreate = dataToCreate.map(item=>{
            delete item.addedBy
            delete item.updatedBy
        <%_if(SUPPORT_API[i].isLogin){_%>
            item.<%-SUPPORT_API[i].addedBy%> = req.user.id
        <%_}_%>
            return item;
        });        
        let result =await dbService.createMany(<%-DB_MODEL_FC %>,dataToCreate);
        return res.success({ data:result });  
    }catch(error){
        return res.internalServerError({ message : error.message });
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="update") {_%>
    <%_methods.push('update'+DB_MODEL_FC) _%>
/**
* @description : update record of <%-DB_MODEL_FC%> with data by id.
* @param {object} req : request including id in request params and data in request body.
* @param {object} res : response of updated <%-DB_MODEL_FC%>.
* @return {object} : updated <%-DB_MODEL_FC%>. {status, message, data}
*/
const update<%-DB_MODEL_FC%> = async(req, res) => {
    try {
        if(!req.params.id){
            return res.badRequest();
        }
        let dataToUpdate = { ...req.body || {} };
        let query = { id: req.params.id};
        delete dataToUpdate.addedBy
        <%_ if(SUPPORT_API[i].isLogin){ _%>
        dataToUpdate.updatedBy=req.user.id
        <%_ } _%>
        let validateRequest = validation.validateParamsWithJoi(
            dataToUpdate,
            <%-DB_MODEL%>SchemaKey.updateSchemaKeys
        );
        if (!validateRequest.isValid) {
            return res.validationError({message :  `Invalid values in parameters, ${validateRequest.message}`});
        }
        <%_ 
        nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){
            nestedCalls = SUPPORT_API[i].NESTED_CALLS
            if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
            for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>   
                query = { ...query,...<%=JSON.parse(element.filter)%>                   
            <%_}}
        }}
        _%> 
        let result = await dbService.updateMany(<%-DB_MODEL_FC%>,query,dataToUpdate);
        if(!result){
            return res.recordNotFound();
        }
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        result = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result);
        <%_}_%>
        return res.success({data:result});
    }
    catch(error){
        return res.internalServerError({message:error.message});
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="bulkUpdate") {_%>
    <%_methods.push('bulkUpdate'+DB_MODEL_FC) _%>
/**
* @description : update multiple records of <%-DB_MODEL_FC%> with data by id.
* @param {object} req : request including id in request params and data in request body.
* @param {object} res : response of updated <%-DB_MODEL_FC%>s.
* @return {object} : updated <%-DB_MODEL_FC%>s. {status, message, data}
*/
const bulkUpdate<%-DB_MODEL_FC%>=async(req, res)=>{
    try {
        let query = { ...req.body.filter || {} };
        let dataToUpdate = { ...req.body.data || {} };
        <%_ if(SUPPORT_API[i].isLogin){ _%>
        delete dataToUpdate.addedBy;
        dataToUpdate.updatedBy=req.user.id;
        <%_ } _%>
        <%_ 
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
                for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>   
                    query = { ...query ,...<%=JSON.parse(element.filter)%> }; 
                <%_}}
            }}
        _%> 
        let result = await dbService.updateMany(<%-DB_MODEL_FC%>,query,dataToUpdate);
        if(!result){
            return res.recordNotFound()
        }
        return res.success({data:result});
    } catch(error){
        return res.internalServerError({ message : error.message }); 
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="partialUpdate") {_%>
    <%_methods.push('partialUpdate'+DB_MODEL_FC) _%>
/**
* @description : partially update record of <%-DB_MODEL_FC%> with data by id;
* @param {object} req : request including id in request params and data in request body.
* @param {object} res : response of updated <%-DB_MODEL_FC%>.
* @return {object} : updated <%-DB_MODEL_FC%>. {status, message, data}
*/
const partialUpdate<%-DB_MODEL_FC%> = async (req, res) => {
    try {
        if(!req.params.id){
            return res.badRequest();
        }
        let dataToUpdate = { ...req.body || {} };
        let query = { id: req.params.id};
        delete dataToUpdate.addedBy
        <%_ if(SUPPORT_API[i].isLogin){ _%>
        dataToUpdate.updatedBy=req.user.id
        <%_ } _%>
        <%_ 
        nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){
            nestedCalls = SUPPORT_API[i].NESTED_CALLS
            if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
            for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>   
                query = { ...query,...<%=JSON.parse(element.filter)%>                   
            <%_}}
        }}
        _%> 
        let result = await dbService.updateMany(<%-DB_MODEL_FC%>,query,dataToUpdate);
        if(!result){
            return res.recordNotFound();
        }
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        result = (({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}) => ({<%_SUPPORT_API[i].fields.forEach((item,index)=>{_%><%-item%><%_if(SUPPORT_API[i].fields.length-1 !== index){_%>,<%_}_%><%_})_%>}))(result);
        <%_}_%>
        return res.success({data:result});
    }
    catch(error){
        return res.internalServerError({message:error.message});
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="findAll") {_%>
    <%_methods.push('findAll'+DB_MODEL_FC) _%>
/**
* @description : find all records of <%-DB_MODEL_FC%> from table based on query and options.
* @param {object} req : request including option and query. {query, options : {page, limit, includes}, isCountOnly}
* @param {object} res : response contains data found from table.
* @return {object} : found <%-DB_MODEL_FC%>(s). {status, message, data}
*/
const findAll<%-DB_MODEL_FC%> = async(req, res) => {
    try {
        let query = req.body && req.body.query ? {...req.body.query} : {};
        let options= req.body && req.body.options ? {...req.body.options} : {};
        query = dbService.queryBuilderParser(query);
        if(req.body && req.body.isCountOnly){
            <%_         
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){ 
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        query = { ...query,...<%=JSON.parse(element.filter)%> }
                    <%_}}
                }                
            }
            _%>
            let totalRecords = await dbService.count(<%-DB_MODEL_FC%>, query);
            return res.success({data : { totalRecords }});
        }
        else {
            <%_if(SUPPORT_API[i].fieldSelection){_%>
                if(options.select && options.select.length){
                    options.attributes = <%=SUPPORT_API[i].fields%>.filter(Set.prototype.has, new Set(options.select));
                }else{
                    options.attributes=<%=SUPPORT_API[i].fields%>
                }
            <%_} else {_%>
            if (options && options.select && options.select.length){
                options.attributes = options.select;
            }
            <%_}_%>
            if (options && options.include && options.include.length){
                let include = [];
                options.include.forEach(i => {
                i.model = models[i.model];
                if (i.query) {
                    i.where = dbService.queryBuilderParser(i.query);
                }
                include.push(i);
                });
                options.include = include;
            }
            if (options && options.sort){
                options.order = dbService.sortParser(options.sort);
                delete options.sort;
            }
            let result = await dbService.findMany( <%-DB_MODEL_FC%>,query,options);
            if(!result){
                return res.recordNotFound();
            }
            return res.success({data:result});   
        }
    }
    catch(error){
        return res.internalServerError({ message:error.message });
    }
}

<%_ } _%>
<%_ if(SUPPORT_API[i].method=="findById") {_%>
    <%_methods.push('get'+DB_MODEL_FC) _%>
/**
* @description : find record of <%-DB_MODEL_FC%> from table by id;
* @param {object} req : request including id in request params.
* @param {object} res : response contains record retrieved from table.
* @return {object} : found <%-DB_MODEL_FC%>. {status, message, data}
*/
const get<%-DB_MODEL_FC%> = async(req, res) => {
    try {
        if(!req.params.id){
            return res.badRequest();
        }
        let options = {};
        <%_if(SUPPORT_API[i].fieldSelection){_%>
        let select = <%=SUPPORT_API[i].fields%>
        options.attributes = select;
        <%_}_%> 
        let id = req.params.id
        let result = await dbService.findByPk(<%-DB_MODEL_FC%>,id,options);
        if(result){    
            return res.success({data:result});
        }
        return res.recordNotFound();
    }
    catch(error){
        return res.internalServerError({ message : error.message })
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="count") {_%>
    <%_methods.push('get'+DB_MODEL_FC+'Count') _%>
/**
* @description : returns total number of records of <%-DB_MODEL_FC%>.
* @param {object} req : request including where object to apply filters in request body 
* @param {object} res : response that returns total number of records.
* @return {object} : number of records. {status, message, data}
*/
const get<%-DB_MODEL_FC%>Count = async(req, res) => {
    try {
        let where = {...req.body.where || {} };
        <%_
            nestedCalls={}
            if(SUPPORT_API[i].IS_NESTED_CALL){  
            nestedCalls = SUPPORT_API[i].NESTED_CALLS
            if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
                    for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                        where = {...where, ...<%=JSON.parse(element.filter)%> }
                    <%_}}
                }
            }
        _%>
        let totalRecords = await dbService.count(<%-DB_MODEL_FC%>,where);
        return res.success({data: { totalRecords } });
    }
    catch(error){
        return res.internalServerError({ message:error.message });
    }
}
<%_ } _%>
<%_ if(SUPPORT_API[i].method=="delete") {_%>
    <%_methods.push('delete'+DB_MODEL_FC) _%>
    <%_ if(DELETE_DEPENDENT_MODEL){_%>
/**
* @description : delete record of <%-DB_MODEL_FC%> from table.
* @param {object} req : request including id as request param.
* @param {object} res : response contains deleted record.
* @return {object} : deleted <%-DB_MODEL_FC%>. {status, message, data}
*/
const delete<%-DB_MODEL_FC%> =async(req, res) => {
    try{
        if(!req.params.id){
            return res.badRequest();
        }
        let query = { id : req.params.id };
        <%_
                nestedCalls={}
                if(SUPPORT_API[i].IS_NESTED_CALL){  
                nestedCalls = SUPPORT_API[i].NESTED_CALLS
                if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
                        for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                            query = { ...query,...<%=JSON.parse(element.filter)%>};
                        <%_}}
                    }
                }
        _%>
        let result;
        if (req.body.isWarning) {
            result = await deleteDependentService.count<%-DB_MODEL_FC%>(query);
        } else {
            result = await deleteDependentService.delete<%-DB_MODEL_FC%>(query); 
        }
        return res.success({data : result});
    } catch(error){
        return res.internalServerError({ message:error.message }); 
    }
}
<%_} else {_%>
/**
* @description : delete record of <%-DB_MODEL_FC%> from table.
* @param {object} req : request including id as request param.
* @param {object} res : response contains deleted record.
* @return {object} : deleted <%-DB_MODEL_FC%>. {status, message, data}
*/
const delete<%-DB_MODEL_FC%> = async (req, res) => {
    try {
        const result = await dbService.deleteByPk(<%-DB_MODEL_FC%>,req.params.id);
        return res.success({data:result});
    }
    catch(error){
        return res.internalServerError({ message:error.message });
    }
}
<%_}_%>
<%_ } _%>

<%_ if(SUPPORT_API[i].method=="deleteMany") {_%>
    <%_methods.push('deleteMany'+DB_MODEL_FC) _%>
    <%_ if(DELETE_DEPENDENT_MODEL){_%>
/**
* @description : delete records of <%-DB_MODEL_FC%> in table by using ids.
* @param {object} req : request including array of ids in request body.
* @param {object} res : response contains no of records deleted.
* @return {object} : no of records deleted. {status, message, data}
*/
const deleteMany<%-DB_MODEL_FC%> =async(req, res) => {
    try{
        if(!req.body || !req.body.ids){
            return res.badRequest();
        }
        let ids = req.body.ids;
        let query = {id: { [Op.in] : ids }}
        let data = req.body;
        let result;
        if(data.isWarning){
            result = await deleteDependentService.count<%-DB_MODEL_FC%>(query);
        } else{
            result = await deleteDependentService.delete<%-DB_MODEL_FC%>(query);
        }
        return res.success({data:result});
    }
    catch(error){
        return res.internalServerError({message:error.message}); 
    }
}
<%_} else {_%>
/**
* @description : delete records of <%-DB_MODEL_FC%> in table by using ids.
* @param {object} req : request including array of ids in request body.
* @param {object} res : response contains no of records deleted.
* @return {object} : no of records deleted. {status, message, data}
*/
const deleteMany<%-DB_MODEL_FC%> =async(req, res) => {
    try{
        let ids = req.body.ids; 
        if(!ids || !Array.isArray(ids) || ids.length < 1){
            return res.badRequest();
        }
        let query = {id:{[Op.in]:ids}};
        let result = await dbService.deleteMany(<%-DB_MODEL_FC%>,query);
        return res.success({data:result});
    } catch(error){
        return res.internalServerError({ message:error.message }); 
    }
}
<%_ } _%>
<%_ } _%>

<%_ if(SUPPORT_API[i].method=="softDelete") {_%>
    <%_methods.push('softDelete'+DB_MODEL_FC) _%>
    <%_ if(DELETE_DEPENDENT_MODEL){_%>
/**
* @description : deactivate record of <%-DB_MODEL_FC%> from table by id;
* @param {object} req : request including id in request params.
* @param {object} res : response contains updated record of <%-DB_MODEL_FC%>.
* @return {object} : deactivated <%-DB_MODEL_FC%>. {status, message, data}
*/
const softDelete<%-DB_MODEL_FC%> = async (req, res) => {
    try{
        if(!req.params.id){
            return res.badRequest();
        }
        let query = { id :req.params.id }
        <%_
        nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){  
        nestedCalls = SUPPORT_API[i].NESTED_CALLS
        if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
            for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
                query = { ...query,...<%=JSON.parse(element.filter)%> };
            <%_}}
            }
        }
        _%>
        let result = await deleteDependentService.softDelete<%-DB_MODEL_FC%>(query);
        return res.success({data:result});
    }catch(error){
        return res.internalServerError({ message:error.message }); 
    }
}
<%_} else {_%>
/**
* @description : deactivate record of <%-DB_MODEL_FC%> from table by id;
* @param {object} req : request including id in request params.
* @param {object} res : response contains updated record of <%-DB_MODEL_FC%>.
* @return {object} : deactivated <%-DB_MODEL_FC%>. {status, message, data}
*/
const softDelete<%-DB_MODEL_FC%> = async (req, res) => {
    try{
        if(!req.params.id){
            return res.badRequest();
        }
        let query = {id:req.params.id}
        <%_
        nestedCalls={}
        if(SUPPORT_API[i].IS_NESTED_CALL){  
        nestedCalls = SUPPORT_API[i].NESTED_CALLS
        if(nestedCalls && nestedCalls.pre && nestedCalls.pre.length>0){             
            for(const element of nestedCalls.pre){ if(element.existingVariable && element.filter!==undefined){_%>
               query = { ...query,...<%=JSON.parse(element.filter)%> } 
            <%_}}
            }
        }
        _%>
        let options={};
        let result = await dbService.softDeleteMany(<%-DB_MODEL_FC%>, query,options);
        return res.success({data:result});
    }catch(error){
        return res.internalServerError({ message:error.message }); 
    }
}
<%_}_%>
<%_ } _%>

<%_ if(SUPPORT_API[i].method=="softDeleteMany") {_%>
    <%_methods.push('softDeleteMany'+DB_MODEL_FC) _%>
    <%_ if(DELETE_DEPENDENT_MODEL){_%>
/**
* @description : deactivate multiple records of <%-DB_MODEL_FC%> from table by ids;
* @param {object} req : request including array of ids in request body.
* @param {object} res : response contains updated records of <%-DB_MODEL_FC%>.
* @return {object} : number of deactivated documents of <%-DB_MODEL_FC%>. {status, message, data}
*/
const softDeleteMany<%-DB_MODEL_FC%> = async (req, res) => {
    try{
        let ids = req.body.ids;
        if(!ids || !Array.isArray(ids) || ids.length < 1){
            return res.badRequest();
        }
        let query = {id:{[Op.in]:ids}}
        let result = await deleteDependentService.softDelete<%-DB_MODEL_FC%>(query);
        return res.success({data:result});
    }catch(error){
        return res.internalServerError({ message:error.message }); 
    }
}
<%_} else {_%>
 /**
* @description : deactivate multiple records of <%-DB_MODEL_FC%> from table by ids;
* @param {object} req : request including array of ids in request body.
* @param {object} res : response contains updated records of <%-DB_MODEL_FC%>.
* @return {object} : number of deactivated documents of <%-DB_MODEL_FC%>. {status, message, data}
*/
const softDeleteMany<%-DB_MODEL_FC%> = async (req, res) => {
    try{
        let ids = req.body.ids;
        if(!ids || !Array.isArray(ids) || ids.length < 1){
            return res.badRequest();
        }
        let query = {id:{[Op.in]:ids}};
        let result = await dbService.softDeleteMany(<%-DB_MODEL_FC%>,query,options);
        return res.success({data:result});
    }catch(error){
        return res.internalServerError({ message:error.message }); 
    }
}
<%_}_%>
<%_ } _%>

<%_ } _%>

<%_if(typeof USER_MODEL !== "undefined" && USER_MODEL){
    methods.push('changePassword');
    methods.push('updateProfile');
    methods.push('getLoggedInUserInfo');
    _%> 
    /**
    * @description : change password
    * @param {object} req : request including user credentials.
    * @param {object} res : response contains updated user record.
    * @return {object} : updated user record {status, message, data}
    */
    const changePassword = async (req, res) => {
        try {
            let params = req.body;
            if (!params.newPassword || !params.oldPassword) {
                return res.validationError();
            }
            let result = await auth.changePassword({...params,userId:req.user.id});
            if(result.flag){
                return res.failure({message:result.data});
            }
            return res.success({message:result.data});
        } catch (error) {
            return res.internalServerError({ message:error.message }); 
        }
    }
    /**
    * @description : update user profile.
    * @param {object} req : request including user profile details to update in request body.
    * @param {object} res : updated user record.
    * @return {object} : updated user record. {status, message, data}
    */
    const updateProfile = async (req, res) => {
        try {
            let dataToUpdate = {...req.body || {} };
            let validateRequest = validation.validateParamsWithJoi(
                dataToUpdate,
                <%-DB_MODEL %>SchemaKey.updateSchemaKeys
            );
            if (!validateRequest.isValid) {
                return res.validationError({message : `Invalid values in parameters, ${validateRequest.message}`});
            }   
            delete dataToUpdate.password;
            delete dataToUpdate.createdAt;
            delete dataToUpdate.updatedAt;
            delete dataToUpdate.id;
            let result = await dbService.updateByPk(<%-DB_MODEL_FC%>, req.user.id ,dataToUpdate);         
            return res.success({data:result});
        }
        catch (error){
            return res.internalServerError({message:error.message});
        }
    };

    /**
    * @description : get information of logged-in User.
    * @param {obj} req : authentication token is required
    * @param {obj} res : Logged-in user information
    * @return {obj} : Logged-in user information {status, message, data}
    */
    const getLoggedInUserInfo = async (req, res) => {
        try {
            if (!req.user && !req.user.id) {
                return res.badRequest();
            }
            const query = {
                id : req.user.id,
                isDeleted : false,
                isActive : true
            };
            let result = await dbService.findOne(<%-DB_MODEL_FC%>,query);
            if (!result) {
                return res.recordNotFound();
            }
            return res.success({ data: result });
        } catch (error){
            return res.internalServerError({ data: error.message });
        }
    };
<%_}_%>

<%_if(CUSTOM_ROUTES){_%>
<%_CUSTOM_ROUTES.forEach((v,i)=>{ 
    methods.push(v.functionName)
_%>
/**
    * @description : <%-v.functionName%> 
    * @param {object} req : request
    * @param {object} res : response 
    * @return {object} : response of <%-v.functionName%> {status, message, data}
*/
const <%-v.functionName%>=async (req, res)=>{
    try {
        <%_if(typeof(v.queryBuilder) !== "undefined" && v.queryBuilder.length > 0){_%>
        let combinedOutput={};
        <%_ for(let i=0;i< v.queryBuilder.length;i++){_%>
        <%_ if(v.queryBuilder[i].queryMode === "find"){ _%>
            <%_ if(v.queryBuilder[i].filter){ 
                v.queryBuilder[i].model = v.queryBuilder[i].model.charAt(0).toUpperCase() + v.queryBuilder[i].model.slice(1);_%>
            combinedOutput.<%-v.queryBuilder[i].outputVariable%> =  await customQueryService.find(<%-v.queryBuilder[i].model%>,{filter:<%-v.queryBuilder[i].filter%>});
            <%_}_%>
        <%_}_%>   
        <%_}_%>
        return res.success({data:combinedOutput});
        <%_}_%>
    } catch (error) {
        return res.internalServerError({ message:error.message }); 
    }  
}   
<%_ })_%>
<%_}_%>

module.exports = {
    <%-methods.join()%>
}
