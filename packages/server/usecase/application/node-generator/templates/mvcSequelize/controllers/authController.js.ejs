/**
 * authController.js
 * @description :: exports authentication methods
*/

const authService =  require("../../services/auth")
const model = require("../../model/index");
const dbService = require("../../utils/dbService");
const dayjs = require("dayjs");
const <%-USER_MODEL %>SchemaKey = require("../../utils/validation/<%-USER_MODEL%>Validation");
const validation = require("../../utils/validateRequest");
const authConstant = require('../../constants/authConstant');
const {Op} = require('sequelize');
<%_if(NOTIFICATION_TYPE==="EMAIL"){_%>
const emailService = require("../../services/email/emailService")
<%_}else if(NOTIFICATION_TYPE==="SMS"){_%>
const sendSMS = require("../../services/sms/smsService");
const ejs = require("ejs")
<%_}_%>
const { uniqueValidation } = require('../../utils/common');

/**
* @description : user registration 
* @param {object} req : request for register
* @param {object} res : response for register
* @return {object} : response for register {status, message, data}
*/
const register = async(req, res) => {
    try {
        let validateRequest = validation.validateParamsWithJoi(
            req.body,
            <%-USER_MODEL %>SchemaKey.schemaKeys
        );
        if (!validateRequest.isValid) {
            return res.validationError({message :  `Invalid values in parameters, ${validateRequest.message}`});
        }
        let unique = await uniqueValidation(model.<%-USER_MODEL%>,req.body);   
        if (!unique){ 
            return res.validationError({message:'User Registration Failed, Duplicate Data found'});
        }     
        const result = await dbService.createOne(model.<%-USER_MODEL%>,{...req.body});
        <%_if(NOTIFICATION_TYPE==="SMS"){_%>
        // send sms to user for successfully registered.
        let renderData = {
            <%_if(typeof REGISTER_TEMPLATE_ATTRIBUTE === "object"){_%>
            <%_for(let i in REGISTER_TEMPLATE_ATTRIBUTE){_%>
            <%-i%>:result.<%-REGISTER_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
            <%_}_%>
            <%_}else{_%>
            ...result
            <%_}_%>
        }
        const msg = await ejs.renderFile(`${__basedir}/views/<%-REGISTER_TEMPLATE_NAME%>/html.ejs`, renderData);
        let smsObj = {
            to:result.<%-MOBILE_FIELD%>,
            message:msg
        }
        await sendSMS(smsObj);
        <%_}else if(NOTIFICATION_TYPE==="EMAIL"){_%>
        // send email to user for successfully registered.
        let mailObj = {
            subject: "Register User",
            to: result.<%-EMAIL_FIELD%>,
            <%_if(typeof REGISTER_TEMPLATE_ATTRIBUTE === "object"){_%>
            template: "/views/<%-REGISTER_TEMPLATE_NAME%>",
            data:{
                <%_for(let i in REGISTER_TEMPLATE_ATTRIBUTE){_%>
                <%-i%>:result.<%-REGISTER_TEMPLATE_ATTRIBUTE[i].replace(/.*?\./, "");%>,
                <%_}_%>
            }
            <%_}else if(!REGISTER_TEMPLATE_ATTRIBUTE){_%>
            template: "/views/<%-REGISTER_TEMPLATE_NAME%>",
            data:result
            <%_}_%>
        };
        await emailService.sendEmail(mailObj);
        <%_}_%>
        return res.success({data:result});
    } catch (error) {
        return res.internalServerError({ message:error.message }); 
    }  
}

/**
 * @description : send email or sms to user with OTP on forgot password
 * @param {object} req : request for forgotPassword
 * @param {object} res : response for forgotPassword
 * @return {object} : response for forgotPassword {status, message, data}
 */
const forgotPassword = async (req, res) => {
    const params = req.body;
    try {
        if (!params.email) {
            return res.badRequest();
        }
        let where = {<%-EMAIL_FIELD%>: params.email};
        params.email = params.email.toString().toLowerCase();
        let isUser = await dbService.findOne(model.<%-USER_MODEL%>,where);
        if (isUser) {
            let {resultOfEmail,resultOfSMS} = await authService.sendResetPasswordNotification(isUser);
            if(resultOfEmail && resultOfSMS){
                return res.success({message:"otp successfully send."});
            }else if(resultOfEmail && !resultOfSMS) {
                return res.success({message:"otp successfully send to your email."});
            } else if (!resultOfEmail && resultOfSMS) { 
                return res.success({message:"otp successfully send to your mobile number."});
            }else{
                return res.success({message:"otp can not be sent due to some issue try again later"});
            }
        } else {
            return res.recordNotFound();
        }
    } catch (error) {
        return res.internalServerError({ message:error.message }); 
    }
}

/**
 * @description : validate OTP
 * @param {object} req : request for validateResetPasswordOtp
 * @param {object} res : response for validateResetPasswordOtp
 * @return {object} : response for validateResetPasswordOtp  {status, message, data}
 */ 
const validateResetPasswordOtp = async (req, res) => {
    const params = req.body;
    try {
        if (!params || !params.otp) {
            return res.badRequest();
        }
        let isUser = await dbService.findOne(model.userAuthSettings, { resetPasswordCode: params.otp });
        if (!isUser || !isUser.resetPasswordCode) {
            return res.failure({message:"Invalid OTP"});
        }
        // link expire
        if (dayjs(new Date()).isAfter(dayjs(isUser.expiredTimeOfResetPasswordCode))) {
            return res.failure({message:"Your reset password link is expired or invalid"});
        }
        return res.success({message:'Otp verified'});
    } catch (error) {
        return res.internalServerError({ message:error.message }); 
    }
}

/**
 * @description : reset password with code and new password
 * @param {object} req : request for resetPassword
 * @param {object} res : response for resetPassword
 * @return {object} : response for resetPassword {status, message, data}
 */
const resetPassword = async (req, res) => {
    const params = req.body;
    try {
        if (!params.code || !params.newPassword) {
            return res.badRequest();
        }
        let userAuth = await dbService.findOne(model.userAuthSettings, { resetPasswordCode: params.code });
        if (userAuth && userAuth.expiredTimeOfResetPasswordCode) {
            if (dayjs(new Date()).isAfter(dayjs(userAuth.expiredTimeOfResetPasswordCode))) {// link expire
                return res.failure({message:"Your reset password link is expired or invalid"});
            }
        } else {
            // invalid code
            return res.failure({message:"Invalid Code"});
        }
        let response = await authService.resetPassword(userAuth.userId, params.newPassword);
        if(response && !response.flag){
            return res.success({message:response.data});
        }
        return res.failure({message:response.data});
    } catch (error) {
        return res.internalServerError({ message:error.message }); 
    }
}

/**
 * @description : login with username and password
 * @param {object} req : request for login 
 * @param {object} res : response for login
 * @return {object} : response for login {status, message, data}
 */
const login = async(req,res)=>{
    try {
        let {username,password} = req.body;
        if(!username || !password){
            return res.badRequest();
        }
        <%_if(ROLE_PERMISSION){_%>
        let roleAccess = false;
        if (req.body.includeRoleAccess){
            roleAccess = req.body.includeRoleAccess;
        }
        let result = await authService.loginUser(username, password, authConstant.PLATFORM.<%-PLATFORM.toUpperCase()%>, roleAccess);
        <%_} else {_%>
        let result = await authService.loginUser(username,password,authConstant.PLATFORM.<%-PLATFORM.toUpperCase()%>); 
        <%_}_%>
        if(!result.flag){
            return res.success({data:result.data,message:result.message});
        }
        return res.badRequest({message:result.data});
    } catch (error) {
        return res.internalServerError({ message:error.message }); 
    }
}

/**
 * @description : logout user
 * @param {object} req : request for logout
 * @param {object} res : response for logout
 * @return {object} : response for logout {status, message, data}
 */
const logout = async (req, res) => {
    try {
        let userTokens = await dbService.findOne(model.userTokens, { token: (req.headers.authorization).replace('Bearer ', ''),userId:req.user.id });
        userTokens.isTokenExpired = true;
        let id = userTokens.id;
        delete userTokens.id;
        await dbService.updateByPk(model.userTokens,id, userTokens.toJSON());
        return res.success({message:'Logged Out Successfully'});
    } catch (error) {
        return res.internalServerError({ message:error.message }); 
    }
}

module.exports = {
    register,
    forgotPassword,
    validateResetPasswordOtp,
    resetPassword,
    login,
    logout
}
