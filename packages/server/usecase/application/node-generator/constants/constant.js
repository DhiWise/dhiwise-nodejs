module.exports = {
  PROJECT_TYPE: {
    CLEAN_CODE: 'CC',
    MVC: 'MVC',
    MVC_SEQUELIZE: 'MVC_SEQUELIZE',
    CC_SEQUELIZE: 'CC_SEQUELIZE',
  },
  PROJECT_CREATION_STEP: {
    CREATE_ROOT_DIRECTORY: 1,
    SCHEMA_VALIDATION: 2,
    CREATE_BLANK_DIRECTORY_CC: 3,
    CREATE_BLANK_DIRECTORY_MVC: 4,
    CREATE_DEPENDENT_FILE: 5,
    CREATE_CONSTANT: 6,
    IDENTIFY_AUTH: 7,
    SETUP_ENV_FILE: 8,
    CREATE_MODELS: 9,
    CREATE_ROUTES: 10,
    CREATE_CONTROLLER_INDEX: 11,
    CREATE_CONTROLLERS: 12,
    CREATE_CUSTOM_POLICY: 13,
    CREATE_CUSTOM_ROUTES: 14,
    CREATE_VALIDATION_FILE: 15,
    CREATE_POSTMAN: 16,
    CREATE_FILE_UPLOAD_FILES: 17,
    ADD_SOCIAL_LOGIN: 18,
    CREATE_ENTITY: 19,
    GENERATE_STATIC_FILES_MVC: 20,
    GENERATE_STATIC_FILES_CC: 21,
    CREATE_AUTH_CONTROLLER_INDEX: 22,
    CREATE_INDEX_FILES_OF_CONTROLLER_CUSTOM_ROUTES: 23,
    INPUT_PARSER: 24,
    PARSE_INPUT_JSON_FOR_VIRTUAL_RELATIONSHIP: 25,
    CREATE_CUSTOM_ROUTES_SERVICE: 26,
    CREATE_DEPENDENCY_SERVICE: 27,
    SEQUELIZE_TYPE_CONVERSION: 28,
    SEQUELIZE_TYPE_VALIDATION: 29,
    CREATE_SEQUELIZE_MODELS: 30,
    SEQUELIZE_DB_SERVICE: 31,
    CREATE_DB_CONNECTION: 32,
    CREATE_DB_CONNECTION_SEQUELIZE: 33,
    CREATE_CONTROLLER_INDEX_SEQUELIZE: 34,
    CREATE_CONTROLLERS_SEQUELIZE: 35,
    GENERATE_STATIC_FILES_CC_SEQUELIZE: 36,
    INPUT_PARSER_SEQUELIZE: 37,
    CONVERT_HOOK_NAMES: 38,
    QUERY_BUILDER_PARSE_SEQUELIZE: 39,
    CREATE_SEQUELIZE_VALIDATION_FILE: 40,
    CREATE_DEPENDENT_FILE_SEQUELIZE: 41,
    ADD_ROLE_PERMISSION: 42,
    GENERATE_TEST_CASES: 43,
    ADD_ROLE_PERMISSION_SEQUELIZE: 44,
    ADD_SEEDER_MONGOOSE: 45,
    GENERATE_STATIC_FILES_MVC_SEQUELIZE: 46,
    ADD_SEEDER_SEQUELIZE: 47,
    CREATE_POSTMAN_SEQUELIZE: 48,
    SETUP_ENV_FILE_SEQUELIZE: 49,
    CREATE_APP_FILE: 50,
    SEQUELIZE_SCHEMA_VALIDATION: 51,
    GENERATE_TEST_CASES_SEQUELIZE: 52,
    RENDER_EJS: 53,
    APPLY_ESLINT: 54,
    CREATE_DATA_ACCESS_FILES: 55,
    CREATE_USECASE_FILES: 56,
    CREATE_COMMON_USE_CASE_FILES: 57,
    CREATE_MIDDLEWARE_INDEX: 58,
    CREATE_CUSTOM_ROUTES_USECASE: 59,
  },
  SUPPORT_API: ['C', 'R', 'U', 'D', 'UP', 'HD', 'BC', 'BU'],
  APIS: [
    'create', 'createBulk', 'findAll', 'findById', 'count', 'update', 'bulkUpdate',
    'partialUpdate', 'softDelete', 'delete', 'deleteMany', 'softDeleteMany',
  ],
  REMOVE_KEY_FROM_MONGOOSE_MODEL_FOR_SEQUELIZE_MODEL: [
    'ref',
    'index',
    'alias',
    'default',
    'enum',
    'required',
    'set',
    'get',
    'sparse',
    'immutable',
    'match',
    'transform',
    'maxLength',
    'minLength',
    'populate',
    'of',
    'isAutoIncrement',
    'primary',
    'refAttribute',
    'tiny',
    'relType',
  ],
  REMOVE_KEY_FROM_MODEL_FOR_SEQUELIZE_MODEL: [
    'ref',
    'index',
    'alias',
    'default',
    'enum',
    'required',
    'set',
    'get',
    'sparse',
    'immutable',
    'match',
    'transform',
    'maxLength',
    'minLength',
    'populate',
    'of',
    'isAutoIncrement',
    'primary',
    'refAttribute',
    'default',
    'relType',
  ],
  ADAPTER: {
    MYSQL: 1,
    MSSQL: 2,
    POSTGRESQL: 3,
  },
  MODEL_CONFIG_FOR_ROLE_PERMISSION: {
    role: {
      create: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      createBulk: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      findAll: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      findById: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      partialUpdate: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      softDelete: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      update: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      count: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      bulkUpdate: {
        selected: true,
        policy: [],
        isAuth: true,
      },
    },
    projectRoute: {
      create: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      createBulk: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      findAll: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      findById: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      partialUpdate: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      softDelete: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      update: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      count: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      bulkUpdate: {
        selected: true,
        policy: [],
        isAuth: true,
      },
    },
    routeRole: {
      create: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      createBulk: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      findAll: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      findById: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      partialUpdate: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      update: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      softDelete: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      count: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      bulkUpdate: {
        selected: true,
        policy: [],
        isAuth: true,
      },
    },
    userRole: {
      create: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      createBulk: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      findAll: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      findById: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      partialUpdate: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      update: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      softDelete: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      count: {
        selected: true,
        policy: [],
        isAuth: true,
      },
      bulkUpdate: {
        selected: true,
        policy: [],
        isAuth: true,
      },
    },
  },
  MODEL_FOR_ROLE_PERMISSION: {
    role: {
      name: {
        type: 'String',
        required: true,
      },
      code: {
        type: 'String',
        required: true,
      },
      weight: {
        type: 'Number',
        required: true,
      },
      isActive: { type: 'Boolean' },
      isDeleted: { type: 'Boolean' },
    },
    projectRoute: {
      route_name: {
        type: 'String',
        required: true,
      },
      method: {
        type: 'String',
        required: true,
      },
      uri: {
        type: 'String',
        required: true,
      },
      isActive: { type: 'Boolean' },
      isDeleted: { type: 'Boolean' },
    },
    routeRole: {
      routeId: {
        type: 'ObjectId',
        ref: 'projectRoute',
        required: true,
      },
      roleId: {
        type: 'ObjectId',
        ref: 'role',
      },
      isActive: { type: 'Boolean' },
      isDeleted: { type: 'Boolean' },
    },
    userRole: {
      userId: {
        type: 'ObjectId',
        ref: 'user',
        required: true,
      },
      roleId: {
        type: 'ObjectId',
        ref: 'role',
      },
      isActive: { type: 'Boolean' },
      isDeleted: { type: 'Boolean' },
    },
  },
  MODEL_FOR_ROLE_PERMISSION_SEQUELIZE: {
    role: {
      name: {
        type: 'STRING',
        required: true,
      },
      code: {
        type: 'STRING',
        required: true,
      },
      weight: {
        type: 'INTEGER',
        required: true,
      },
      isActive: { type: 'BOOLEAN' },
      isDeleted: { type: 'BOOLEAN' },
      id: {
        type: 'INTEGER',
        primary: true,
        isAutoIncrement: true,
      },
    },
    projectRoute: {
      route_name: {
        type: 'STRING',
        required: true,
      },
      method: {
        type: 'STRING',
        required: true,
      },
      uri: {
        type: 'STRING',
        required: true,
      },
      isActive: { type: 'BOOLEAN' },
      isDeleted: { type: 'BOOLEAN' },
      id: {
        type: 'INTEGER',
        primary: true,
        isAutoIncrement: true,
      },
    },
    routeRole: {
      routeId: {
        ref: 'projectRoute',
        required: true,
        type: 'INTEGER',
        refAttribute: 'id',
      },
      roleId: {
        ref: 'role',
        type: 'INTEGER',
        refAttribute: 'id',
      },
      isActive: { type: 'BOOLEAN' },
      isDeleted: { type: 'BOOLEAN' },
      id: {
        type: 'INTEGER',
        primary: true,
        isAutoIncrement: true,
      },
    },
    userRole: {
      userId: {
        ref: 'user',
        required: true,
        type: 'INTEGER',
        refAttribute: 'id',
      },
      roleId: {
        ref: 'role',
        type: 'INTEGER',
        required: true,
        refAttribute: 'id',
      },
      isActive: { type: 'BOOLEAN' },
      isDeleted: { type: 'BOOLEAN' },
      id: {
        type: 'INTEGER',
        primary: true,
        isAutoIncrement: true,
      },
    },
  },
  DEFAULT_ROLE: 'SYSTEM_USER',
  DEFAULT_ADMIN_EMAIL: 'admin@gmail.com',
  DEFAULT_ADMIN_USERNAME: 'admin@gmail.com',
  SQL_PROVIDER: {
    MSSQL: 'mssql',
    MYSQL: 'mysql',
    PGSQL: 'postgres',
  },
  mssql: {
    bigint: 'Sequelize.BIGINT',
    numeric: 'Sequelize.DECIMAL',
    bit: 'Sequelize.BOOLEAN',
    smallint: 'Sequelize.INTEGER',
    decimal: 'Sequelize.DECIMAL',
    smallmoney: 'Sequelize.DECIMAL(10,2)',
    money: 'Sequelize.DECIMAL(10,2)',
    int: 'Sequelize.INTEGER',
    tinyint: 'Sequelize.INTEGER',
    float: 'Sequelize.FLOAT',
    real: 'Sequelize.REAL',
    date: 'Sequelize.DATEONLY',
    datetimeoffset: 'Sequelize.DATETIME',
    datetime2: 'Sequelize.DATETIME',
    datetime: 'Sequelize.DATETIME',
    smalldatetime: 'Sequelize.DATETIME',
    time: 'Sequelize.DATETIME',
    char: 'Sequelize.CHAR',
    varchar: 'Sequelize.STRING',
    text: 'Sequelize.TEXT',
    nchar: 'Sequelize.CHAR',
    nvarchar: 'Sequelize.STRING',
    binary: 'Sequelize.CHAR',
    varbinary: 'Sequelize.STRING',
    image: 'Sequelize.TEXT',
    rowversion: 'Sequelize.INTEGER',
    uniqueidentifier: 'Sequelize.UUID',
    xml: 'Sequelize.TEXT',
    spatialgeometrytypes: 'Sequelize.GEOMETRY',
    spatialgeographytypes: 'Sequelize.GEOGRAPHY',
  },
  mysql: {
    char: 'Sequelize.CHAR',
    varchar: 'Sequelize.STRING',
    tinytext: 'Sequelize.TEXT',
    text: 'Sequelize.TEXT',
    mediumtext: 'Sequelize.TEXT',
    longtext: 'Sequelize.TEXT',
    blob: 'Sequelize.BLOB',
    mediumblob: 'Sequelize.BLOB',
    longblob: 'Sequelize.BLOB',
    tinyint: 'Sequelize.INTEGER',
    bigint: 'Sequelize.BIGINT',
    float: 'Sequelize.FLOAT',
    double: 'Sequelize.DOUBLE',
    decimal: 'Sequelize.DECIMAL',
    date: 'Sequelize.DATEONLY',
    datetime: 'Sequelize.DATE',
    timestamp: 'Sequelize.DATE',
    time: 'Sequelize.DATE',
    enum: 'Sequelize.ENUM',
    set: 'Sequelize.ARRAY',
    boolean: 'Sequelize.BOOLEAN',
    int: 'Sequelize.INTEGER',
  },
  postgres: {
    smallint: 'Sequelize.INTEGER',
    integer: 'Sequelize.INTEGER',
    bigint: 'Sequelize.BIGINT',
    decimal: 'Sequelize.DECIMAL',
    numeric: 'Sequelize.DECIMAL',
    real: 'Sequelize.REAL',
    doubleprecision: 'Sequelize.DOUBLE',
    smallserial: 'Sequelize.INTEGER',
    serial: 'Sequelize.BIGINT',
    money: 'Sequelize.DECIMAL',
    varchar: 'Sequelize.STRING',
    char: 'Sequelize.CHAR',
    text: 'Sequelize.TEXT',
    citext: 'Sequelize.CITEXT',
    timestamp: 'Sequelize.DATE',
    TIMESTAMPTXZ: 'Sequelize.DATE',
    date: 'Sequelize.DATEONLY',
    timewithouttimezone: 'Sequelize.DATE',
    timewithtimezone: 'Sequelize.DATE',
    interval: 'Sequelize.BIGINT',
    boolean: 'Sequelize.BOOLEAN',
    enum: 'Sequelize.ENUM',
    point: 'Sequelize.GEOMETRY(\'POINT\')',
    line: 'Sequelize.GEOMETRY(\'LINE\')',
    lseg: 'Sequelize.GEOMETRY(\'LSEG\')',
    box: 'Sequelize.GEOMETRY(\'BOX\')',
    path: 'Sequelize.GEOMETRY(\'PATH\')',
    polygon: 'Sequelize.GEOMETRY(\'POLYGON\')',
    circle: 'Sequelize.GEOMETRY(\'CIRCLE\')',
    uuid: 'Sequelize.UUID',
    xml: 'Sequelize.TEXT',
    array: 'Sequelize.ARRAY',
    int4range: 'Sequelize.RANGE(Sequelize.INTEGER)',
    int8range: 'Sequelize.RANGE(Sequelize.BIGINT)',
    numrange: 'Sequelize.RANGE(Sequelize.DECIMAL)',
    tsrange: 'Sequelize.RANGE(Sequelize.DATE)',
    tstzrange: 'Sequelize.RANGE(Sequelize.DATE)',
    daterange: 'Sequelize.RANGE(Sequelize.DATEONLY)',
    cidr: 'Sequelize.CIDR',
    inet: 'Sequelize.INET',
    macaddr: 'Sequelize.MACADDR',
  },

  SEQUELIZE_INDEX_TYPE: {
    UNIQUE: 'UNIQUE',
    BTREE: 'BTREE',
    GIN: 'GIN',
    PARTIAL: 'PARTIAL',
  },

  DB_ADAPTER: {
    MYSQL: 'mysql',
    MSSQL: 'mssql',
    POSTGRESQL: 'postgres',
    MONGODB: 'mongodb',
  },
  REMOVE_FIELD_FOR_FAKE_DATA: ['isActive', 'isDeleted', 'createdAt', 'updatedAt', 'addedBy', 'modifiedBy', 'updatedBy'],
  SEQUELIZE_DATATYPE_MAPPINGS: {
    SEQUELIZE_STRING_TYPE: ['String', 'STRING', 'CHAR', 'TEXT'],
    SEQUELIZE_NUMBER_TYPE: ['Number', 'NUMBER', 'INTEGER', 'BIGINT', 'REAL'],
    SEQUELIZE_DECIMAL_TYPE: ['Double', 'FLOAT', 'REAL', 'DOUBLE', 'DECIMAL'],
    SEQUELIZE_UUID_TYPE: ['UUID', 'UUIDV4'],
    SEQUELIZE_DATE_TYPE: ['DATE', 'DATEONLY', 'Date', 'DATETIME'],
    SEQUELIZE_BLOB_TYPE: ['BLOB', 'blob'],
    SEQUELIZE_JSON_TYPE: ['JSONB', 'JSON', 'Json', 'Mixed'],
    SEQUELIZE_ARRAY_TYPE: ['ARRAY'],
    SEQUELIZE_GEOMETRY_TYPE: ['GEOMETRY', 'GEOGRAPHY'],
    SEQUELIZE_RANGE_TYPE: ['RANGE'],
    SEQUELIZE_BOOLEAN_TYPE: ['BOOLEAN', 'Boolean'],
  },

  ORM_PROVIDERS: {
    SEQUELIZE: 'sequelize',
    MONGOOSE: 'mongoose',
  },

  CHANGE_STRUCTURE_FIELD: {
    config: 'configuration',
    views: 'view',
  },
  SQL_RELATIONSHIP_TYPE: {
    HAS_ONE: 1,
    HAS_MANY: 2,
  },
  SEQUELIZE_DATATYPE_MAPPING_WITH_JAVASCRIPT: {
    INTEGER: 'number',
    STRING: 'string',
    TEXT: 'string',
    CHAR: 'string',
    BOOLEAN: 'boolean',
    BIGINT: 'number',
    FLOAT: 'number',
    REAL: 'number',
    DOUBLE: 'number',
    DECIMAL: 'number',
    DATE: 'string',
    DATEONLY: 'string',
    ENUM: 'ENUM',
  },
};
